// STATICS/js/jquery.js
(function (window, undefined) {
	var rootjQuery,
		readyList,
		document = window.document,
		location = window.location,
		navigator = window.navigator,
		_jQuery = window.jQuery,
		_$ = window.$,
		core_push = Array.prototype.push,
		core_slice = Array.prototype.slice,
		core_indexOf = Array.prototype.indexOf,
		core_toString = Object.prototype.toString,
		core_hasOwn = Object.prototype.hasOwnProperty,
		core_trim = String.prototype.trim,
		jQuery = function (selector, context) {
			return new jQuery.fn.init(selector, context, rootjQuery);
		},
		core_pnum = /[\-+]?(?:\d*\.|)\d+(?:[eE][\-+]?\d+|)/.source,
		core_rnotwhite = /\S/,
		core_rspace = /\s+/,
		rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,
		rquickExpr = /^(?:[^#<]*(<[\w\W]+>)[^>]*$|#([\w\-]*)$)/,
		rsingleTag = /^<(\w+)\s*\/?>(?:<\/\1>|)$/,
		rvalidchars = /^[\],:{}\s]*$/,
		rvalidbraces = /(?:^|:|,)(?:\s*\[)+/g,
		rvalidescape = /\\(?:["\\\/bfnrt]|u[\da-fA-F]{4})/g,
		rvalidtokens =
			/"[^"\\\r\n]*"|true|false|null|-?(?:\d\d*\.|)\d+(?:[eE][\-+]?\d+|)/g,
		rmsPrefix = /^-ms-/,
		rdashAlpha = /-([\da-z])/gi,
		fcamelCase = function (all, letter) {
			return (letter + "").toUpperCase();
		},
		DOMContentLoaded = function () {
			if (document.addEventListener) {
				document.removeEventListener(
					"DOMContentLoaded",
					DOMContentLoaded,
					false
				);
				jQuery.ready();
			} else if (document.readyState === "complete") {
				document.detachEvent("onreadystatechange", DOMContentLoaded);
				jQuery.ready();
			}
		},
		class2type = {};
	jQuery.fn = jQuery.prototype = {
		constructor: jQuery,
		init: function (selector, context, rootjQuery) {
			var match, elem, ret, doc;
			if (!selector) {
				return this;
			}
			if (selector.nodeType) {
				this.context = this[0] = selector;
				this.length = 1;
				return this;
			}
			if (typeof selector === "string") {
				if (
					selector.charAt(0) === "<" &&
					selector.charAt(selector.length - 1) === ">" &&
					selector.length >= 3
				) {
					match = [null, selector, null];
				} else {
					match = rquickExpr.exec(selector);
				}
				if (match && (match[1] || !context)) {
					if (match[1]) {
						context = context instanceof jQuery ? context[0] : context;
						doc =
							context && context.nodeType
								? context.ownerDocument || context
								: document;
						selector = jQuery.parseHTML(match[1], doc, true);
						if (rsingleTag.test(match[1]) && jQuery.isPlainObject(context)) {
							this.attr.call(selector, context, true);
						}
						return jQuery.merge(this, selector);
					} else {
						elem = document.getElementById(match[2]);
						if (elem && elem.parentNode) {
							if (elem.id !== match[2]) {
								return rootjQuery.find(selector);
							}
							this.length = 1;
							this[0] = elem;
						}
						this.context = document;
						this.selector = selector;
						return this;
					}
				} else if (!context || context.jquery) {
					return (context || rootjQuery).find(selector);
				} else {
					return this.constructor(context).find(selector);
				}
			} else if (jQuery.isFunction(selector)) {
				return rootjQuery.ready(selector);
			}
			if (selector.selector !== undefined) {
				this.selector = selector.selector;
				this.context = selector.context;
			}
			return jQuery.makeArray(selector, this);
		},
		selector: "",
		jquery: "1.8.1",
		length: 0,
		size: function () {
			return this.length;
		},
		toArray: function () {
			return core_slice.call(this);
		},
		get: function (num) {
			return num == null
				? this.toArray()
				: num < 0
				? this[this.length + num]
				: this[num];
		},
		pushStack: function (elems, name, selector) {
			var ret = jQuery.merge(this.constructor(), elems);
			ret.prevObject = this;
			ret.context = this.context;
			if (name === "find") {
				ret.selector = this.selector + (this.selector ? " " : "") + selector;
			} else if (name) {
				ret.selector = this.selector + "." + name + "(" + selector + ")";
			}
			return ret;
		},
		each: function (callback, args) {
			return jQuery.each(this, callback, args);
		},
		ready: function (fn) {
			jQuery.ready.promise().done(fn);
			return this;
		},
		eq: function (i) {
			i = +i;
			return i === -1 ? this.slice(i) : this.slice(i, i + 1);
		},
		first: function () {
			return this.eq(0);
		},
		last: function () {
			return this.eq(-1);
		},
		slice: function () {
			return this.pushStack(
				core_slice.apply(this, arguments),
				"slice",
				core_slice.call(arguments).join(",")
			);
		},
		map: function (callback) {
			return this.pushStack(
				jQuery.map(this, function (elem, i) {
					return callback.call(elem, i, elem);
				})
			);
		},
		end: function () {
			return this.prevObject || this.constructor(null);
		},
		push: core_push,
		sort: [].sort,
		splice: [].splice,
	};
	jQuery.fn.init.prototype = jQuery.fn;
	jQuery.extend = jQuery.fn.extend = function () {
		var options,
			name,
			src,
			copy,
			copyIsArray,
			clone,
			target = arguments[0] || {},
			i = 1,
			length = arguments.length,
			deep = false;
		if (typeof target === "boolean") {
			deep = target;
			target = arguments[1] || {};
			i = 2;
		}
		if (typeof target !== "object" && !jQuery.isFunction(target)) {
			target = {};
		}
		if (length === i) {
			target = this;
			--i;
		}
		for (; i < length; i++) {
			if ((options = arguments[i]) != null) {
				for (name in options) {
					src = target[name];
					copy = options[name];
					if (target === copy) {
						continue;
					}
					if (
						deep &&
						copy &&
						(jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy)))
					) {
						if (copyIsArray) {
							copyIsArray = false;
							clone = src && jQuery.isArray(src) ? src : [];
						} else {
							clone = src && jQuery.isPlainObject(src) ? src : {};
						}
						target[name] = jQuery.extend(deep, clone, copy);
					} else if (copy !== undefined) {
						target[name] = copy;
					}
				}
			}
		}
		return target;
	};
	jQuery.extend({
		noConflict: function (deep) {
			if (window.$ === jQuery) {
				window.$ = _$;
			}
			if (deep && window.jQuery === jQuery) {
				window.jQuery = _jQuery;
			}
			return jQuery;
		},
		isReady: false,
		readyWait: 1,
		holdReady: function (hold) {
			if (hold) {
				jQuery.readyWait++;
			} else {
				jQuery.ready(true);
			}
		},
		ready: function (wait) {
			if (wait === true ? --jQuery.readyWait : jQuery.isReady) {
				return;
			}
			if (!document.body) {
				return setTimeout(jQuery.ready, 1);
			}
			jQuery.isReady = true;
			if (wait !== true && --jQuery.readyWait > 0) {
				return;
			}
			readyList.resolveWith(document, [jQuery]);
			if (jQuery.fn.trigger) {
				jQuery(document).trigger("ready").off("ready");
			}
		},
		isFunction: function (obj) {
			return jQuery.type(obj) === "function";
		},
		isArray:
			Array.isArray ||
			function (obj) {
				return jQuery.type(obj) === "array";
			},
		isWindow: function (obj) {
			return obj != null && obj == obj.window;
		},
		isNumeric: function (obj) {
			return !isNaN(parseFloat(obj)) && isFinite(obj);
		},
		type: function (obj) {
			return obj == null
				? String(obj)
				: class2type[core_toString.call(obj)] || "object";
		},
		isPlainObject: function (obj) {
			if (
				!obj ||
				jQuery.type(obj) !== "object" ||
				obj.nodeType ||
				jQuery.isWindow(obj)
			) {
				return false;
			}
			try {
				if (
					obj.constructor &&
					!core_hasOwn.call(obj, "constructor") &&
					!core_hasOwn.call(obj.constructor.prototype, "isPrototypeOf")
				) {
					return false;
				}
			} catch (e) {
				return false;
			}
			var key;
			for (key in obj) {
			}
			return key === undefined || core_hasOwn.call(obj, key);
		},
		isEmptyObject: function (obj) {
			var name;
			for (name in obj) {
				return false;
			}
			return true;
		},
		error: function (msg) {
			throw new Error(msg);
		},
		parseHTML: function (data, context, scripts) {
			var parsed;
			if (!data || typeof data !== "string") {
				return null;
			}
			if (typeof context === "boolean") {
				scripts = context;
				context = 0;
			}
			context = context || document;
			if ((parsed = rsingleTag.exec(data))) {
				return [context.createElement(parsed[1])];
			}
			parsed = jQuery.buildFragment([data], context, scripts ? null : []);
			return jQuery.merge(
				[],
				(parsed.cacheable ? jQuery.clone(parsed.fragment) : parsed.fragment)
					.childNodes
			);
		},
		parseJSON: function (data) {
			if (!data || typeof data !== "string") {
				return null;
			}
			data = jQuery.trim(data);
			if (window.JSON && window.JSON.parse) {
				return window.JSON.parse(data);
			}
			if (
				rvalidchars.test(
					data
						.replace(rvalidescape, "@")
						.replace(rvalidtokens, "]")
						.replace(rvalidbraces, "")
				)
			) {
				return new Function("return " + data)();
			}
			jQuery.error("Invalid JSON: " + data);
		},
		parseXML: function (data) {
			var xml, tmp;
			if (!data || typeof data !== "string") {
				return null;
			}
			try {
				if (window.DOMParser) {
					tmp = new DOMParser();
					xml = tmp.parseFromString(data, "text/xml");
				} else {
					xml = new ActiveXObject("Microsoft.XMLDOM");
					xml.async = "false";
					xml.loadXML(data);
				}
			} catch (e) {
				xml = undefined;
			}
			if (
				!xml ||
				!xml.documentElement ||
				xml.getElementsByTagName("parsererror").length
			) {
				jQuery.error("Invalid XML: " + data);
			}
			return xml;
		},
		noop: function () {},
		globalEval: function (data) {
			if (data && core_rnotwhite.test(data)) {
				(
					window.execScript ||
					function (data) {
						window["eval"].call(window, data);
					}
				)(data);
			}
		},
		camelCase: function (string) {
			return string.replace(rmsPrefix, "ms-").replace(rdashAlpha, fcamelCase);
		},
		nodeName: function (elem, name) {
			return (
				elem.nodeName && elem.nodeName.toUpperCase() === name.toUpperCase()
			);
		},
		each: function (obj, callback, args) {
			var name,
				i = 0,
				length = obj.length,
				isObj = length === undefined || jQuery.isFunction(obj);
			if (args) {
				if (isObj) {
					for (name in obj) {
						if (callback.apply(obj[name], args) === false) {
							break;
						}
					}
				} else {
					for (; i < length; ) {
						if (callback.apply(obj[i++], args) === false) {
							break;
						}
					}
				}
			} else {
				if (isObj) {
					for (name in obj) {
						if (callback.call(obj[name], name, obj[name]) === false) {
							break;
						}
					}
				} else {
					for (; i < length; ) {
						if (callback.call(obj[i], i, obj[i++]) === false) {
							break;
						}
					}
				}
			}
			return obj;
		},
		trim:
			core_trim && !core_trim.call("\uFEFF\xA0")
				? function (text) {
						return text == null ? "" : core_trim.call(text);
				  }
				: function (text) {
						return text == null ? "" : text.toString().replace(rtrim, "");
				  },
		makeArray: function (arr, results) {
			var type,
				ret = results || [];
			if (arr != null) {
				type = jQuery.type(arr);
				if (
					arr.length == null ||
					type === "string" ||
					type === "function" ||
					type === "regexp" ||
					jQuery.isWindow(arr)
				) {
					core_push.call(ret, arr);
				} else {
					jQuery.merge(ret, arr);
				}
			}
			return ret;
		},
		inArray: function (elem, arr, i) {
			var len;
			if (arr) {
				if (core_indexOf) {
					return core_indexOf.call(arr, elem, i);
				}
				len = arr.length;
				i = i ? (i < 0 ? Math.max(0, len + i) : i) : 0;
				for (; i < len; i++) {
					if (i in arr && arr[i] === elem) {
						return i;
					}
				}
			}
			return -1;
		},
		merge: function (first, second) {
			var l = second.length,
				i = first.length,
				j = 0;
			if (typeof l === "number") {
				for (; j < l; j++) {
					first[i++] = second[j];
				}
			} else {
				while (second[j] !== undefined) {
					first[i++] = second[j++];
				}
			}
			first.length = i;
			return first;
		},
		grep: function (elems, callback, inv) {
			var retVal,
				ret = [],
				i = 0,
				length = elems.length;
			inv = !!inv;
			for (; i < length; i++) {
				retVal = !!callback(elems[i], i);
				if (inv !== retVal) {
					ret.push(elems[i]);
				}
			}
			return ret;
		},
		map: function (elems, callback, arg) {
			var value,
				key,
				ret = [],
				i = 0,
				length = elems.length,
				isArray =
					elems instanceof jQuery ||
					(length !== undefined &&
						typeof length === "number" &&
						((length > 0 && elems[0] && elems[length - 1]) ||
							length === 0 ||
							jQuery.isArray(elems)));
			if (isArray) {
				for (; i < length; i++) {
					value = callback(elems[i], i, arg);
					if (value != null) {
						ret[ret.length] = value;
					}
				}
			} else {
				for (key in elems) {
					value = callback(elems[key], key, arg);
					if (value != null) {
						ret[ret.length] = value;
					}
				}
			}
			return ret.concat.apply([], ret);
		},
		guid: 1,
		proxy: function (fn, context) {
			var tmp, args, proxy;
			if (typeof context === "string") {
				tmp = fn[context];
				context = fn;
				fn = tmp;
			}
			if (!jQuery.isFunction(fn)) {
				return undefined;
			}
			args = core_slice.call(arguments, 2);
			proxy = function () {
				return fn.apply(context, args.concat(core_slice.call(arguments)));
			};
			proxy.guid = fn.guid = fn.guid || proxy.guid || jQuery.guid++;
			return proxy;
		},
		access: function (elems, fn, key, value, chainable, emptyGet, pass) {
			var exec,
				bulk = key == null,
				i = 0,
				length = elems.length;
			if (key && typeof key === "object") {
				for (i in key) {
					jQuery.access(elems, fn, i, key[i], 1, emptyGet, value);
				}
				chainable = 1;
			} else if (value !== undefined) {
				exec = pass === undefined && jQuery.isFunction(value);
				if (bulk) {
					if (exec) {
						exec = fn;
						fn = function (elem, key, value) {
							return exec.call(jQuery(elem), value);
						};
					} else {
						fn.call(elems, value);
						fn = null;
					}
				}
				if (fn) {
					for (; i < length; i++) {
						fn(
							elems[i],
							key,
							exec ? value.call(elems[i], i, fn(elems[i], key)) : value,
							pass
						);
					}
				}
				chainable = 1;
			}
			return chainable
				? elems
				: bulk
				? fn.call(elems)
				: length
				? fn(elems[0], key)
				: emptyGet;
		},
		now: function () {
			return new Date().getTime();
		},
	});
	jQuery.ready.promise = function (obj) {
		if (!readyList) {
			readyList = jQuery.Deferred();
			if (document.readyState === "complete") {
				setTimeout(jQuery.ready, 1);
			} else if (document.addEventListener) {
				document.addEventListener("DOMContentLoaded", DOMContentLoaded, false);
				window.addEventListener("load", jQuery.ready, false);
			} else {
				document.attachEvent("onreadystatechange", DOMContentLoaded);
				window.attachEvent("onload", jQuery.ready);
				var top = false;
				try {
					top = window.frameElement == null && document.documentElement;
				} catch (e) {}
				if (top && top.doScroll) {
					(function doScrollCheck() {
						if (!jQuery.isReady) {
							try {
								top.doScroll("left");
							} catch (e) {
								return setTimeout(doScrollCheck, 50);
							}
							jQuery.ready();
						}
					})();
				}
			}
		}
		return readyList.promise(obj);
	};
	jQuery.each(
		"Boolean Number String Function Array Date RegExp Object".split(" "),
		function (i, name) {
			class2type["[object " + name + "]"] = name.toLowerCase();
		}
	);
	rootjQuery = jQuery(document);
	var optionsCache = {};

	function createOptions(options) {
		var object = (optionsCache[options] = {});
		jQuery.each(options.split(core_rspace), function (_, flag) {
			object[flag] = true;
		});
		return object;
	}
	jQuery.Callbacks = function (options) {
		options =
			typeof options === "string"
				? optionsCache[options] || createOptions(options)
				: jQuery.extend({}, options);
		var memory,
			fired,
			firing,
			firingStart,
			firingLength,
			firingIndex,
			list = [],
			stack = !options.once && [],
			fire = function (data) {
				memory = options.memory && data;
				fired = true;
				firingIndex = firingStart || 0;
				firingStart = 0;
				firingLength = list.length;
				firing = true;
				for (; list && firingIndex < firingLength; firingIndex++) {
					if (
						list[firingIndex].apply(data[0], data[1]) === false &&
						options.stopOnFalse
					) {
						memory = false;
						break;
					}
				}
				firing = false;
				if (list) {
					if (stack) {
						if (stack.length) {
							fire(stack.shift());
						}
					} else if (memory) {
						list = [];
					} else {
						self.disable();
					}
				}
			},
			self = {
				add: function () {
					if (list) {
						var start = list.length;
						(function add(args) {
							jQuery.each(args, function (_, arg) {
								var type = jQuery.type(arg);
								if (
									type === "function" &&
									(!options.unique || !self.has(arg))
								) {
									list.push(arg);
								} else if (arg && arg.length && type !== "string") {
									add(arg);
								}
							});
						})(arguments);
						if (firing) {
							firingLength = list.length;
						} else if (memory) {
							firingStart = start;
							fire(memory);
						}
					}
					return this;
				},
				remove: function () {
					if (list) {
						jQuery.each(arguments, function (_, arg) {
							var index;
							while ((index = jQuery.inArray(arg, list, index)) > -1) {
								list.splice(index, 1);
								if (firing) {
									if (index <= firingLength) {
										firingLength--;
									}
									if (index <= firingIndex) {
										firingIndex--;
									}
								}
							}
						});
					}
					return this;
				},
				has: function (fn) {
					return jQuery.inArray(fn, list) > -1;
				},
				empty: function () {
					list = [];
					return this;
				},
				disable: function () {
					list = stack = memory = undefined;
					return this;
				},
				disabled: function () {
					return !list;
				},
				lock: function () {
					stack = undefined;
					if (!memory) {
						self.disable();
					}
					return this;
				},
				locked: function () {
					return !stack;
				},
				fireWith: function (context, args) {
					args = args || [];
					args = [context, args.slice ? args.slice() : args];
					if (list && (!fired || stack)) {
						if (firing) {
							stack.push(args);
						} else {
							fire(args);
						}
					}
					return this;
				},
				fire: function () {
					self.fireWith(this, arguments);
					return this;
				},
				fired: function () {
					return !!fired;
				},
			};
		return self;
	};
	jQuery.extend({
		Deferred: function (func) {
			var tuples = [
					["resolve", "done", jQuery.Callbacks("once memory"), "resolved"],
					["reject", "fail", jQuery.Callbacks("once memory"), "rejected"],
					["notify", "progress", jQuery.Callbacks("memory")],
				],
				state = "pending",
				promise = {
					state: function () {
						return state;
					},
					always: function () {
						deferred.done(arguments).fail(arguments);
						return this;
					},
					then: function () {
						var fns = arguments;
						return jQuery
							.Deferred(function (newDefer) {
								jQuery.each(tuples, function (i, tuple) {
									var action = tuple[0],
										fn = fns[i];
									deferred[tuple[1]](
										jQuery.isFunction(fn)
											? function () {
													var returned = fn.apply(this, arguments);
													if (returned && jQuery.isFunction(returned.promise)) {
														returned
															.promise()
															.done(newDefer.resolve)
															.fail(newDefer.reject)
															.progress(newDefer.notify);
													} else {
														newDefer[action + "With"](
															this === deferred ? newDefer : this,
															[returned]
														);
													}
											  }
											: newDefer[action]
									);
								});
								fns = null;
							})
							.promise();
					},
					promise: function (obj) {
						return typeof obj === "object"
							? jQuery.extend(obj, promise)
							: promise;
					},
				},
				deferred = {};
			promise.pipe = promise.then;
			jQuery.each(tuples, function (i, tuple) {
				var list = tuple[2],
					stateString = tuple[3];
				promise[tuple[1]] = list.add;
				if (stateString) {
					list.add(
						function () {
							state = stateString;
						},
						tuples[i ^ 1][2].disable,
						tuples[2][2].lock
					);
				}
				deferred[tuple[0]] = list.fire;
				deferred[tuple[0] + "With"] = list.fireWith;
			});
			promise.promise(deferred);
			if (func) {
				func.call(deferred, deferred);
			}
			return deferred;
		},
		when: function (subordinate) {
			var i = 0,
				resolveValues = core_slice.call(arguments),
				length = resolveValues.length,
				remaining =
					length !== 1 ||
					(subordinate && jQuery.isFunction(subordinate.promise))
						? length
						: 0,
				deferred = remaining === 1 ? subordinate : jQuery.Deferred(),
				updateFunc = function (i, contexts, values) {
					return function (value) {
						contexts[i] = this;
						values[i] =
							arguments.length > 1 ? core_slice.call(arguments) : value;
						if (values === progressValues) {
							deferred.notifyWith(contexts, values);
						} else if (!--remaining) {
							deferred.resolveWith(contexts, values);
						}
					};
				},
				progressValues,
				progressContexts,
				resolveContexts;
			if (length > 1) {
				progressValues = new Array(length);
				progressContexts = new Array(length);
				resolveContexts = new Array(length);
				for (; i < length; i++) {
					if (resolveValues[i] && jQuery.isFunction(resolveValues[i].promise)) {
						resolveValues[i]
							.promise()
							.done(updateFunc(i, resolveContexts, resolveValues))
							.fail(deferred.reject)
							.progress(updateFunc(i, progressContexts, progressValues));
					} else {
						--remaining;
					}
				}
			}
			if (!remaining) {
				deferred.resolveWith(resolveContexts, resolveValues);
			}
			return deferred.promise();
		},
	});
	jQuery.support = (function () {
		var support,
			all,
			a,
			select,
			opt,
			input,
			fragment,
			eventName,
			i,
			isSupported,
			clickFn,
			div = document.createElement("div");
		div.setAttribute("className", "t");
		div.innerHTML =
			"  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>";
		all = div.getElementsByTagName("*");
		a = div.getElementsByTagName("a")[0];
		a.style.cssText = "top:1px;float:left;opacity:.5";
		if (!all || !all.length || !a) {
			return {};
		}
		select = document.createElement("select");
		opt = select.appendChild(document.createElement("option"));
		input = div.getElementsByTagName("input")[0];
		support = {
			leadingWhitespace: div.firstChild.nodeType === 3,
			tbody: !div.getElementsByTagName("tbody").length,
			htmlSerialize: !!div.getElementsByTagName("link").length,
			style: /top/.test(a.getAttribute("style")),
			hrefNormalized: a.getAttribute("href") === "/a",
			opacity: /^0.5/.test(a.style.opacity),
			cssFloat: !!a.style.cssFloat,
			checkOn: input.value === "on",
			optSelected: opt.selected,
			getSetAttribute: div.className !== "t",
			enctype: !!document.createElement("form").enctype,
			html5Clone:
				document.createElement("nav").cloneNode(true).outerHTML !==
				"<:nav></:nav>",
			boxModel: document.compatMode === "CSS1Compat",
			submitBubbles: true,
			changeBubbles: true,
			focusinBubbles: false,
			deleteExpando: true,
			noCloneEvent: true,
			inlineBlockNeedsLayout: false,
			shrinkWrapBlocks: false,
			reliableMarginRight: true,
			boxSizingReliable: true,
			pixelPosition: false,
		};
		input.checked = true;
		support.noCloneChecked = input.cloneNode(true).checked;
		select.disabled = true;
		support.optDisabled = !opt.disabled;
		try {
			delete div.test;
		} catch (e) {
			support.deleteExpando = false;
		}
		if (!div.addEventListener && div.attachEvent && div.fireEvent) {
			div.attachEvent(
				"onclick",
				(clickFn = function () {
					support.noCloneEvent = false;
				})
			);
			div.cloneNode(true).fireEvent("onclick");
			div.detachEvent("onclick", clickFn);
		}
		input = document.createElement("input");
		input.value = "t";
		input.setAttribute("type", "radio");
		support.radioValue = input.value === "t";
		input.setAttribute("checked", "checked");
		input.setAttribute("name", "t");
		div.appendChild(input);
		fragment = document.createDocumentFragment();
		fragment.appendChild(div.lastChild);
		support.checkClone = fragment
			.cloneNode(true)
			.cloneNode(true).lastChild.checked;
		support.appendChecked = input.checked;
		fragment.removeChild(input);
		fragment.appendChild(div);
		if (div.attachEvent) {
			for (i in {
				submit: true,
				change: true,
				focusin: true,
			}) {
				eventName = "on" + i;
				isSupported = eventName in div;
				if (!isSupported) {
					div.setAttribute(eventName, "return;");
					isSupported = typeof div[eventName] === "function";
				}
				support[i + "Bubbles"] = isSupported;
			}
		}
		jQuery(function () {
			var container,
				div,
				tds,
				marginDiv,
				divReset = "padding:0;margin:0;border:0;display:block;overflow:hidden;",
				body = document.getElementsByTagName("body")[0];
			if (!body) {
				return;
			}
			container = document.createElement("div");
			container.style.cssText =
				"visibility:hidden;border:0;width:0;height:0;position:static;top:0;margin-top:1px";
			body.insertBefore(container, body.firstChild);
			div = document.createElement("div");
			container.appendChild(div);
			div.innerHTML = "<table><tr><td></td><td>t</td></tr></table>";
			tds = div.getElementsByTagName("td");
			tds[0].style.cssText = "padding:0;margin:0;border:0;display:none";
			isSupported = tds[0].offsetHeight === 0;
			tds[0].style.display = "";
			tds[1].style.display = "none";
			support.reliableHiddenOffsets = isSupported && tds[0].offsetHeight === 0;
			div.innerHTML = "";
			div.style.cssText =
				"box-sizing:border-box;-moz-box-sizing:border-box;-webkit-box-sizing:border-box;padding:1px;border:1px;display:block;width:4px;margin-top:1%;position:absolute;top:1%;";
			support.boxSizing = div.offsetWidth === 4;
			support.doesNotIncludeMarginInBodyOffset = body.offsetTop !== 1;
			if (window.getComputedStyle) {
				support.pixelPosition =
					(window.getComputedStyle(div, null) || {}).top !== "1%";
				support.boxSizingReliable =
					(
						window.getComputedStyle(div, null) || {
							width: "4px",
						}
					).width === "4px";
				marginDiv = document.createElement("div");
				marginDiv.style.cssText = div.style.cssText = divReset;
				marginDiv.style.marginRight = marginDiv.style.width = "0";
				div.style.width = "1px";
				div.appendChild(marginDiv);
				support.reliableMarginRight = !parseFloat(
					(window.getComputedStyle(marginDiv, null) || {}).marginRight
				);
			}
			if (typeof div.style.zoom !== "undefined") {
				div.innerHTML = "";
				div.style.cssText =
					divReset + "width:1px;padding:1px;display:inline;zoom:1";
				support.inlineBlockNeedsLayout = div.offsetWidth === 3;
				div.style.display = "block";
				div.style.overflow = "visible";
				div.innerHTML = "<div></div>";
				div.firstChild.style.width = "5px";
				support.shrinkWrapBlocks = div.offsetWidth !== 3;
				container.style.zoom = 1;
			}
			body.removeChild(container);
			container = div = tds = marginDiv = null;
		});
		fragment.removeChild(div);
		all = a = select = opt = input = fragment = div = null;
		return support;
	})();
	var rbrace = /(?:\{[\s\S]*\}|\[[\s\S]*\])$/,
		rmultiDash = /([A-Z])/g;
	jQuery.extend({
		cache: {},
		deletedIds: [],
		uuid: 0,
		expando: "jQuery" + (jQuery.fn.jquery + Math.random()).replace(/\D/g, ""),
		noData: {
			embed: true,
			object: "clsid:D27CDB6E-AE6D-11cf-96B8-444553540000",
			applet: true,
		},
		hasData: function (elem) {
			elem = elem.nodeType
				? jQuery.cache[elem[jQuery.expando]]
				: elem[jQuery.expando];
			return !!elem && !isEmptyDataObject(elem);
		},
		data: function (elem, name, data, pvt) {
			if (!jQuery.acceptData(elem)) {
				return;
			}
			var thisCache,
				ret,
				internalKey = jQuery.expando,
				getByName = typeof name === "string",
				isNode = elem.nodeType,
				cache = isNode ? jQuery.cache : elem,
				id = isNode ? elem[internalKey] : elem[internalKey] && internalKey;
			if (
				(!id || !cache[id] || (!pvt && !cache[id].data)) &&
				getByName &&
				data === undefined
			) {
				return;
			}
			if (!id) {
				if (isNode) {
					elem[internalKey] = id = jQuery.deletedIds.pop() || ++jQuery.uuid;
				} else {
					id = internalKey;
				}
			}
			if (!cache[id]) {
				cache[id] = {};
				if (!isNode) {
					cache[id].toJSON = jQuery.noop;
				}
			}
			if (typeof name === "object" || typeof name === "function") {
				if (pvt) {
					cache[id] = jQuery.extend(cache[id], name);
				} else {
					cache[id].data = jQuery.extend(cache[id].data, name);
				}
			}
			thisCache = cache[id];
			if (!pvt) {
				if (!thisCache.data) {
					thisCache.data = {};
				}
				thisCache = thisCache.data;
			}
			if (data !== undefined) {
				thisCache[jQuery.camelCase(name)] = data;
			}
			if (getByName) {
				ret = thisCache[name];
				if (ret == null) {
					ret = thisCache[jQuery.camelCase(name)];
				}
			} else {
				ret = thisCache;
			}
			return ret;
		},
		removeData: function (elem, name, pvt) {
			if (!jQuery.acceptData(elem)) {
				return;
			}
			var thisCache,
				i,
				l,
				isNode = elem.nodeType,
				cache = isNode ? jQuery.cache : elem,
				id = isNode ? elem[jQuery.expando] : jQuery.expando;
			if (!cache[id]) {
				return;
			}
			if (name) {
				thisCache = pvt ? cache[id] : cache[id].data;
				if (thisCache) {
					if (!jQuery.isArray(name)) {
						if (name in thisCache) {
							name = [name];
						} else {
							name = jQuery.camelCase(name);
							if (name in thisCache) {
								name = [name];
							} else {
								name = name.split(" ");
							}
						}
					}
					for (i = 0, l = name.length; i < l; i++) {
						delete thisCache[name[i]];
					}
					if (!(pvt ? isEmptyDataObject : jQuery.isEmptyObject)(thisCache)) {
						return;
					}
				}
			}
			if (!pvt) {
				delete cache[id].data;
				if (!isEmptyDataObject(cache[id])) {
					return;
				}
			}
			if (isNode) {
				jQuery.cleanData([elem], true);
			} else if (jQuery.support.deleteExpando || cache != cache.window) {
				delete cache[id];
			} else {
				cache[id] = null;
			}
		},
		_data: function (elem, name, data) {
			return jQuery.data(elem, name, data, true);
		},
		acceptData: function (elem) {
			var noData = elem.nodeName && jQuery.noData[elem.nodeName.toLowerCase()];
			return (
				!noData || (noData !== true && elem.getAttribute("classid") === noData)
			);
		},
	});
	jQuery.fn.extend({
		data: function (key, value) {
			var parts,
				part,
				attr,
				name,
				l,
				elem = this[0],
				i = 0,
				data = null;
			if (key === undefined) {
				if (this.length) {
					data = jQuery.data(elem);
					if (elem.nodeType === 1 && !jQuery._data(elem, "parsedAttrs")) {
						attr = elem.attributes;
						for (l = attr.length; i < l; i++) {
							name = attr[i].name;
							if (name.indexOf("data-") === 0) {
								name = jQuery.camelCase(name.substring(5));
								dataAttr(elem, name, data[name]);
							}
						}
						jQuery._data(elem, "parsedAttrs", true);
					}
				}
				return data;
			}
			if (typeof key === "object") {
				return this.each(function () {
					jQuery.data(this, key);
				});
			}
			parts = key.split(".", 2);
			parts[1] = parts[1] ? "." + parts[1] : "";
			part = parts[1] + "!";
			return jQuery.access(
				this,
				function (value) {
					if (value === undefined) {
						data = this.triggerHandler("getData" + part, [parts[0]]);
						if (data === undefined && elem) {
							data = jQuery.data(elem, key);
							data = dataAttr(elem, key, data);
						}
						return data === undefined && parts[1] ? this.data(parts[0]) : data;
					}
					parts[1] = value;
					this.each(function () {
						var self = jQuery(this);
						self.triggerHandler("setData" + part, parts);
						jQuery.data(this, key, value);
						self.triggerHandler("changeData" + part, parts);
					});
				},
				null,
				value,
				arguments.length > 1,
				null,
				false
			);
		},
		removeData: function (key) {
			return this.each(function () {
				jQuery.removeData(this, key);
			});
		},
	});

	function dataAttr(elem, key, data) {
		if (data === undefined && elem.nodeType === 1) {
			var name = "data-" + key.replace(rmultiDash, "-$1").toLowerCase();
			data = elem.getAttribute(name);
			if (typeof data === "string") {
				try {
					data =
						data === "true"
							? true
							: data === "false"
							? false
							: data === "null"
							? null
							: +data + "" === data
							? +data
							: rbrace.test(data)
							? jQuery.parseJSON(data)
							: data;
				} catch (e) {}
				jQuery.data(elem, key, data);
			} else {
				data = undefined;
			}
		}
		return data;
	}

	function isEmptyDataObject(obj) {
		var name;
		for (name in obj) {
			if (name === "data" && jQuery.isEmptyObject(obj[name])) {
				continue;
			}
			if (name !== "toJSON") {
				return false;
			}
		}
		return true;
	}
	jQuery.extend({
		queue: function (elem, type, data) {
			var queue;
			if (elem) {
				type = (type || "fx") + "queue";
				queue = jQuery._data(elem, type);
				if (data) {
					if (!queue || jQuery.isArray(data)) {
						queue = jQuery._data(elem, type, jQuery.makeArray(data));
					} else {
						queue.push(data);
					}
				}
				return queue || [];
			}
		},
		dequeue: function (elem, type) {
			type = type || "fx";
			var queue = jQuery.queue(elem, type),
				startLength = queue.length,
				fn = queue.shift(),
				hooks = jQuery._queueHooks(elem, type),
				next = function () {
					jQuery.dequeue(elem, type);
				};
			if (fn === "inprogress") {
				fn = queue.shift();
				startLength--;
			}
			if (fn) {
				if (type === "fx") {
					queue.unshift("inprogress");
				}
				delete hooks.stop;
				fn.call(elem, next, hooks);
			}
			if (!startLength && hooks) {
				hooks.empty.fire();
			}
		},
		_queueHooks: function (elem, type) {
			var key = type + "queueHooks";
			return (
				jQuery._data(elem, key) ||
				jQuery._data(elem, key, {
					empty: jQuery.Callbacks("once memory").add(function () {
						jQuery.removeData(elem, type + "queue", true);
						jQuery.removeData(elem, key, true);
					}),
				})
			);
		},
	});
	jQuery.fn.extend({
		queue: function (type, data) {
			var setter = 2;
			if (typeof type !== "string") {
				data = type;
				type = "fx";
				setter--;
			}
			if (arguments.length < setter) {
				return jQuery.queue(this[0], type);
			}
			return data === undefined
				? this
				: this.each(function () {
						var queue = jQuery.queue(this, type, data);
						jQuery._queueHooks(this, type);
						if (type === "fx" && queue[0] !== "inprogress") {
							jQuery.dequeue(this, type);
						}
				  });
		},
		dequeue: function (type) {
			return this.each(function () {
				jQuery.dequeue(this, type);
			});
		},
		delay: function (time, type) {
			time = jQuery.fx ? jQuery.fx.speeds[time] || time : time;
			type = type || "fx";
			return this.queue(type, function (next, hooks) {
				var timeout = setTimeout(next, time);
				hooks.stop = function () {
					clearTimeout(timeout);
				};
			});
		},
		clearQueue: function (type) {
			return this.queue(type || "fx", []);
		},
		promise: function (type, obj) {
			var tmp,
				count = 1,
				defer = jQuery.Deferred(),
				elements = this,
				i = this.length,
				resolve = function () {
					if (!--count) {
						defer.resolveWith(elements, [elements]);
					}
				};
			if (typeof type !== "string") {
				obj = type;
				type = undefined;
			}
			type = type || "fx";
			while (i--) {
				tmp = jQuery._data(elements[i], type + "queueHooks");
				if (tmp && tmp.empty) {
					count++;
					tmp.empty.add(resolve);
				}
			}
			resolve();
			return defer.promise(obj);
		},
	});
	var nodeHook,
		boolHook,
		fixSpecified,
		rclass = /[\t\r\n]/g,
		rreturn = /\r/g,
		rtype = /^(?:button|input)$/i,
		rfocusable = /^(?:button|input|object|select|textarea)$/i,
		rclickable = /^a(?:rea|)$/i,
		rboolean =
			/^(?:autofocus|autoplay|async|checked|controls|defer|disabled|hidden|loop|multiple|open|readonly|required|scoped|selected)$/i,
		getSetAttribute = jQuery.support.getSetAttribute;
	jQuery.fn.extend({
		attr: function (name, value) {
			return jQuery.access(
				this,
				jQuery.attr,
				name,
				value,
				arguments.length > 1
			);
		},
		removeAttr: function (name) {
			return this.each(function () {
				jQuery.removeAttr(this, name);
			});
		},
		prop: function (name, value) {
			return jQuery.access(
				this,
				jQuery.prop,
				name,
				value,
				arguments.length > 1
			);
		},
		removeProp: function (name) {
			name = jQuery.propFix[name] || name;
			return this.each(function () {
				try {
					this[name] = undefined;
					delete this[name];
				} catch (e) {}
			});
		},
		addClass: function (value) {
			var classNames, i, l, elem, setClass, c, cl;
			if (jQuery.isFunction(value)) {
				return this.each(function (j) {
					jQuery(this).addClass(value.call(this, j, this.className));
				});
			}
			if (value && typeof value === "string") {
				classNames = value.split(core_rspace);
				for (i = 0, l = this.length; i < l; i++) {
					elem = this[i];
					if (elem.nodeType === 1) {
						if (!elem.className && classNames.length === 1) {
							elem.className = value;
						} else {
							setClass = " " + elem.className + " ";
							for (c = 0, cl = classNames.length; c < cl; c++) {
								if (!~setClass.indexOf(" " + classNames[c] + " ")) {
									setClass += classNames[c] + " ";
								}
							}
							elem.className = jQuery.trim(setClass);
						}
					}
				}
			}
			return this;
		},
		removeClass: function (value) {
			var removes, className, elem, c, cl, i, l;
			if (jQuery.isFunction(value)) {
				return this.each(function (j) {
					jQuery(this).removeClass(value.call(this, j, this.className));
				});
			}
			if ((value && typeof value === "string") || value === undefined) {
				removes = (value || "").split(core_rspace);
				for (i = 0, l = this.length; i < l; i++) {
					elem = this[i];
					if (elem.nodeType === 1 && elem.className) {
						className = (" " + elem.className + " ").replace(rclass, " ");
						for (c = 0, cl = removes.length; c < cl; c++) {
							while (className.indexOf(" " + removes[c] + " ") > -1) {
								className = className.replace(" " + removes[c] + " ", " ");
							}
						}
						elem.className = value ? jQuery.trim(className) : "";
					}
				}
			}
			return this;
		},
		toggleClass: function (value, stateVal) {
			var type = typeof value,
				isBool = typeof stateVal === "boolean";
			if (jQuery.isFunction(value)) {
				return this.each(function (i) {
					jQuery(this).toggleClass(
						value.call(this, i, this.className, stateVal),
						stateVal
					);
				});
			}
			return this.each(function () {
				if (type === "string") {
					var className,
						i = 0,
						self = jQuery(this),
						state = stateVal,
						classNames = value.split(core_rspace);
					while ((className = classNames[i++])) {
						state = isBool ? state : !self.hasClass(className);
						self[state ? "addClass" : "removeClass"](className);
					}
				} else if (type === "undefined" || type === "boolean") {
					if (this.className) {
						jQuery._data(this, "__className__", this.className);
					}
					this.className =
						this.className || value === false
							? ""
							: jQuery._data(this, "__className__") || "";
				}
			});
		},
		hasClass: function (selector) {
			var className = " " + selector + " ",
				i = 0,
				l = this.length;
			for (; i < l; i++) {
				if (
					this[i].nodeType === 1 &&
					(" " + this[i].className + " ")
						.replace(rclass, " ")
						.indexOf(className) > -1
				) {
					return true;
				}
			}
			return false;
		},
		val: function (value) {
			var hooks,
				ret,
				isFunction,
				elem = this[0];
			if (!arguments.length) {
				if (elem) {
					hooks =
						jQuery.valHooks[elem.type] ||
						jQuery.valHooks[elem.nodeName.toLowerCase()];
					if (
						hooks &&
						"get" in hooks &&
						(ret = hooks.get(elem, "value")) !== undefined
					) {
						return ret;
					}
					ret = elem.value;
					return typeof ret === "string"
						? ret.replace(rreturn, "")
						: ret == null
						? ""
						: ret;
				}
				return;
			}
			isFunction = jQuery.isFunction(value);
			return this.each(function (i) {
				var val,
					self = jQuery(this);
				if (this.nodeType !== 1) {
					return;
				}
				if (isFunction) {
					val = value.call(this, i, self.val());
				} else {
					val = value;
				}
				if (val == null) {
					val = "";
				} else if (typeof val === "number") {
					val += "";
				} else if (jQuery.isArray(val)) {
					val = jQuery.map(val, function (value) {
						return value == null ? "" : value + "";
					});
				}
				hooks =
					jQuery.valHooks[this.type] ||
					jQuery.valHooks[this.nodeName.toLowerCase()];
				if (
					!hooks ||
					!("set" in hooks) ||
					hooks.set(this, val, "value") === undefined
				) {
					this.value = val;
				}
			});
		},
	});
	jQuery.extend({
		valHooks: {
			option: {
				get: function (elem) {
					var val = elem.attributes.value;
					return !val || val.specified ? elem.value : elem.text;
				},
			},
			select: {
				get: function (elem) {
					var value,
						i,
						max,
						option,
						index = elem.selectedIndex,
						values = [],
						options = elem.options,
						one = elem.type === "select-one";
					if (index < 0) {
						return null;
					}
					i = one ? index : 0;
					max = one ? index + 1 : options.length;
					for (; i < max; i++) {
						option = options[i];
						if (
							option.selected &&
							(jQuery.support.optDisabled
								? !option.disabled
								: option.getAttribute("disabled") === null) &&
							(!option.parentNode.disabled ||
								!jQuery.nodeName(option.parentNode, "optgroup"))
						) {
							value = jQuery(option).val();
							if (one) {
								return value;
							}
							values.push(value);
						}
					}
					if (one && !values.length && options.length) {
						return jQuery(options[index]).val();
					}
					return values;
				},
				set: function (elem, value) {
					var values = jQuery.makeArray(value);
					jQuery(elem)
						.find("option")
						.each(function () {
							this.selected = jQuery.inArray(jQuery(this).val(), values) >= 0;
						});
					if (!values.length) {
						elem.selectedIndex = -1;
					}
					return values;
				},
			},
		},
		attrFn: {},
		attr: function (elem, name, value, pass) {
			var ret,
				hooks,
				notxml,
				nType = elem.nodeType;
			if (!elem || nType === 3 || nType === 8 || nType === 2) {
				return;
			}
			if (pass && jQuery.isFunction(jQuery.fn[name])) {
				return jQuery(elem)[name](value);
			}
			if (typeof elem.getAttribute === "undefined") {
				return jQuery.prop(elem, name, value);
			}
			notxml = nType !== 1 || !jQuery.isXMLDoc(elem);
			if (notxml) {
				name = name.toLowerCase();
				hooks =
					jQuery.attrHooks[name] || (rboolean.test(name) ? boolHook : nodeHook);
			}
			if (value !== undefined) {
				if (value === null) {
					jQuery.removeAttr(elem, name);
					return;
				} else if (
					hooks &&
					"set" in hooks &&
					notxml &&
					(ret = hooks.set(elem, value, name)) !== undefined
				) {
					return ret;
				} else {
					elem.setAttribute(name, "" + value);
					return value;
				}
			} else if (
				hooks &&
				"get" in hooks &&
				notxml &&
				(ret = hooks.get(elem, name)) !== null
			) {
				return ret;
			} else {
				ret = elem.getAttribute(name);
				return ret === null ? undefined : ret;
			}
		},
		removeAttr: function (elem, value) {
			var propName,
				attrNames,
				name,
				isBool,
				i = 0;
			if (value && elem.nodeType === 1) {
				attrNames = value.split(core_rspace);
				for (; i < attrNames.length; i++) {
					name = attrNames[i];
					if (name) {
						propName = jQuery.propFix[name] || name;
						isBool = rboolean.test(name);
						if (!isBool) {
							jQuery.attr(elem, name, "");
						}
						elem.removeAttribute(getSetAttribute ? name : propName);
						if (isBool && propName in elem) {
							elem[propName] = false;
						}
					}
				}
			}
		},
		attrHooks: {
			type: {
				set: function (elem, value) {
					if (rtype.test(elem.nodeName) && elem.parentNode) {
						jQuery.error("type property can't be changed");
					} else if (
						!jQuery.support.radioValue &&
						value === "radio" &&
						jQuery.nodeName(elem, "input")
					) {
						var val = elem.value;
						elem.setAttribute("type", value);
						if (val) {
							elem.value = val;
						}
						return value;
					}
				},
			},
			value: {
				get: function (elem, name) {
					if (nodeHook && jQuery.nodeName(elem, "button")) {
						return nodeHook.get(elem, name);
					}
					return name in elem ? elem.value : null;
				},
				set: function (elem, value, name) {
					if (nodeHook && jQuery.nodeName(elem, "button")) {
						return nodeHook.set(elem, value, name);
					}
					elem.value = value;
				},
			},
		},
		propFix: {
			tabindex: "tabIndex",
			readonly: "readOnly",
			for: "htmlFor",
			class: "className",
			maxlength: "maxLength",
			cellspacing: "cellSpacing",
			cellpadding: "cellPadding",
			rowspan: "rowSpan",
			colspan: "colSpan",
			usemap: "useMap",
			frameborder: "frameBorder",
			contenteditable: "contentEditable",
		},
		prop: function (elem, name, value) {
			var ret,
				hooks,
				notxml,
				nType = elem.nodeType;
			if (!elem || nType === 3 || nType === 8 || nType === 2) {
				return;
			}
			notxml = nType !== 1 || !jQuery.isXMLDoc(elem);
			if (notxml) {
				name = jQuery.propFix[name] || name;
				hooks = jQuery.propHooks[name];
			}
			if (value !== undefined) {
				if (
					hooks &&
					"set" in hooks &&
					(ret = hooks.set(elem, value, name)) !== undefined
				) {
					return ret;
				} else {
					return (elem[name] = value);
				}
			} else {
				if (hooks && "get" in hooks && (ret = hooks.get(elem, name)) !== null) {
					return ret;
				} else {
					return elem[name];
				}
			}
		},
		propHooks: {
			tabIndex: {
				get: function (elem) {
					var attributeNode = elem.getAttributeNode("tabindex");
					return attributeNode && attributeNode.specified
						? parseInt(attributeNode.value, 10)
						: rfocusable.test(elem.nodeName) ||
						  (rclickable.test(elem.nodeName) && elem.href)
						? 0
						: undefined;
				},
			},
		},
	});
	boolHook = {
		get: function (elem, name) {
			var attrNode,
				property = jQuery.prop(elem, name);
			return property === true ||
				(typeof property !== "boolean" &&
					(attrNode = elem.getAttributeNode(name)) &&
					attrNode.nodeValue !== false)
				? name.toLowerCase()
				: undefined;
		},
		set: function (elem, value, name) {
			var propName;
			if (value === false) {
				jQuery.removeAttr(elem, name);
			} else {
				propName = jQuery.propFix[name] || name;
				if (propName in elem) {
					elem[propName] = true;
				}
				elem.setAttribute(name, name.toLowerCase());
			}
			return name;
		},
	};
	if (!getSetAttribute) {
		fixSpecified = {
			name: true,
			id: true,
			coords: true,
		};
		nodeHook = jQuery.valHooks.button = {
			get: function (elem, name) {
				var ret;
				ret = elem.getAttributeNode(name);
				return ret && (fixSpecified[name] ? ret.value !== "" : ret.specified)
					? ret.value
					: undefined;
			},
			set: function (elem, value, name) {
				var ret = elem.getAttributeNode(name);
				if (!ret) {
					ret = document.createAttribute(name);
					elem.setAttributeNode(ret);
				}
				return (ret.value = value + "");
			},
		};
		jQuery.each(["width", "height"], function (i, name) {
			jQuery.attrHooks[name] = jQuery.extend(jQuery.attrHooks[name], {
				set: function (elem, value) {
					if (value === "") {
						elem.setAttribute(name, "auto");
						return value;
					}
				},
			});
		});
		jQuery.attrHooks.contenteditable = {
			get: nodeHook.get,
			set: function (elem, value, name) {
				if (value === "") {
					value = "false";
				}
				nodeHook.set(elem, value, name);
			},
		};
	}
	if (!jQuery.support.hrefNormalized) {
		jQuery.each(["href", "src", "width", "height"], function (i, name) {
			jQuery.attrHooks[name] = jQuery.extend(jQuery.attrHooks[name], {
				get: function (elem) {
					var ret = elem.getAttribute(name, 2);
					return ret === null ? undefined : ret;
				},
			});
		});
	}
	if (!jQuery.support.style) {
		jQuery.attrHooks.style = {
			get: function (elem) {
				return elem.style.cssText.toLowerCase() || undefined;
			},
			set: function (elem, value) {
				return (elem.style.cssText = "" + value);
			},
		};
	}
	if (!jQuery.support.optSelected) {
		jQuery.propHooks.selected = jQuery.extend(jQuery.propHooks.selected, {
			get: function (elem) {
				var parent = elem.parentNode;
				if (parent) {
					parent.selectedIndex;
					if (parent.parentNode) {
						parent.parentNode.selectedIndex;
					}
				}
				return null;
			},
		});
	}
	if (!jQuery.support.enctype) {
		jQuery.propFix.enctype = "encoding";
	}
	if (!jQuery.support.checkOn) {
		jQuery.each(["radio", "checkbox"], function () {
			jQuery.valHooks[this] = {
				get: function (elem) {
					return elem.getAttribute("value") === null ? "on" : elem.value;
				},
			};
		});
	}
	jQuery.each(["radio", "checkbox"], function () {
		jQuery.valHooks[this] = jQuery.extend(jQuery.valHooks[this], {
			set: function (elem, value) {
				if (jQuery.isArray(value)) {
					return (elem.checked =
						jQuery.inArray(jQuery(elem).val(), value) >= 0);
				}
			},
		});
	});
	var rformElems = /^(?:textarea|input|select)$/i,
		rtypenamespace = /^([^\.]*|)(?:\.(.+)|)$/,
		rhoverHack = /(?:^|\s)hover(\.\S+|)\b/,
		rkeyEvent = /^key/,
		rmouseEvent = /^(?:mouse|contextmenu)|click/,
		rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
		hoverHack = function (events) {
			return jQuery.event.special.hover
				? events
				: events.replace(rhoverHack, "mouseenter$1 mouseleave$1");
		};
	jQuery.event = {
		add: function (elem, types, handler, data, selector) {
			var elemData,
				eventHandle,
				events,
				t,
				tns,
				type,
				namespaces,
				handleObj,
				handleObjIn,
				handlers,
				special;
			if (
				elem.nodeType === 3 ||
				elem.nodeType === 8 ||
				!types ||
				!handler ||
				!(elemData = jQuery._data(elem))
			) {
				return;
			}
			if (handler.handler) {
				handleObjIn = handler;
				handler = handleObjIn.handler;
				selector = handleObjIn.selector;
			}
			if (!handler.guid) {
				handler.guid = jQuery.guid++;
			}
			events = elemData.events;
			if (!events) {
				elemData.events = events = {};
			}
			eventHandle = elemData.handle;
			if (!eventHandle) {
				elemData.handle = eventHandle = function (e) {
					return typeof jQuery !== "undefined" &&
						(!e || jQuery.event.triggered !== e.type)
						? jQuery.event.dispatch.apply(eventHandle.elem, arguments)
						: undefined;
				};
				eventHandle.elem = elem;
			}
			types = jQuery.trim(hoverHack(types)).split(" ");
			for (t = 0; t < types.length; t++) {
				tns = rtypenamespace.exec(types[t]) || [];
				type = tns[1];
				namespaces = (tns[2] || "").split(".").sort();
				special = jQuery.event.special[type] || {};
				type = (selector ? special.delegateType : special.bindType) || type;
				special = jQuery.event.special[type] || {};
				handleObj = jQuery.extend(
					{
						type: type,
						origType: tns[1],
						data: data,
						handler: handler,
						guid: handler.guid,
						selector: selector,
						namespace: namespaces.join("."),
					},
					handleObjIn
				);
				handlers = events[type];
				if (!handlers) {
					handlers = events[type] = [];
					handlers.delegateCount = 0;
					if (
						!special.setup ||
						special.setup.call(elem, data, namespaces, eventHandle) === false
					) {
						if (elem.addEventListener) {
							elem.addEventListener(type, eventHandle, false);
						} else if (elem.attachEvent) {
							elem.attachEvent("on" + type, eventHandle);
						}
					}
				}
				if (special.add) {
					special.add.call(elem, handleObj);
					if (!handleObj.handler.guid) {
						handleObj.handler.guid = handler.guid;
					}
				}
				if (selector) {
					handlers.splice(handlers.delegateCount++, 0, handleObj);
				} else {
					handlers.push(handleObj);
				}
				jQuery.event.global[type] = true;
			}
			elem = null;
		},
		global: {},
		remove: function (elem, types, handler, selector, mappedTypes) {
			var t,
				tns,
				type,
				origType,
				namespaces,
				origCount,
				j,
				events,
				special,
				eventType,
				handleObj,
				elemData = jQuery.hasData(elem) && jQuery._data(elem);
			if (!elemData || !(events = elemData.events)) {
				return;
			}
			types = jQuery.trim(hoverHack(types || "")).split(" ");
			for (t = 0; t < types.length; t++) {
				tns = rtypenamespace.exec(types[t]) || [];
				type = origType = tns[1];
				namespaces = tns[2];
				if (!type) {
					for (type in events) {
						jQuery.event.remove(elem, type + types[t], handler, selector, true);
					}
					continue;
				}
				special = jQuery.event.special[type] || {};
				type = (selector ? special.delegateType : special.bindType) || type;
				eventType = events[type] || [];
				origCount = eventType.length;
				namespaces = namespaces
					? new RegExp(
							"(^|\\.)" +
								namespaces.split(".").sort().join("\\.(?:.*\\.|)") +
								"(\\.|$)"
					  )
					: null;
				for (j = 0; j < eventType.length; j++) {
					handleObj = eventType[j];
					if (
						(mappedTypes || origType === handleObj.origType) &&
						(!handler || handler.guid === handleObj.guid) &&
						(!namespaces || namespaces.test(handleObj.namespace)) &&
						(!selector ||
							selector === handleObj.selector ||
							(selector === "**" && handleObj.selector))
					) {
						eventType.splice(j--, 1);
						if (handleObj.selector) {
							eventType.delegateCount--;
						}
						if (special.remove) {
							special.remove.call(elem, handleObj);
						}
					}
				}
				if (eventType.length === 0 && origCount !== eventType.length) {
					if (
						!special.teardown ||
						special.teardown.call(elem, namespaces, elemData.handle) === false
					) {
						jQuery.removeEvent(elem, type, elemData.handle);
					}
					delete events[type];
				}
			}
			if (jQuery.isEmptyObject(events)) {
				delete elemData.handle;
				jQuery.removeData(elem, "events", true);
			}
		},
		customEvent: {
			getData: true,
			setData: true,
			changeData: true,
		},
		trigger: function (event, data, elem, onlyHandlers) {
			if (elem && (elem.nodeType === 3 || elem.nodeType === 8)) {
				return;
			}
			var cache,
				exclusive,
				i,
				cur,
				old,
				ontype,
				special,
				handle,
				eventPath,
				bubbleType,
				type = event.type || event,
				namespaces = [];
			if (rfocusMorph.test(type + jQuery.event.triggered)) {
				return;
			}
			if (type.indexOf("!") >= 0) {
				type = type.slice(0, -1);
				exclusive = true;
			}
			if (type.indexOf(".") >= 0) {
				namespaces = type.split(".");
				type = namespaces.shift();
				namespaces.sort();
			}
			if (
				(!elem || jQuery.event.customEvent[type]) &&
				!jQuery.event.global[type]
			) {
				return;
			}
			event =
				typeof event === "object"
					? event[jQuery.expando]
						? event
						: new jQuery.Event(type, event)
					: new jQuery.Event(type);
			event.type = type;
			event.isTrigger = true;
			event.exclusive = exclusive;
			event.namespace = namespaces.join(".");
			event.namespace_re = event.namespace
				? new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)")
				: null;
			ontype = type.indexOf(":") < 0 ? "on" + type : "";
			if (!elem) {
				cache = jQuery.cache;
				for (i in cache) {
					if (cache[i].events && cache[i].events[type]) {
						jQuery.event.trigger(event, data, cache[i].handle.elem, true);
					}
				}
				return;
			}
			event.result = undefined;
			if (!event.target) {
				event.target = elem;
			}
			data = data != null ? jQuery.makeArray(data) : [];
			data.unshift(event);
			special = jQuery.event.special[type] || {};
			if (special.trigger && special.trigger.apply(elem, data) === false) {
				return;
			}
			eventPath = [[elem, special.bindType || type]];
			if (!onlyHandlers && !special.noBubble && !jQuery.isWindow(elem)) {
				bubbleType = special.delegateType || type;
				cur = rfocusMorph.test(bubbleType + type) ? elem : elem.parentNode;
				for (old = elem; cur; cur = cur.parentNode) {
					eventPath.push([cur, bubbleType]);
					old = cur;
				}
				if (old === (elem.ownerDocument || document)) {
					eventPath.push([
						old.defaultView || old.parentWindow || window,
						bubbleType,
					]);
				}
			}
			for (i = 0; i < eventPath.length && !event.isPropagationStopped(); i++) {
				cur = eventPath[i][0];
				event.type = eventPath[i][1];
				handle =
					(jQuery._data(cur, "events") || {})[event.type] &&
					jQuery._data(cur, "handle");
				if (handle) {
					handle.apply(cur, data);
				}
				handle = ontype && cur[ontype];
				if (
					handle &&
					jQuery.acceptData(cur) &&
					handle.apply(cur, data) === false
				) {
					event.preventDefault();
				}
			}
			event.type = type;
			if (!onlyHandlers && !event.isDefaultPrevented()) {
				if (
					(!special._default ||
						special._default.apply(elem.ownerDocument, data) === false) &&
					!(type === "click" && jQuery.nodeName(elem, "a")) &&
					jQuery.acceptData(elem)
				) {
					if (
						ontype &&
						elem[type] &&
						((type !== "focus" && type !== "blur") ||
							event.target.offsetWidth !== 0) &&
						!jQuery.isWindow(elem)
					) {
						old = elem[ontype];
						if (old) {
							elem[ontype] = null;
						}
						jQuery.event.triggered = type;
						elem[type]();
						jQuery.event.triggered = undefined;
						if (old) {
							elem[ontype] = old;
						}
					}
				}
			}
			return event.result;
		},
		dispatch: function (event) {
			event = jQuery.event.fix(event || window.event);
			var i,
				j,
				cur,
				ret,
				selMatch,
				matched,
				matches,
				handleObj,
				sel,
				related,
				handlers = (jQuery._data(this, "events") || {})[event.type] || [],
				delegateCount = handlers.delegateCount,
				args = [].slice.call(arguments),
				run_all = !event.exclusive && !event.namespace,
				special = jQuery.event.special[event.type] || {},
				handlerQueue = [];
			args[0] = event;
			event.delegateTarget = this;
			if (
				special.preDispatch &&
				special.preDispatch.call(this, event) === false
			) {
				return;
			}
			if (delegateCount && !(event.button && event.type === "click")) {
				for (cur = event.target; cur != this; cur = cur.parentNode || this) {
					if (cur.disabled !== true || event.type !== "click") {
						selMatch = {};
						matches = [];
						for (i = 0; i < delegateCount; i++) {
							handleObj = handlers[i];
							sel = handleObj.selector;
							if (selMatch[sel] === undefined) {
								selMatch[sel] = jQuery(sel, this).index(cur) >= 0;
							}
							if (selMatch[sel]) {
								matches.push(handleObj);
							}
						}
						if (matches.length) {
							handlerQueue.push({
								elem: cur,
								matches: matches,
							});
						}
					}
				}
			}
			if (handlers.length > delegateCount) {
				handlerQueue.push({
					elem: this,
					matches: handlers.slice(delegateCount),
				});
			}
			for (
				i = 0;
				i < handlerQueue.length && !event.isPropagationStopped();
				i++
			) {
				matched = handlerQueue[i];
				event.currentTarget = matched.elem;
				for (
					j = 0;
					j < matched.matches.length && !event.isImmediatePropagationStopped();
					j++
				) {
					handleObj = matched.matches[j];
					if (
						run_all ||
						(!event.namespace && !handleObj.namespace) ||
						(event.namespace_re && event.namespace_re.test(handleObj.namespace))
					) {
						event.data = handleObj.data;
						event.handleObj = handleObj;
						ret = (
							(jQuery.event.special[handleObj.origType] || {}).handle ||
							handleObj.handler
						).apply(matched.elem, args);
						if (ret !== undefined) {
							event.result = ret;
							if (ret === false) {
								event.preventDefault();
								event.stopPropagation();
							}
						}
					}
				}
			}
			if (special.postDispatch) {
				special.postDispatch.call(this, event);
			}
			return event.result;
		},
		props:
			"attrChange attrName relatedNode srcElement altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(
				" "
			),
		fixHooks: {},
		keyHooks: {
			props: "char charCode key keyCode".split(" "),
			filter: function (event, original) {
				if (event.which == null) {
					event.which =
						original.charCode != null ? original.charCode : original.keyCode;
				}
				return event;
			},
		},
		mouseHooks: {
			props:
				"button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement".split(
					" "
				),
			filter: function (event, original) {
				var eventDoc,
					doc,
					body,
					button = original.button,
					fromElement = original.fromElement;
				if (event.pageX == null && original.clientX != null) {
					eventDoc = event.target.ownerDocument || document;
					doc = eventDoc.documentElement;
					body = eventDoc.body;
					event.pageX =
						original.clientX +
						((doc && doc.scrollLeft) || (body && body.scrollLeft) || 0) -
						((doc && doc.clientLeft) || (body && body.clientLeft) || 0);
					event.pageY =
						original.clientY +
						((doc && doc.scrollTop) || (body && body.scrollTop) || 0) -
						((doc && doc.clientTop) || (body && body.clientTop) || 0);
				}
				if (!event.relatedTarget && fromElement) {
					event.relatedTarget =
						fromElement === event.target ? original.toElement : fromElement;
				}
				if (!event.which && button !== undefined) {
					event.which = button & 1 ? 1 : button & 2 ? 3 : button & 4 ? 2 : 0;
				}
				return event;
			},
		},
		fix: function (event) {
			if (event[jQuery.expando]) {
				return event;
			}
			var i,
				prop,
				originalEvent = event,
				fixHook = jQuery.event.fixHooks[event.type] || {},
				copy = fixHook.props ? this.props.concat(fixHook.props) : this.props;
			event = jQuery.Event(originalEvent);
			for (i = copy.length; i; ) {
				prop = copy[--i];
				event[prop] = originalEvent[prop];
			}
			if (!event.target) {
				event.target = originalEvent.srcElement || document;
			}
			if (event.target.nodeType === 3) {
				event.target = event.target.parentNode;
			}
			event.metaKey = !!event.metaKey;
			return fixHook.filter ? fixHook.filter(event, originalEvent) : event;
		},
		special: {
			load: {
				noBubble: true,
			},
			focus: {
				delegateType: "focusin",
			},
			blur: {
				delegateType: "focusout",
			},
			beforeunload: {
				setup: function (data, namespaces, eventHandle) {
					if (jQuery.isWindow(this)) {
						this.onbeforeunload = eventHandle;
					}
				},
				teardown: function (namespaces, eventHandle) {
					if (this.onbeforeunload === eventHandle) {
						this.onbeforeunload = null;
					}
				},
			},
		},
		simulate: function (type, elem, event, bubble) {
			var e = jQuery.extend(new jQuery.Event(), event, {
				type: type,
				isSimulated: true,
				originalEvent: {},
			});
			if (bubble) {
				jQuery.event.trigger(e, null, elem);
			} else {
				jQuery.event.dispatch.call(elem, e);
			}
			if (e.isDefaultPrevented()) {
				event.preventDefault();
			}
		},
	};
	jQuery.event.handle = jQuery.event.dispatch;
	jQuery.removeEvent = document.removeEventListener
		? function (elem, type, handle) {
				if (elem.removeEventListener) {
					elem.removeEventListener(type, handle, false);
				}
		  }
		: function (elem, type, handle) {
				var name = "on" + type;
				if (elem.detachEvent) {
					if (typeof elem[name] === "undefined") {
						elem[name] = null;
					}
					elem.detachEvent(name, handle);
				}
		  };
	jQuery.Event = function (src, props) {
		if (!(this instanceof jQuery.Event)) {
			return new jQuery.Event(src, props);
		}
		if (src && src.type) {
			this.originalEvent = src;
			this.type = src.type;
			this.isDefaultPrevented =
				src.defaultPrevented ||
				src.returnValue === false ||
				(src.getPreventDefault && src.getPreventDefault())
					? returnTrue
					: returnFalse;
		} else {
			this.type = src;
		}
		if (props) {
			jQuery.extend(this, props);
		}
		this.timeStamp = (src && src.timeStamp) || jQuery.now();
		this[jQuery.expando] = true;
	};

	function returnFalse() {
		return false;
	}

	function returnTrue() {
		return true;
	}
	jQuery.Event.prototype = {
		preventDefault: function () {
			this.isDefaultPrevented = returnTrue;
			var e = this.originalEvent;
			if (!e) {
				return;
			}
			if (e.preventDefault) {
				e.preventDefault();
			} else {
				e.returnValue = false;
			}
		},
		stopPropagation: function () {
			this.isPropagationStopped = returnTrue;
			var e = this.originalEvent;
			if (!e) {
				return;
			}
			if (e.stopPropagation) {
				e.stopPropagation();
			}
			e.cancelBubble = true;
		},
		stopImmediatePropagation: function () {
			this.isImmediatePropagationStopped = returnTrue;
			this.stopPropagation();
		},
		isDefaultPrevented: returnFalse,
		isPropagationStopped: returnFalse,
		isImmediatePropagationStopped: returnFalse,
	};
	jQuery.each(
		{
			mouseenter: "mouseover",
			mouseleave: "mouseout",
		},
		function (orig, fix) {
			jQuery.event.special[orig] = {
				delegateType: fix,
				bindType: fix,
				handle: function (event) {
					var ret,
						target = this,
						related = event.relatedTarget,
						handleObj = event.handleObj,
						selector = handleObj.selector;
					if (
						!related ||
						(related !== target && !jQuery.contains(target, related))
					) {
						event.type = handleObj.origType;
						ret = handleObj.handler.apply(this, arguments);
						event.type = fix;
					}
					return ret;
				},
			};
		}
	);
	if (!jQuery.support.submitBubbles) {
		jQuery.event.special.submit = {
			setup: function () {
				if (jQuery.nodeName(this, "form")) {
					return false;
				}
				jQuery.event.add(this, "click._submit keypress._submit", function (e) {
					var elem = e.target,
						form =
							jQuery.nodeName(elem, "input") || jQuery.nodeName(elem, "button")
								? elem.form
								: undefined;
					if (form && !jQuery._data(form, "_submit_attached")) {
						jQuery.event.add(form, "submit._submit", function (event) {
							event._submit_bubble = true;
						});
						jQuery._data(form, "_submit_attached", true);
					}
				});
			},
			postDispatch: function (event) {
				if (event._submit_bubble) {
					delete event._submit_bubble;
					if (this.parentNode && !event.isTrigger) {
						jQuery.event.simulate("submit", this.parentNode, event, true);
					}
				}
			},
			teardown: function () {
				if (jQuery.nodeName(this, "form")) {
					return false;
				}
				jQuery.event.remove(this, "._submit");
			},
		};
	}
	if (!jQuery.support.changeBubbles) {
		jQuery.event.special.change = {
			setup: function () {
				if (rformElems.test(this.nodeName)) {
					if (this.type === "checkbox" || this.type === "radio") {
						jQuery.event.add(this, "propertychange._change", function (event) {
							if (event.originalEvent.propertyName === "checked") {
								this._just_changed = true;
							}
						});
						jQuery.event.add(this, "click._change", function (event) {
							if (this._just_changed && !event.isTrigger) {
								this._just_changed = false;
							}
							jQuery.event.simulate("change", this, event, true);
						});
					}
					return false;
				}
				jQuery.event.add(this, "beforeactivate._change", function (e) {
					var elem = e.target;
					if (
						rformElems.test(elem.nodeName) &&
						!jQuery._data(elem, "_change_attached")
					) {
						jQuery.event.add(elem, "change._change", function (event) {
							if (this.parentNode && !event.isSimulated && !event.isTrigger) {
								jQuery.event.simulate("change", this.parentNode, event, true);
							}
						});
						jQuery._data(elem, "_change_attached", true);
					}
				});
			},
			handle: function (event) {
				var elem = event.target;
				if (
					this !== elem ||
					event.isSimulated ||
					event.isTrigger ||
					(elem.type !== "radio" && elem.type !== "checkbox")
				) {
					return event.handleObj.handler.apply(this, arguments);
				}
			},
			teardown: function () {
				jQuery.event.remove(this, "._change");
				return !rformElems.test(this.nodeName);
			},
		};
	}
	if (!jQuery.support.focusinBubbles) {
		jQuery.each(
			{
				focus: "focusin",
				blur: "focusout",
			},
			function (orig, fix) {
				var attaches = 0,
					handler = function (event) {
						jQuery.event.simulate(
							fix,
							event.target,
							jQuery.event.fix(event),
							true
						);
					};
				jQuery.event.special[fix] = {
					setup: function () {
						if (attaches++ === 0) {
							document.addEventListener(orig, handler, true);
						}
					},
					teardown: function () {
						if (--attaches === 0) {
							document.removeEventListener(orig, handler, true);
						}
					},
				};
			}
		);
	}
	jQuery.fn.extend({
		on: function (types, selector, data, fn, one) {
			var origFn, type;
			if (typeof types === "object") {
				if (typeof selector !== "string") {
					data = data || selector;
					selector = undefined;
				}
				for (type in types) {
					this.on(type, selector, data, types[type], one);
				}
				return this;
			}
			if (data == null && fn == null) {
				fn = selector;
				data = selector = undefined;
			} else if (fn == null) {
				if (typeof selector === "string") {
					fn = data;
					data = undefined;
				} else {
					fn = data;
					data = selector;
					selector = undefined;
				}
			}
			if (fn === false) {
				fn = returnFalse;
			} else if (!fn) {
				return this;
			}
			if (one === 1) {
				origFn = fn;
				fn = function (event) {
					jQuery().off(event);
					return origFn.apply(this, arguments);
				};
				fn.guid = origFn.guid || (origFn.guid = jQuery.guid++);
			}
			return this.each(function () {
				jQuery.event.add(this, types, fn, data, selector);
			});
		},
		one: function (types, selector, data, fn) {
			return this.on(types, selector, data, fn, 1);
		},
		off: function (types, selector, fn) {
			var handleObj, type;
			if (types && types.preventDefault && types.handleObj) {
				handleObj = types.handleObj;
				jQuery(types.delegateTarget).off(
					handleObj.namespace
						? handleObj.origType + "." + handleObj.namespace
						: handleObj.origType,
					handleObj.selector,
					handleObj.handler
				);
				return this;
			}
			if (typeof types === "object") {
				for (type in types) {
					this.off(type, selector, types[type]);
				}
				return this;
			}
			if (selector === false || typeof selector === "function") {
				fn = selector;
				selector = undefined;
			}
			if (fn === false) {
				fn = returnFalse;
			}
			return this.each(function () {
				jQuery.event.remove(this, types, fn, selector);
			});
		},
		bind: function (types, data, fn) {
			return this.on(types, null, data, fn);
		},
		unbind: function (types, fn) {
			return this.off(types, null, fn);
		},
		live: function (types, data, fn) {
			jQuery(this.context).on(types, this.selector, data, fn);
			return this;
		},
		die: function (types, fn) {
			jQuery(this.context).off(types, this.selector || "**", fn);
			return this;
		},
		delegate: function (selector, types, data, fn) {
			return this.on(types, selector, data, fn);
		},
		undelegate: function (selector, types, fn) {
			return arguments.length == 1
				? this.off(selector, "**")
				: this.off(types, selector || "**", fn);
		},
		trigger: function (type, data) {
			return this.each(function () {
				jQuery.event.trigger(type, data, this);
			});
		},
		triggerHandler: function (type, data) {
			if (this[0]) {
				return jQuery.event.trigger(type, data, this[0], true);
			}
		},
		toggle: function (fn) {
			var args = arguments,
				guid = fn.guid || jQuery.guid++,
				i = 0,
				toggler = function (event) {
					var lastToggle =
						(jQuery._data(this, "lastToggle" + fn.guid) || 0) % i;
					jQuery._data(this, "lastToggle" + fn.guid, lastToggle + 1);
					event.preventDefault();
					return args[lastToggle].apply(this, arguments) || false;
				};
			toggler.guid = guid;
			while (i < args.length) {
				args[i++].guid = guid;
			}
			return this.click(toggler);
		},
		hover: function (fnOver, fnOut) {
			return this.mouseenter(fnOver).mouseleave(fnOut || fnOver);
		},
	});
	jQuery.each(
		(
			"blur focus focusin focusout load resize scroll unload click dblclick " +
			"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
			"change select submit keydown keypress keyup error contextmenu"
		).split(" "),
		function (i, name) {
			jQuery.fn[name] = function (data, fn) {
				if (fn == null) {
					fn = data;
					data = null;
				}
				return arguments.length > 0
					? this.on(name, null, data, fn)
					: this.trigger(name);
			};
			if (rkeyEvent.test(name)) {
				jQuery.event.fixHooks[name] = jQuery.event.keyHooks;
			}
			if (rmouseEvent.test(name)) {
				jQuery.event.fixHooks[name] = jQuery.event.mouseHooks;
			}
		}
	);
	(function (window, undefined) {
		var dirruns,
			cachedruns,
			assertGetIdNotName,
			Expr,
			getText,
			isXML,
			contains,
			compile,
			sortOrder,
			hasDuplicate,
			baseHasDuplicate = true,
			strundefined = "undefined",
			expando = ("sizcache" + Math.random()).replace(".", ""),
			document = window.document,
			docElem = document.documentElement,
			done = 0,
			slice = [].slice,
			push = [].push,
			markFunction = function (fn, value) {
				fn[expando] = value || true;
				return fn;
			},
			createCache = function () {
				var cache = {},
					keys = [];
				return markFunction(function (key, value) {
					if (keys.push(key) > Expr.cacheLength) {
						delete cache[keys.shift()];
					}
					return (cache[key] = value);
				}, cache);
			},
			classCache = createCache(),
			tokenCache = createCache(),
			compilerCache = createCache(),
			whitespace = "[\\x20\\t\\r\\n\\f]",
			characterEncoding = "(?:\\\\.|[-\\w]|[^\\x00-\\xa0])+",
			identifier = characterEncoding.replace("w", "w#"),
			operators = "([*^$|!~]?=)",
			attributes =
				"\\[" +
				whitespace +
				"*(" +
				characterEncoding +
				")" +
				whitespace +
				"*(?:" +
				operators +
				whitespace +
				"*(?:(['\"])((?:\\\\.|[^\\\\])*?)\\3|(" +
				identifier +
				")|)|)" +
				whitespace +
				"*\\]",
			pseudos =
				":(" +
				characterEncoding +
				")(?:\\((?:(['\"])((?:\\\\.|[^\\\\])*?)\\2|([^()[\\]]*|(?:(?:" +
				attributes +
				")|[^:]|\\\\.)*|.*))\\)|)",
			pos =
				":(nth|eq|gt|lt|first|last|even|odd)(?:\\(((?:-\\d)?\\d*)\\)|)(?=[^-]|$)",
			rtrim = new RegExp(
				"^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$",
				"g"
			),
			rcomma = new RegExp("^" + whitespace + "*," + whitespace + "*"),
			rcombinators = new RegExp(
				"^" + whitespace + "*([\\x20\\t\\r\\n\\f>+~])" + whitespace + "*"
			),
			rpseudo = new RegExp(pseudos),
			rquickExpr = /^(?:#([\w\-]+)|(\w+)|\.([\w\-]+))$/,
			rnot = /^:not/,
			rsibling = /[\x20\t\r\n\f]*[+~]/,
			rendsWithNot = /:not\($/,
			rheader = /h\d/i,
			rinputs = /input|select|textarea|button/i,
			rbackslash = /\\(?!\\)/g,
			matchExpr = {
				ID: new RegExp("^#(" + characterEncoding + ")"),
				CLASS: new RegExp("^\\.(" + characterEncoding + ")"),
				NAME: new RegExp("^\\[name=['\"]?(" + characterEncoding + ")['\"]?\\]"),
				TAG: new RegExp("^(" + characterEncoding.replace("w", "w*") + ")"),
				ATTR: new RegExp("^" + attributes),
				PSEUDO: new RegExp("^" + pseudos),
				CHILD: new RegExp(
					"^:(only|nth|last|first)-child(?:\\(" +
						whitespace +
						"*(even|odd|(([+-]|)(\\d*)n|)" +
						whitespace +
						"*(?:([+-]|)" +
						whitespace +
						"*(\\d+)|))" +
						whitespace +
						"*\\)|)",
					"i"
				),
				POS: new RegExp(pos, "ig"),
				needsContext: new RegExp("^" + whitespace + "*[>+~]|" + pos, "i"),
			},
			assert = function (fn) {
				var div = document.createElement("div");
				try {
					return fn(div);
				} catch (e) {
					return false;
				} finally {
					div = null;
				}
			},
			assertTagNameNoComments = assert(function (div) {
				div.appendChild(document.createComment(""));
				return !div.getElementsByTagName("*").length;
			}),
			assertHrefNotNormalized = assert(function (div) {
				div.innerHTML = "<a href='#'></a>";
				return (
					div.firstChild &&
					typeof div.firstChild.getAttribute !== strundefined &&
					div.firstChild.getAttribute("href") === "#"
				);
			}),
			assertAttributes = assert(function (div) {
				div.innerHTML = "<select></select>";
				var type = typeof div.lastChild.getAttribute("multiple");
				return type !== "boolean" && type !== "string";
			}),
			assertUsableClassName = assert(function (div) {
				div.innerHTML =
					"<div class='hidden e'></div><div class='hidden'></div>";
				if (
					!div.getElementsByClassName ||
					!div.getElementsByClassName("e").length
				) {
					return false;
				}
				div.lastChild.className = "e";
				return div.getElementsByClassName("e").length === 2;
			}),
			assertUsableName = assert(function (div) {
				div.id = expando + 0;
				div.innerHTML =
					"<a name='" + expando + "'></a><div name='" + expando + "'></div>";
				docElem.insertBefore(div, docElem.firstChild);
				var pass =
					document.getElementsByName &&
					document.getElementsByName(expando).length ===
						2 + document.getElementsByName(expando + 0).length;
				assertGetIdNotName = !document.getElementById(expando);
				docElem.removeChild(div);
				return pass;
			});
		try {
			slice.call(docElem.childNodes, 0)[0].nodeType;
		} catch (e) {
			slice = function (i) {
				var elem,
					results = [];
				for (; (elem = this[i]); i++) {
					results.push(elem);
				}
				return results;
			};
		}

		function Sizzle(selector, context, results, seed) {
			results = results || [];
			context = context || document;
			var match,
				elem,
				xml,
				m,
				nodeType = context.nodeType;
			if (nodeType !== 1 && nodeType !== 9) {
				return [];
			}
			if (!selector || typeof selector !== "string") {
				return results;
			}
			xml = isXML(context);
			if (!xml && !seed) {
				if ((match = rquickExpr.exec(selector))) {
					if ((m = match[1])) {
						if (nodeType === 9) {
							elem = context.getElementById(m);
							if (elem && elem.parentNode) {
								if (elem.id === m) {
									results.push(elem);
									return results;
								}
							} else {
								return results;
							}
						} else {
							if (
								context.ownerDocument &&
								(elem = context.ownerDocument.getElementById(m)) &&
								contains(context, elem) &&
								elem.id === m
							) {
								results.push(elem);
								return results;
							}
						}
					} else if (match[2]) {
						push.apply(
							results,
							slice.call(context.getElementsByTagName(selector), 0)
						);
						return results;
					} else if (
						(m = match[3]) &&
						assertUsableClassName &&
						context.getElementsByClassName
					) {
						push.apply(
							results,
							slice.call(context.getElementsByClassName(m), 0)
						);
						return results;
					}
				}
			}
			return select(selector, context, results, seed, xml);
		}
		Sizzle.matches = function (expr, elements) {
			return Sizzle(expr, null, null, elements);
		};
		Sizzle.matchesSelector = function (elem, expr) {
			return Sizzle(expr, null, null, [elem]).length > 0;
		};

		function createInputPseudo(type) {
			return function (elem) {
				var name = elem.nodeName.toLowerCase();
				return name === "input" && elem.type === type;
			};
		}

		function createButtonPseudo(type) {
			return function (elem) {
				var name = elem.nodeName.toLowerCase();
				return (name === "input" || name === "button") && elem.type === type;
			};
		}
		getText = Sizzle.getText = function (elem) {
			var node,
				ret = "",
				i = 0,
				nodeType = elem.nodeType;
			if (nodeType) {
				if (nodeType === 1 || nodeType === 9 || nodeType === 11) {
					if (typeof elem.textContent === "string") {
						return elem.textContent;
					} else {
						for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
							ret += getText(elem);
						}
					}
				} else if (nodeType === 3 || nodeType === 4) {
					return elem.nodeValue;
				}
			} else {
				for (; (node = elem[i]); i++) {
					ret += getText(node);
				}
			}
			return ret;
		};
		isXML = Sizzle.isXML = function isXML(elem) {
			var documentElement =
				elem && (elem.ownerDocument || elem).documentElement;
			return documentElement ? documentElement.nodeName !== "HTML" : false;
		};
		contains = Sizzle.contains = docElem.contains
			? function (a, b) {
					var adown = a.nodeType === 9 ? a.documentElement : a,
						bup = b && b.parentNode;
					return (
						a === bup ||
						!!(
							bup &&
							bup.nodeType === 1 &&
							adown.contains &&
							adown.contains(bup)
						)
					);
			  }
			: docElem.compareDocumentPosition
			? function (a, b) {
					return b && !!(a.compareDocumentPosition(b) & 16);
			  }
			: function (a, b) {
					while ((b = b.parentNode)) {
						if (b === a) {
							return true;
						}
					}
					return false;
			  };
		Sizzle.attr = function (elem, name) {
			var attr,
				xml = isXML(elem);
			if (!xml) {
				name = name.toLowerCase();
			}
			if (Expr.attrHandle[name]) {
				return Expr.attrHandle[name](elem);
			}
			if (assertAttributes || xml) {
				return elem.getAttribute(name);
			}
			attr = elem.getAttributeNode(name);
			return attr
				? typeof elem[name] === "boolean"
					? elem[name]
						? name
						: null
					: attr.specified
					? attr.value
					: null
				: null;
		};
		Expr = Sizzle.selectors = {
			cacheLength: 50,
			createPseudo: markFunction,
			match: matchExpr,
			order: new RegExp(
				"ID|TAG" +
					(assertUsableName ? "|NAME" : "") +
					(assertUsableClassName ? "|CLASS" : "")
			),
			attrHandle: assertHrefNotNormalized
				? {}
				: {
						href: function (elem) {
							return elem.getAttribute("href", 2);
						},
						type: function (elem) {
							return elem.getAttribute("type");
						},
				  },
			find: {
				ID: assertGetIdNotName
					? function (id, context, xml) {
							if (typeof context.getElementById !== strundefined && !xml) {
								var m = context.getElementById(id);
								return m && m.parentNode ? [m] : [];
							}
					  }
					: function (id, context, xml) {
							if (typeof context.getElementById !== strundefined && !xml) {
								var m = context.getElementById(id);
								return m
									? m.id === id ||
									  (typeof m.getAttributeNode !== strundefined &&
											m.getAttributeNode("id").value === id)
										? [m]
										: undefined
									: [];
							}
					  },
				TAG: assertTagNameNoComments
					? function (tag, context) {
							if (typeof context.getElementsByTagName !== strundefined) {
								return context.getElementsByTagName(tag);
							}
					  }
					: function (tag, context) {
							var results = context.getElementsByTagName(tag);
							if (tag === "*") {
								var elem,
									tmp = [],
									i = 0;
								for (; (elem = results[i]); i++) {
									if (elem.nodeType === 1) {
										tmp.push(elem);
									}
								}
								return tmp;
							}
							return results;
					  },
				NAME: function (tag, context) {
					if (typeof context.getElementsByName !== strundefined) {
						return context.getElementsByName(name);
					}
				},
				CLASS: function (className, context, xml) {
					if (typeof context.getElementsByClassName !== strundefined && !xml) {
						return context.getElementsByClassName(className);
					}
				},
			},
			relative: {
				">": {
					dir: "parentNode",
					first: true,
				},
				" ": {
					dir: "parentNode",
				},
				"+": {
					dir: "previousSibling",
					first: true,
				},
				"~": {
					dir: "previousSibling",
				},
			},
			preFilter: {
				ATTR: function (match) {
					match[1] = match[1].replace(rbackslash, "");
					match[3] = (match[4] || match[5] || "").replace(rbackslash, "");
					if (match[2] === "~=") {
						match[3] = " " + match[3] + " ";
					}
					return match.slice(0, 4);
				},
				CHILD: function (match) {
					match[1] = match[1].toLowerCase();
					if (match[1] === "nth") {
						if (!match[2]) {
							Sizzle.error(match[0]);
						}
						match[3] = +(match[3]
							? match[4] + (match[5] || 1)
							: 2 * (match[2] === "even" || match[2] === "odd"));
						match[4] = +(match[6] + match[7] || match[2] === "odd");
					} else if (match[2]) {
						Sizzle.error(match[0]);
					}
					return match;
				},
				PSEUDO: function (match, context, xml) {
					var unquoted, excess;
					if (matchExpr["CHILD"].test(match[0])) {
						return null;
					}
					if (match[3]) {
						match[2] = match[3];
					} else if ((unquoted = match[4])) {
						if (
							rpseudo.test(unquoted) &&
							(excess = tokenize(unquoted, context, xml, true)) &&
							(excess =
								unquoted.indexOf(")", unquoted.length - excess) -
								unquoted.length)
						) {
							unquoted = unquoted.slice(0, excess);
							match[0] = match[0].slice(0, excess);
						}
						match[2] = unquoted;
					}
					return match.slice(0, 3);
				},
			},
			filter: {
				ID: assertGetIdNotName
					? function (id) {
							id = id.replace(rbackslash, "");
							return function (elem) {
								return elem.getAttribute("id") === id;
							};
					  }
					: function (id) {
							id = id.replace(rbackslash, "");
							return function (elem) {
								var node =
									typeof elem.getAttributeNode !== strundefined &&
									elem.getAttributeNode("id");
								return node && node.value === id;
							};
					  },
				TAG: function (nodeName) {
					if (nodeName === "*") {
						return function () {
							return true;
						};
					}
					nodeName = nodeName.replace(rbackslash, "").toLowerCase();
					return function (elem) {
						return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
					};
				},
				CLASS: function (className) {
					var pattern = classCache[expando][className];
					if (!pattern) {
						pattern = classCache(
							className,
							new RegExp(
								"(^|" + whitespace + ")" + className + "(" + whitespace + "|$)"
							)
						);
					}
					return function (elem) {
						return pattern.test(
							elem.className ||
								(typeof elem.getAttribute !== strundefined &&
									elem.getAttribute("class")) ||
								""
						);
					};
				},
				ATTR: function (name, operator, check) {
					if (!operator) {
						return function (elem) {
							return Sizzle.attr(elem, name) != null;
						};
					}
					return function (elem) {
						var result = Sizzle.attr(elem, name),
							value = result + "";
						if (result == null) {
							return operator === "!=";
						}
						switch (operator) {
							case "=":
								return value === check;
							case "!=":
								return value !== check;
							case "^=":
								return check && value.indexOf(check) === 0;
							case "*=":
								return check && value.indexOf(check) > -1;
							case "$=":
								return (
									check && value.substr(value.length - check.length) === check
								);
							case "~=":
								return (" " + value + " ").indexOf(check) > -1;
							case "|=":
								return (
									value === check ||
									value.substr(0, check.length + 1) === check + "-"
								);
						}
					};
				},
				CHILD: function (type, argument, first, last) {
					if (type === "nth") {
						var doneName = done++;
						return function (elem) {
							var parent,
								diff,
								count = 0,
								node = elem;
							if (first === 1 && last === 0) {
								return true;
							}
							parent = elem.parentNode;
							if (parent && (parent[expando] !== doneName || !elem.sizset)) {
								for (node = parent.firstChild; node; node = node.nextSibling) {
									if (node.nodeType === 1) {
										node.sizset = ++count;
										if (node === elem) {
											break;
										}
									}
								}
								parent[expando] = doneName;
							}
							diff = elem.sizset - last;
							if (first === 0) {
								return diff === 0;
							} else {
								return diff % first === 0 && diff / first >= 0;
							}
						};
					}
					return function (elem) {
						var node = elem;
						switch (type) {
							case "only":
							case "first":
								while ((node = node.previousSibling)) {
									if (node.nodeType === 1) {
										return false;
									}
								}
								if (type === "first") {
									return true;
								}
								node = elem;
							case "last":
								while ((node = node.nextSibling)) {
									if (node.nodeType === 1) {
										return false;
									}
								}
								return true;
						}
					};
				},
				PSEUDO: function (pseudo, argument, context, xml) {
					var args,
						fn = Expr.pseudos[pseudo] || Expr.pseudos[pseudo.toLowerCase()];
					if (!fn) {
						Sizzle.error("unsupported pseudo: " + pseudo);
					}
					if (!fn[expando]) {
						if (fn.length > 1) {
							args = [pseudo, pseudo, "", argument];
							return function (elem) {
								return fn(elem, 0, args);
							};
						}
						return fn;
					}
					return fn(argument, context, xml);
				},
			},
			pseudos: {
				not: markFunction(function (selector, context, xml) {
					var matcher = compile(selector.replace(rtrim, "$1"), context, xml);
					return function (elem) {
						return !matcher(elem);
					};
				}),
				enabled: function (elem) {
					return elem.disabled === false;
				},
				disabled: function (elem) {
					return elem.disabled === true;
				},
				checked: function (elem) {
					var nodeName = elem.nodeName.toLowerCase();
					return (
						(nodeName === "input" && !!elem.checked) ||
						(nodeName === "option" && !!elem.selected)
					);
				},
				selected: function (elem) {
					if (elem.parentNode) {
						elem.parentNode.selectedIndex;
					}
					return elem.selected === true;
				},
				parent: function (elem) {
					return !Expr.pseudos["empty"](elem);
				},
				empty: function (elem) {
					var nodeType;
					elem = elem.firstChild;
					while (elem) {
						if (
							elem.nodeName > "@" ||
							(nodeType = elem.nodeType) === 3 ||
							nodeType === 4
						) {
							return false;
						}
						elem = elem.nextSibling;
					}
					return true;
				},
				contains: markFunction(function (text) {
					return function (elem) {
						return (
							(elem.textContent || elem.innerText || getText(elem)).indexOf(
								text
							) > -1
						);
					};
				}),
				has: markFunction(function (selector) {
					return function (elem) {
						return Sizzle(selector, elem).length > 0;
					};
				}),
				header: function (elem) {
					return rheader.test(elem.nodeName);
				},
				text: function (elem) {
					var type, attr;
					return (
						elem.nodeName.toLowerCase() === "input" &&
						(type = elem.type) === "text" &&
						((attr = elem.getAttribute("type")) == null ||
							attr.toLowerCase() === type)
					);
				},
				radio: createInputPseudo("radio"),
				checkbox: createInputPseudo("checkbox"),
				file: createInputPseudo("file"),
				password: createInputPseudo("password"),
				image: createInputPseudo("image"),
				submit: createButtonPseudo("submit"),
				reset: createButtonPseudo("reset"),
				button: function (elem) {
					var name = elem.nodeName.toLowerCase();
					return (
						(name === "input" && elem.type === "button") || name === "button"
					);
				},
				input: function (elem) {
					return rinputs.test(elem.nodeName);
				},
				focus: function (elem) {
					var doc = elem.ownerDocument;
					return (
						elem === doc.activeElement &&
						(!doc.hasFocus || doc.hasFocus()) &&
						!!(elem.type || elem.href)
					);
				},
				active: function (elem) {
					return elem === elem.ownerDocument.activeElement;
				},
			},
			setFilters: {
				first: function (elements, argument, not) {
					return not ? elements.slice(1) : [elements[0]];
				},
				last: function (elements, argument, not) {
					var elem = elements.pop();
					return not ? elements : [elem];
				},
				even: function (elements, argument, not) {
					var results = [],
						i = not ? 1 : 0,
						len = elements.length;
					for (; i < len; i = i + 2) {
						results.push(elements[i]);
					}
					return results;
				},
				odd: function (elements, argument, not) {
					var results = [],
						i = not ? 0 : 1,
						len = elements.length;
					for (; i < len; i = i + 2) {
						results.push(elements[i]);
					}
					return results;
				},
				lt: function (elements, argument, not) {
					return not ? elements.slice(+argument) : elements.slice(0, +argument);
				},
				gt: function (elements, argument, not) {
					return not
						? elements.slice(0, +argument + 1)
						: elements.slice(+argument + 1);
				},
				eq: function (elements, argument, not) {
					var elem = elements.splice(+argument, 1);
					return not ? elements : elem;
				},
			},
		};

		function siblingCheck(a, b, ret) {
			if (a === b) {
				return ret;
			}
			var cur = a.nextSibling;
			while (cur) {
				if (cur === b) {
					return -1;
				}
				cur = cur.nextSibling;
			}
			return 1;
		}
		sortOrder = docElem.compareDocumentPosition
			? function (a, b) {
					if (a === b) {
						hasDuplicate = true;
						return 0;
					}
					return (
						!a.compareDocumentPosition || !b.compareDocumentPosition
							? a.compareDocumentPosition
							: a.compareDocumentPosition(b) & 4
					)
						? -1
						: 1;
			  }
			: function (a, b) {
					if (a === b) {
						hasDuplicate = true;
						return 0;
					} else if (a.sourceIndex && b.sourceIndex) {
						return a.sourceIndex - b.sourceIndex;
					}
					var al,
						bl,
						ap = [],
						bp = [],
						aup = a.parentNode,
						bup = b.parentNode,
						cur = aup;
					if (aup === bup) {
						return siblingCheck(a, b);
					} else if (!aup) {
						return -1;
					} else if (!bup) {
						return 1;
					}
					while (cur) {
						ap.unshift(cur);
						cur = cur.parentNode;
					}
					cur = bup;
					while (cur) {
						bp.unshift(cur);
						cur = cur.parentNode;
					}
					al = ap.length;
					bl = bp.length;
					for (var i = 0; i < al && i < bl; i++) {
						if (ap[i] !== bp[i]) {
							return siblingCheck(ap[i], bp[i]);
						}
					}
					return i === al
						? siblingCheck(a, bp[i], -1)
						: siblingCheck(ap[i], b, 1);
			  };
		[0, 0].sort(sortOrder);
		baseHasDuplicate = !hasDuplicate;
		Sizzle.uniqueSort = function (results) {
			var elem,
				i = 1;
			hasDuplicate = baseHasDuplicate;
			results.sort(sortOrder);
			if (hasDuplicate) {
				for (; (elem = results[i]); i++) {
					if (elem === results[i - 1]) {
						results.splice(i--, 1);
					}
				}
			}
			return results;
		};
		Sizzle.error = function (msg) {
			throw new Error("Syntax error, unrecognized expression: " + msg);
		};

		function tokenize(selector, context, xml, parseOnly) {
			var matched,
				match,
				tokens,
				type,
				soFar,
				groups,
				group,
				i,
				preFilters,
				filters,
				checkContext = !xml && context !== document,
				key = (checkContext ? "<s>" : "") + selector.replace(rtrim, "$1<s>"),
				cached = tokenCache[expando][key];
			if (cached) {
				return parseOnly ? 0 : slice.call(cached, 0);
			}
			soFar = selector;
			groups = [];
			i = 0;
			preFilters = Expr.preFilter;
			filters = Expr.filter;
			while (soFar) {
				if (!matched || (match = rcomma.exec(soFar))) {
					if (match) {
						soFar = soFar.slice(match[0].length);
						tokens.selector = group;
					}
					groups.push((tokens = []));
					group = "";
					if (checkContext) {
						soFar = " " + soFar;
					}
				}
				matched = false;
				if ((match = rcombinators.exec(soFar))) {
					group += match[0];
					soFar = soFar.slice(match[0].length);
					matched = tokens.push({
						part: match.pop().replace(rtrim, " "),
						string: match[0],
						captures: match,
					});
				}
				for (type in filters) {
					if (
						(match = matchExpr[type].exec(soFar)) &&
						(!preFilters[type] ||
							(match = preFilters[type](match, context, xml)))
					) {
						group += match[0];
						soFar = soFar.slice(match[0].length);
						matched = tokens.push({
							part: type,
							string: match.shift(),
							captures: match,
						});
					}
				}
				if (!matched) {
					break;
				}
			}
			if (group) {
				tokens.selector = group;
			}
			return parseOnly
				? soFar.length
				: soFar
				? Sizzle.error(selector)
				: slice.call(tokenCache(key, groups), 0);
		}

		function addCombinator(matcher, combinator, context, xml) {
			var dir = combinator.dir,
				doneName = done++;
			if (!matcher) {
				matcher = function (elem) {
					return elem === context;
				};
			}
			return combinator.first
				? function (elem) {
						while ((elem = elem[dir])) {
							if (elem.nodeType === 1) {
								return matcher(elem) && elem;
							}
						}
				  }
				: xml
				? function (elem) {
						while ((elem = elem[dir])) {
							if (elem.nodeType === 1) {
								if (matcher(elem)) {
									return elem;
								}
							}
						}
				  }
				: function (elem) {
						var cache,
							dirkey = doneName + "." + dirruns,
							cachedkey = dirkey + "." + cachedruns;
						while ((elem = elem[dir])) {
							if (elem.nodeType === 1) {
								if ((cache = elem[expando]) === cachedkey) {
									return elem.sizset;
								} else if (
									typeof cache === "string" &&
									cache.indexOf(dirkey) === 0
								) {
									if (elem.sizset) {
										return elem;
									}
								} else {
									elem[expando] = cachedkey;
									if (matcher(elem)) {
										elem.sizset = true;
										return elem;
									}
									elem.sizset = false;
								}
							}
						}
				  };
		}

		function addMatcher(higher, deeper) {
			return higher
				? function (elem) {
						var result = deeper(elem);
						return result && higher(result === true ? elem : result);
				  }
				: deeper;
		}

		function matcherFromTokens(tokens, context, xml) {
			var token,
				matcher,
				i = 0;
			for (; (token = tokens[i]); i++) {
				if (Expr.relative[token.part]) {
					matcher = addCombinator(
						matcher,
						Expr.relative[token.part],
						context,
						xml
					);
				} else {
					matcher = addMatcher(
						matcher,
						Expr.filter[token.part].apply(
							null,
							token.captures.concat(context, xml)
						)
					);
				}
			}
			return matcher;
		}

		function matcherFromGroupMatchers(matchers) {
			return function (elem) {
				var matcher,
					j = 0;
				for (; (matcher = matchers[j]); j++) {
					if (matcher(elem)) {
						return true;
					}
				}
				return false;
			};
		}
		compile = Sizzle.compile = function (selector, context, xml) {
			var group,
				i,
				len,
				cached = compilerCache[expando][selector];
			if (cached && cached.context === context) {
				return cached;
			}
			group = tokenize(selector, context, xml);
			for (i = 0, len = group.length; i < len; i++) {
				group[i] = matcherFromTokens(group[i], context, xml);
			}
			cached = compilerCache(selector, matcherFromGroupMatchers(group));
			cached.context = context;
			cached.runs = cached.dirruns = 0;
			return cached;
		};

		function multipleContexts(selector, contexts, results, seed) {
			var i = 0,
				len = contexts.length;
			for (; i < len; i++) {
				Sizzle(selector, contexts[i], results, seed);
			}
		}

		function handlePOSGroup(
			selector,
			posfilter,
			argument,
			contexts,
			seed,
			not
		) {
			var results,
				fn = Expr.setFilters[posfilter.toLowerCase()];
			if (!fn) {
				Sizzle.error(posfilter);
			}
			if (selector || !(results = seed)) {
				multipleContexts(selector || "*", contexts, (results = []), seed);
			}
			return results.length > 0 ? fn(results, argument, not) : [];
		}

		function handlePOS(groups, context, results, seed) {
			var group,
				part,
				j,
				groupLen,
				token,
				selector,
				anchor,
				elements,
				match,
				matched,
				lastIndex,
				currentContexts,
				not,
				i = 0,
				len = groups.length,
				rpos = matchExpr["POS"],
				rposgroups = new RegExp(
					"^" + rpos.source + "(?!" + whitespace + ")",
					"i"
				),
				setUndefined = function () {
					var i = 1,
						len = arguments.length - 2;
					for (; i < len; i++) {
						if (arguments[i] === undefined) {
							match[i] = undefined;
						}
					}
				};
			for (; i < len; i++) {
				group = groups[i];
				part = "";
				elements = seed;
				for (j = 0, groupLen = group.length; j < groupLen; j++) {
					token = group[j];
					selector = token.string;
					if (token.part === "PSEUDO") {
						rpos.exec("");
						anchor = 0;
						while ((match = rpos.exec(selector))) {
							matched = true;
							lastIndex = rpos.lastIndex = match.index + match[0].length;
							if (lastIndex > anchor) {
								part += selector.slice(anchor, match.index);
								anchor = lastIndex;
								currentContexts = [context];
								if (rcombinators.test(part)) {
									if (elements) {
										currentContexts = elements;
									}
									elements = seed;
								}
								if ((not = rendsWithNot.test(part))) {
									part = part.slice(0, -5).replace(rcombinators, "$&*");
									anchor++;
								}
								if (match.length > 1) {
									match[0].replace(rposgroups, setUndefined);
								}
								elements = handlePOSGroup(
									part,
									match[1],
									match[2],
									currentContexts,
									elements,
									not
								);
							}
							part = "";
						}
					}
					if (!matched) {
						part += selector;
					}
					matched = false;
				}
				if (part) {
					if (rcombinators.test(part)) {
						multipleContexts(part, elements || [context], results, seed);
					} else {
						Sizzle(
							part,
							context,
							results,
							seed ? seed.concat(elements) : elements
						);
					}
				} else {
					push.apply(results, elements);
				}
			}
			return len === 1 ? results : Sizzle.uniqueSort(results);
		}

		function select(selector, context, results, seed, xml) {
			selector = selector.replace(rtrim, "$1");
			var elements,
				matcher,
				cached,
				elem,
				i,
				tokens,
				token,
				lastToken,
				findContext,
				type,
				match = tokenize(selector, context, xml),
				contextNodeType = context.nodeType;
			if (matchExpr["POS"].test(selector)) {
				return handlePOS(match, context, results, seed);
			}
			if (seed) {
				elements = slice.call(seed, 0);
			} else if (match.length === 1) {
				if (
					(tokens = slice.call(match[0], 0)).length > 2 &&
					(token = tokens[0]).part === "ID" &&
					contextNodeType === 9 &&
					!xml &&
					Expr.relative[tokens[1].part]
				) {
					context = Expr.find["ID"](
						token.captures[0].replace(rbackslash, ""),
						context,
						xml
					)[0];
					if (!context) {
						return results;
					}
					selector = selector.slice(tokens.shift().string.length);
				}
				findContext =
					((match = rsibling.exec(tokens[0].string)) &&
						!match.index &&
						context.parentNode) ||
					context;
				lastToken = "";
				for (i = tokens.length - 1; i >= 0; i--) {
					token = tokens[i];
					type = token.part;
					lastToken = token.string + lastToken;
					if (Expr.relative[type]) {
						break;
					}
					if (Expr.order.test(type)) {
						elements = Expr.find[type](
							token.captures[0].replace(rbackslash, ""),
							findContext,
							xml
						);
						if (elements == null) {
							continue;
						} else {
							selector =
								selector.slice(0, selector.length - lastToken.length) +
								lastToken.replace(matchExpr[type], "");
							if (!selector) {
								push.apply(results, slice.call(elements, 0));
							}
							break;
						}
					}
				}
			}
			if (selector) {
				matcher = compile(selector, context, xml);
				dirruns = matcher.dirruns++;
				if (elements == null) {
					elements = Expr.find["TAG"](
						"*",
						(rsibling.test(selector) && context.parentNode) || context
					);
				}
				for (i = 0; (elem = elements[i]); i++) {
					cachedruns = matcher.runs++;
					if (matcher(elem)) {
						results.push(elem);
					}
				}
			}
			return results;
		}
		if (document.querySelectorAll) {
			(function () {
				var disconnectedMatch,
					oldSelect = select,
					rescape = /'|\\/g,
					rattributeQuotes = /\=[\x20\t\r\n\f]*([^'"\]]*)[\x20\t\r\n\f]*\]/g,
					rbuggyQSA = [],
					rbuggyMatches = [":active"],
					matches =
						docElem.matchesSelector ||
						docElem.mozMatchesSelector ||
						docElem.webkitMatchesSelector ||
						docElem.oMatchesSelector ||
						docElem.msMatchesSelector;
				assert(function (div) {
					div.innerHTML = "<select><option selected=''></option></select>";
					if (!div.querySelectorAll("[selected]").length) {
						rbuggyQSA.push(
							"\\[" +
								whitespace +
								"*(?:checked|disabled|ismap|multiple|readonly|selected|value)"
						);
					}
					if (!div.querySelectorAll(":checked").length) {
						rbuggyQSA.push(":checked");
					}
				});
				assert(function (div) {
					div.innerHTML = "<p test=''></p>";
					if (div.querySelectorAll("[test^='']").length) {
						rbuggyQSA.push("[*^$]=" + whitespace + "*(?:\"\"|'')");
					}
					div.innerHTML = "<input type='hidden'/>";
					if (!div.querySelectorAll(":enabled").length) {
						rbuggyQSA.push(":enabled", ":disabled");
					}
				});
				rbuggyQSA = rbuggyQSA.length && new RegExp(rbuggyQSA.join("|"));
				select = function (selector, context, results, seed, xml) {
					if (!seed && !xml && (!rbuggyQSA || !rbuggyQSA.test(selector))) {
						if (context.nodeType === 9) {
							try {
								push.apply(
									results,
									slice.call(context.querySelectorAll(selector), 0)
								);
								return results;
							} catch (qsaError) {}
						} else if (
							context.nodeType === 1 &&
							context.nodeName.toLowerCase() !== "object"
						) {
							var groups,
								i,
								len,
								old = context.getAttribute("id"),
								nid = old || expando,
								newContext =
									(rsibling.test(selector) && context.parentNode) || context;
							if (old) {
								nid = nid.replace(rescape, "\\$&");
							} else {
								context.setAttribute("id", nid);
							}
							groups = tokenize(selector, context, xml);
							nid = "[id='" + nid + "']";
							for (i = 0, len = groups.length; i < len; i++) {
								groups[i] = nid + groups[i].selector;
							}
							try {
								push.apply(
									results,
									slice.call(newContext.querySelectorAll(groups.join(",")), 0)
								);
								return results;
							} catch (qsaError) {
							} finally {
								if (!old) {
									context.removeAttribute("id");
								}
							}
						}
					}
					return oldSelect(selector, context, results, seed, xml);
				};
				if (matches) {
					assert(function (div) {
						disconnectedMatch = matches.call(div, "div");
						try {
							matches.call(div, "[test!='']:sizzle");
							rbuggyMatches.push(
								matchExpr["PSEUDO"].source,
								matchExpr["POS"].source,
								"!="
							);
						} catch (e) {}
					});
					rbuggyMatches = new RegExp(rbuggyMatches.join("|"));
					Sizzle.matchesSelector = function (elem, expr) {
						expr = expr.replace(rattributeQuotes, "='$1']");
						if (
							!isXML(elem) &&
							!rbuggyMatches.test(expr) &&
							(!rbuggyQSA || !rbuggyQSA.test(expr))
						) {
							try {
								var ret = matches.call(elem, expr);
								if (
									ret ||
									disconnectedMatch ||
									(elem.document && elem.document.nodeType !== 11)
								) {
									return ret;
								}
							} catch (e) {}
						}
						return Sizzle(expr, null, null, [elem]).length > 0;
					};
				}
			})();
		}
		Expr.setFilters["nth"] = Expr.setFilters["eq"];
		Expr.filters = Expr.pseudos;
		Sizzle.attr = jQuery.attr;
		jQuery.find = Sizzle;
		jQuery.expr = Sizzle.selectors;
		jQuery.expr[":"] = jQuery.expr.pseudos;
		jQuery.unique = Sizzle.uniqueSort;
		jQuery.text = Sizzle.getText;
		jQuery.isXMLDoc = Sizzle.isXML;
		jQuery.contains = Sizzle.contains;
	})(window);
	var runtil = /Until$/,
		rparentsprev = /^(?:parents|prev(?:Until|All))/,
		isSimple = /^.[^:#\[\.,]*$/,
		rneedsContext = jQuery.expr.match.needsContext,
		guaranteedUnique = {
			children: true,
			contents: true,
			next: true,
			prev: true,
		};
	jQuery.fn.extend({
		find: function (selector) {
			var i,
				l,
				length,
				n,
				r,
				ret,
				self = this;
			if (typeof selector !== "string") {
				return jQuery(selector).filter(function () {
					for (i = 0, l = self.length; i < l; i++) {
						if (jQuery.contains(self[i], this)) {
							return true;
						}
					}
				});
			}
			ret = this.pushStack("", "find", selector);
			for (i = 0, l = this.length; i < l; i++) {
				length = ret.length;
				jQuery.find(selector, this[i], ret);
				if (i > 0) {
					for (n = length; n < ret.length; n++) {
						for (r = 0; r < length; r++) {
							if (ret[r] === ret[n]) {
								ret.splice(n--, 1);
								break;
							}
						}
					}
				}
			}
			return ret;
		},
		has: function (target) {
			var i,
				targets = jQuery(target, this),
				len = targets.length;
			return this.filter(function () {
				for (i = 0; i < len; i++) {
					if (jQuery.contains(this, targets[i])) {
						return true;
					}
				}
			});
		},
		not: function (selector) {
			return this.pushStack(winnow(this, selector, false), "not", selector);
		},
		filter: function (selector) {
			return this.pushStack(winnow(this, selector, true), "filter", selector);
		},
		is: function (selector) {
			return (
				!!selector &&
				(typeof selector === "string"
					? rneedsContext.test(selector)
						? jQuery(selector, this.context).index(this[0]) >= 0
						: jQuery.filter(selector, this).length > 0
					: this.filter(selector).length > 0)
			);
		},
		closest: function (selectors, context) {
			var cur,
				i = 0,
				l = this.length,
				ret = [],
				pos =
					rneedsContext.test(selectors) || typeof selectors !== "string"
						? jQuery(selectors, context || this.context)
						: 0;
			for (; i < l; i++) {
				cur = this[i];
				while (
					cur &&
					cur.ownerDocument &&
					cur !== context &&
					cur.nodeType !== 11
				) {
					if (
						pos
							? pos.index(cur) > -1
							: jQuery.find.matchesSelector(cur, selectors)
					) {
						ret.push(cur);
						break;
					}
					cur = cur.parentNode;
				}
			}
			ret = ret.length > 1 ? jQuery.unique(ret) : ret;
			return this.pushStack(ret, "closest", selectors);
		},
		index: function (elem) {
			if (!elem) {
				return this[0] && this[0].parentNode ? this.prevAll().length : -1;
			}
			if (typeof elem === "string") {
				return jQuery.inArray(this[0], jQuery(elem));
			}
			return jQuery.inArray(elem.jquery ? elem[0] : elem, this);
		},
		add: function (selector, context) {
			var set =
					typeof selector === "string"
						? jQuery(selector, context)
						: jQuery.makeArray(
								selector && selector.nodeType ? [selector] : selector
						  ),
				all = jQuery.merge(this.get(), set);
			return this.pushStack(
				isDisconnected(set[0]) || isDisconnected(all[0])
					? all
					: jQuery.unique(all)
			);
		},
		addBack: function (selector) {
			return this.add(
				selector == null ? this.prevObject : this.prevObject.filter(selector)
			);
		},
	});
	jQuery.fn.andSelf = jQuery.fn.addBack;

	function isDisconnected(node) {
		return !node || !node.parentNode || node.parentNode.nodeType === 11;
	}

	function sibling(cur, dir) {
		do {
			cur = cur[dir];
		} while (cur && cur.nodeType !== 1);
		return cur;
	}
	jQuery.each(
		{
			parent: function (elem) {
				var parent = elem.parentNode;
				return parent && parent.nodeType !== 11 ? parent : null;
			},
			parents: function (elem) {
				return jQuery.dir(elem, "parentNode");
			},
			parentsUntil: function (elem, i, until) {
				return jQuery.dir(elem, "parentNode", until);
			},
			next: function (elem) {
				return sibling(elem, "nextSibling");
			},
			prev: function (elem) {
				return sibling(elem, "previousSibling");
			},
			nextAll: function (elem) {
				return jQuery.dir(elem, "nextSibling");
			},
			prevAll: function (elem) {
				return jQuery.dir(elem, "previousSibling");
			},
			nextUntil: function (elem, i, until) {
				return jQuery.dir(elem, "nextSibling", until);
			},
			prevUntil: function (elem, i, until) {
				return jQuery.dir(elem, "previousSibling", until);
			},
			siblings: function (elem) {
				return jQuery.sibling((elem.parentNode || {}).firstChild, elem);
			},
			children: function (elem) {
				return jQuery.sibling(elem.firstChild);
			},
			contents: function (elem) {
				return jQuery.nodeName(elem, "iframe")
					? elem.contentDocument || elem.contentWindow.document
					: jQuery.merge([], elem.childNodes);
			},
		},
		function (name, fn) {
			jQuery.fn[name] = function (until, selector) {
				var ret = jQuery.map(this, fn, until);
				if (!runtil.test(name)) {
					selector = until;
				}
				if (selector && typeof selector === "string") {
					ret = jQuery.filter(selector, ret);
				}
				ret =
					this.length > 1 && !guaranteedUnique[name] ? jQuery.unique(ret) : ret;
				if (this.length > 1 && rparentsprev.test(name)) {
					ret = ret.reverse();
				}
				return this.pushStack(ret, name, core_slice.call(arguments).join(","));
			};
		}
	);
	jQuery.extend({
		filter: function (expr, elems, not) {
			if (not) {
				expr = ":not(" + expr + ")";
			}
			return elems.length === 1
				? jQuery.find.matchesSelector(elems[0], expr)
					? [elems[0]]
					: []
				: jQuery.find.matches(expr, elems);
		},
		dir: function (elem, dir, until) {
			var matched = [],
				cur = elem[dir];
			while (
				cur &&
				cur.nodeType !== 9 &&
				(until === undefined || cur.nodeType !== 1 || !jQuery(cur).is(until))
			) {
				if (cur.nodeType === 1) {
					matched.push(cur);
				}
				cur = cur[dir];
			}
			return matched;
		},
		sibling: function (n, elem) {
			var r = [];
			for (; n; n = n.nextSibling) {
				if (n.nodeType === 1 && n !== elem) {
					r.push(n);
				}
			}
			return r;
		},
	});

	function winnow(elements, qualifier, keep) {
		qualifier = qualifier || 0;
		if (jQuery.isFunction(qualifier)) {
			return jQuery.grep(elements, function (elem, i) {
				var retVal = !!qualifier.call(elem, i, elem);
				return retVal === keep;
			});
		} else if (qualifier.nodeType) {
			return jQuery.grep(elements, function (elem, i) {
				return (elem === qualifier) === keep;
			});
		} else if (typeof qualifier === "string") {
			var filtered = jQuery.grep(elements, function (elem) {
				return elem.nodeType === 1;
			});
			if (isSimple.test(qualifier)) {
				return jQuery.filter(qualifier, filtered, !keep);
			} else {
				qualifier = jQuery.filter(qualifier, filtered);
			}
		}
		return jQuery.grep(elements, function (elem, i) {
			return jQuery.inArray(elem, qualifier) >= 0 === keep;
		});
	}

	function createSafeFragment(document) {
		var list = nodeNames.split("|"),
			safeFrag = document.createDocumentFragment();
		if (safeFrag.createElement) {
			while (list.length) {
				safeFrag.createElement(list.pop());
			}
		}
		return safeFrag;
	}
	var nodeNames =
			"abbr|article|aside|audio|bdi|canvas|data|datalist|details|figcaption|figure|footer|" +
			"header|hgroup|mark|meter|nav|output|progress|section|summary|time|video",
		rinlinejQuery = / jQuery\d+="(?:null|\d+)"/g,
		rleadingWhitespace = /^\s+/,
		rxhtmlTag =
			/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,
		rtagName = /<([\w:]+)/,
		rtbody = /<tbody/i,
		rhtml = /<|&#?\w+;/,
		rnoInnerhtml = /<(?:script|style|link)/i,
		rnocache = /<(?:script|object|embed|option|style)/i,
		rnoshimcache = new RegExp("<(?:" + nodeNames + ")[\\s/>]", "i"),
		rcheckableType = /^(?:checkbox|radio)$/,
		rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
		rscriptType = /\/(java|ecma)script/i,
		rcleanScript = /^\s*<!(?:\[CDATA\[|\-\-)|[\]\-]{2}>\s*$/g,
		wrapMap = {
			option: [1, "<select multiple='multiple'>", "</select>"],
			legend: [1, "<fieldset>", "</fieldset>"],
			thead: [1, "<table>", "</table>"],
			tr: [2, "<table><tbody>", "</tbody></table>"],
			td: [3, "<table><tbody><tr>", "</tr></tbody></table>"],
			col: [2, "<table><tbody></tbody><colgroup>", "</colgroup></table>"],
			area: [1, "<map>", "</map>"],
			_default: [0, "", ""],
		},
		safeFragment = createSafeFragment(document),
		fragmentDiv = safeFragment.appendChild(document.createElement("div"));
	wrapMap.optgroup = wrapMap.option;
	wrapMap.tbody =
		wrapMap.tfoot =
		wrapMap.colgroup =
		wrapMap.caption =
			wrapMap.thead;
	wrapMap.th = wrapMap.td;
	if (!jQuery.support.htmlSerialize) {
		wrapMap._default = [1, "X<div>", "</div>"];
	}
	jQuery.fn.extend({
		text: function (value) {
			return jQuery.access(
				this,
				function (value) {
					return value === undefined
						? jQuery.text(this)
						: this.empty().append(
								((this[0] && this[0].ownerDocument) || document).createTextNode(
									value
								)
						  );
				},
				null,
				value,
				arguments.length
			);
		},
		wrapAll: function (html) {
			if (jQuery.isFunction(html)) {
				return this.each(function (i) {
					jQuery(this).wrapAll(html.call(this, i));
				});
			}
			if (this[0]) {
				var wrap = jQuery(html, this[0].ownerDocument).eq(0).clone(true);
				if (this[0].parentNode) {
					wrap.insertBefore(this[0]);
				}
				wrap
					.map(function () {
						var elem = this;
						while (elem.firstChild && elem.firstChild.nodeType === 1) {
							elem = elem.firstChild;
						}
						return elem;
					})
					.append(this);
			}
			return this;
		},
		wrapInner: function (html) {
			if (jQuery.isFunction(html)) {
				return this.each(function (i) {
					jQuery(this).wrapInner(html.call(this, i));
				});
			}
			return this.each(function () {
				var self = jQuery(this),
					contents = self.contents();
				if (contents.length) {
					contents.wrapAll(html);
				} else {
					self.append(html);
				}
			});
		},
		wrap: function (html) {
			var isFunction = jQuery.isFunction(html);
			return this.each(function (i) {
				jQuery(this).wrapAll(isFunction ? html.call(this, i) : html);
			});
		},
		unwrap: function () {
			return this.parent()
				.each(function () {
					if (!jQuery.nodeName(this, "body")) {
						jQuery(this).replaceWith(this.childNodes);
					}
				})
				.end();
		},
		append: function () {
			return this.domManip(arguments, true, function (elem) {
				if (this.nodeType === 1 || this.nodeType === 11) {
					this.appendChild(elem);
				}
			});
		},
		prepend: function () {
			return this.domManip(arguments, true, function (elem) {
				if (this.nodeType === 1 || this.nodeType === 11) {
					this.insertBefore(elem, this.firstChild);
				}
			});
		},
		before: function () {
			if (!isDisconnected(this[0])) {
				return this.domManip(arguments, false, function (elem) {
					this.parentNode.insertBefore(elem, this);
				});
			}
			if (arguments.length) {
				var set = jQuery.clean(arguments);
				return this.pushStack(jQuery.merge(set, this), "before", this.selector);
			}
		},
		after: function () {
			if (!isDisconnected(this[0])) {
				return this.domManip(arguments, false, function (elem) {
					this.parentNode.insertBefore(elem, this.nextSibling);
				});
			}
			if (arguments.length) {
				var set = jQuery.clean(arguments);
				return this.pushStack(jQuery.merge(this, set), "after", this.selector);
			}
		},
		remove: function (selector, keepData) {
			var elem,
				i = 0;
			for (; (elem = this[i]) != null; i++) {
				if (!selector || jQuery.filter(selector, [elem]).length) {
					if (!keepData && elem.nodeType === 1) {
						jQuery.cleanData(elem.getElementsByTagName("*"));
						jQuery.cleanData([elem]);
					}
					if (elem.parentNode) {
						elem.parentNode.removeChild(elem);
					}
				}
			}
			return this;
		},
		empty: function () {
			var elem,
				i = 0;
			for (; (elem = this[i]) != null; i++) {
				if (elem.nodeType === 1) {
					jQuery.cleanData(elem.getElementsByTagName("*"));
				}
				while (elem.firstChild) {
					elem.removeChild(elem.firstChild);
				}
			}
			return this;
		},
		clone: function (dataAndEvents, deepDataAndEvents) {
			dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
			deepDataAndEvents =
				deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;
			return this.map(function () {
				return jQuery.clone(this, dataAndEvents, deepDataAndEvents);
			});
		},
		html: function (value) {
			return jQuery.access(
				this,
				function (value) {
					var elem = this[0] || {},
						i = 0,
						l = this.length;
					if (value === undefined) {
						return elem.nodeType === 1
							? elem.innerHTML.replace(rinlinejQuery, "")
							: undefined;
					}
					if (
						typeof value === "string" &&
						!rnoInnerhtml.test(value) &&
						(jQuery.support.htmlSerialize || !rnoshimcache.test(value)) &&
						(jQuery.support.leadingWhitespace ||
							!rleadingWhitespace.test(value)) &&
						!wrapMap[(rtagName.exec(value) || ["", ""])[1].toLowerCase()]
					) {
						value = value.replace(rxhtmlTag, "<$1></$2>");
						try {
							for (; i < l; i++) {
								elem = this[i] || {};
								if (elem.nodeType === 1) {
									jQuery.cleanData(elem.getElementsByTagName("*"));
									elem.innerHTML = value;
								}
							}
							elem = 0;
						} catch (e) {}
					}
					if (elem) {
						this.empty().append(value);
					}
				},
				null,
				value,
				arguments.length
			);
		},
		replaceWith: function (value) {
			if (!isDisconnected(this[0])) {
				if (jQuery.isFunction(value)) {
					return this.each(function (i) {
						var self = jQuery(this),
							old = self.html();
						self.replaceWith(value.call(this, i, old));
					});
				}
				if (typeof value !== "string") {
					value = jQuery(value).detach();
				}
				return this.each(function () {
					var next = this.nextSibling,
						parent = this.parentNode;
					jQuery(this).remove();
					if (next) {
						jQuery(next).before(value);
					} else {
						jQuery(parent).append(value);
					}
				});
			}
			return this.length
				? this.pushStack(
						jQuery(jQuery.isFunction(value) ? value() : value),
						"replaceWith",
						value
				  )
				: this;
		},
		detach: function (selector) {
			return this.remove(selector, true);
		},
		domManip: function (args, table, callback) {
			args = [].concat.apply([], args);
			var results,
				first,
				fragment,
				iNoClone,
				i = 0,
				value = args[0],
				scripts = [],
				l = this.length;
			if (
				!jQuery.support.checkClone &&
				l > 1 &&
				typeof value === "string" &&
				rchecked.test(value)
			) {
				return this.each(function () {
					jQuery(this).domManip(args, table, callback);
				});
			}
			if (jQuery.isFunction(value)) {
				return this.each(function (i) {
					var self = jQuery(this);
					args[0] = value.call(this, i, table ? self.html() : undefined);
					self.domManip(args, table, callback);
				});
			}
			if (this[0]) {
				results = jQuery.buildFragment(args, this, scripts);
				fragment = results.fragment;
				first = fragment.firstChild;
				if (fragment.childNodes.length === 1) {
					fragment = first;
				}
				if (first) {
					table = table && jQuery.nodeName(first, "tr");
					for (iNoClone = results.cacheable || l - 1; i < l; i++) {
						callback.call(
							table && jQuery.nodeName(this[i], "table")
								? findOrAppend(this[i], "tbody")
								: this[i],
							i === iNoClone ? fragment : jQuery.clone(fragment, true, true)
						);
					}
				}
				fragment = first = null;
				if (scripts.length) {
					jQuery.each(scripts, function (i, elem) {
						if (elem.src) {
							if (jQuery.ajax) {
								jQuery.ajax({
									url: elem.src,
									type: "GET",
									dataType: "script",
									async: false,
									global: false,
									throws: true,
								});
							} else {
								jQuery.error("no ajax");
							}
						} else {
							jQuery.globalEval(
								(elem.text || elem.textContent || elem.innerHTML || "").replace(
									rcleanScript,
									""
								)
							);
						}
						if (elem.parentNode) {
							elem.parentNode.removeChild(elem);
						}
					});
				}
			}
			return this;
		},
	});

	function findOrAppend(elem, tag) {
		return (
			elem.getElementsByTagName(tag)[0] ||
			elem.appendChild(elem.ownerDocument.createElement(tag))
		);
	}

	function cloneCopyEvent(src, dest) {
		if (dest.nodeType !== 1 || !jQuery.hasData(src)) {
			return;
		}
		var type,
			i,
			l,
			oldData = jQuery._data(src),
			curData = jQuery._data(dest, oldData),
			events = oldData.events;
		if (events) {
			delete curData.handle;
			curData.events = {};
			for (type in events) {
				for (i = 0, l = events[type].length; i < l; i++) {
					jQuery.event.add(dest, type, events[type][i]);
				}
			}
		}
		if (curData.data) {
			curData.data = jQuery.extend({}, curData.data);
		}
	}

	function cloneFixAttributes(src, dest) {
		var nodeName;
		if (dest.nodeType !== 1) {
			return;
		}
		if (dest.clearAttributes) {
			dest.clearAttributes();
		}
		if (dest.mergeAttributes) {
			dest.mergeAttributes(src);
		}
		nodeName = dest.nodeName.toLowerCase();
		if (nodeName === "object") {
			if (dest.parentNode) {
				dest.outerHTML = src.outerHTML;
			}
			if (
				jQuery.support.html5Clone &&
				src.innerHTML &&
				!jQuery.trim(dest.innerHTML)
			) {
				dest.innerHTML = src.innerHTML;
			}
		} else if (nodeName === "input" && rcheckableType.test(src.type)) {
			dest.defaultChecked = dest.checked = src.checked;
			if (dest.value !== src.value) {
				dest.value = src.value;
			}
		} else if (nodeName === "option") {
			dest.selected = src.defaultSelected;
		} else if (nodeName === "input" || nodeName === "textarea") {
			dest.defaultValue = src.defaultValue;
		} else if (nodeName === "script" && dest.text !== src.text) {
			dest.text = src.text;
		}
		dest.removeAttribute(jQuery.expando);
	}
	jQuery.buildFragment = function (args, context, scripts) {
		var fragment,
			cacheable,
			cachehit,
			first = args[0];
		context = context || document;
		context = (!context.nodeType && context[0]) || context;
		context = context.ownerDocument || context;
		if (
			args.length === 1 &&
			typeof first === "string" &&
			first.length < 512 &&
			context === document &&
			first.charAt(0) === "<" &&
			!rnocache.test(first) &&
			(jQuery.support.checkClone || !rchecked.test(first)) &&
			(jQuery.support.html5Clone || !rnoshimcache.test(first))
		) {
			cacheable = true;
			fragment = jQuery.fragments[first];
			cachehit = fragment !== undefined;
		}
		if (!fragment) {
			fragment = context.createDocumentFragment();
			jQuery.clean(args, context, fragment, scripts);
			if (cacheable) {
				jQuery.fragments[first] = cachehit && fragment;
			}
		}
		return {
			fragment: fragment,
			cacheable: cacheable,
		};
	};
	jQuery.fragments = {};
	jQuery.each(
		{
			appendTo: "append",
			prependTo: "prepend",
			insertBefore: "before",
			insertAfter: "after",
			replaceAll: "replaceWith",
		},
		function (name, original) {
			jQuery.fn[name] = function (selector) {
				var elems,
					i = 0,
					ret = [],
					insert = jQuery(selector),
					l = insert.length,
					parent = this.length === 1 && this[0].parentNode;
				if (
					(parent == null ||
						(parent &&
							parent.nodeType === 11 &&
							parent.childNodes.length === 1)) &&
					l === 1
				) {
					insert[original](this[0]);
					return this;
				} else {
					for (; i < l; i++) {
						elems = (i > 0 ? this.clone(true) : this).get();
						jQuery(insert[i])[original](elems);
						ret = ret.concat(elems);
					}
					return this.pushStack(ret, name, insert.selector);
				}
			};
		}
	);

	function getAll(elem) {
		if (typeof elem.getElementsByTagName !== "undefined") {
			return elem.getElementsByTagName("*");
		} else if (typeof elem.querySelectorAll !== "undefined") {
			return elem.querySelectorAll("*");
		} else {
			return [];
		}
	}

	function fixDefaultChecked(elem) {
		if (rcheckableType.test(elem.type)) {
			elem.defaultChecked = elem.checked;
		}
	}
	jQuery.extend({
		clone: function (elem, dataAndEvents, deepDataAndEvents) {
			var srcElements, destElements, i, clone;
			if (
				jQuery.support.html5Clone ||
				jQuery.isXMLDoc(elem) ||
				!rnoshimcache.test("<" + elem.nodeName + ">")
			) {
				clone = elem.cloneNode(true);
			} else {
				fragmentDiv.innerHTML = elem.outerHTML;
				fragmentDiv.removeChild((clone = fragmentDiv.firstChild));
			}
			if (
				(!jQuery.support.noCloneEvent || !jQuery.support.noCloneChecked) &&
				(elem.nodeType === 1 || elem.nodeType === 11) &&
				!jQuery.isXMLDoc(elem)
			) {
				cloneFixAttributes(elem, clone);
				srcElements = getAll(elem);
				destElements = getAll(clone);
				for (i = 0; srcElements[i]; ++i) {
					if (destElements[i]) {
						cloneFixAttributes(srcElements[i], destElements[i]);
					}
				}
			}
			if (dataAndEvents) {
				cloneCopyEvent(elem, clone);
				if (deepDataAndEvents) {
					srcElements = getAll(elem);
					destElements = getAll(clone);
					for (i = 0; srcElements[i]; ++i) {
						cloneCopyEvent(srcElements[i], destElements[i]);
					}
				}
			}
			srcElements = destElements = null;
			return clone;
		},
		clean: function (elems, context, fragment, scripts) {
			var i,
				j,
				elem,
				tag,
				wrap,
				depth,
				div,
				hasBody,
				tbody,
				len,
				handleScript,
				jsTags,
				safe = context === document && safeFragment,
				ret = [];
			if (!context || typeof context.createDocumentFragment === "undefined") {
				context = document;
			}
			for (i = 0; (elem = elems[i]) != null; i++) {
				if (typeof elem === "number") {
					elem += "";
				}
				if (!elem) {
					continue;
				}
				if (typeof elem === "string") {
					if (!rhtml.test(elem)) {
						elem = context.createTextNode(elem);
					} else {
						safe = safe || createSafeFragment(context);
						div = context.createElement("div");
						safe.appendChild(div);
						elem = elem.replace(rxhtmlTag, "<$1></$2>");
						tag = (rtagName.exec(elem) || ["", ""])[1].toLowerCase();
						wrap = wrapMap[tag] || wrapMap._default;
						depth = wrap[0];
						div.innerHTML = wrap[1] + elem + wrap[2];
						while (depth--) {
							div = div.lastChild;
						}
						if (!jQuery.support.tbody) {
							hasBody = rtbody.test(elem);
							tbody =
								tag === "table" && !hasBody
									? div.firstChild && div.firstChild.childNodes
									: wrap[1] === "<table>" && !hasBody
									? div.childNodes
									: [];
							for (j = tbody.length - 1; j >= 0; --j) {
								if (
									jQuery.nodeName(tbody[j], "tbody") &&
									!tbody[j].childNodes.length
								) {
									tbody[j].parentNode.removeChild(tbody[j]);
								}
							}
						}
						if (
							!jQuery.support.leadingWhitespace &&
							rleadingWhitespace.test(elem)
						) {
							div.insertBefore(
								context.createTextNode(rleadingWhitespace.exec(elem)[0]),
								div.firstChild
							);
						}
						elem = div.childNodes;
						div.parentNode.removeChild(div);
					}
				}
				if (elem.nodeType) {
					ret.push(elem);
				} else {
					jQuery.merge(ret, elem);
				}
			}
			if (div) {
				elem = div = safe = null;
			}
			if (!jQuery.support.appendChecked) {
				for (i = 0; (elem = ret[i]) != null; i++) {
					if (jQuery.nodeName(elem, "input")) {
						fixDefaultChecked(elem);
					} else if (typeof elem.getElementsByTagName !== "undefined") {
						jQuery.grep(elem.getElementsByTagName("input"), fixDefaultChecked);
					}
				}
			}
			if (fragment) {
				handleScript = function (elem) {
					if (!elem.type || rscriptType.test(elem.type)) {
						return scripts
							? scripts.push(
									elem.parentNode ? elem.parentNode.removeChild(elem) : elem
							  )
							: fragment.appendChild(elem);
					}
				};
				for (i = 0; (elem = ret[i]) != null; i++) {
					if (!(jQuery.nodeName(elem, "script") && handleScript(elem))) {
						fragment.appendChild(elem);
						if (typeof elem.getElementsByTagName !== "undefined") {
							jsTags = jQuery.grep(
								jQuery.merge([], elem.getElementsByTagName("script")),
								handleScript
							);
							ret.splice.apply(ret, [i + 1, 0].concat(jsTags));
							i += jsTags.length;
						}
					}
				}
			}
			return ret;
		},
		cleanData: function (elems, acceptData) {
			var data,
				id,
				elem,
				type,
				i = 0,
				internalKey = jQuery.expando,
				cache = jQuery.cache,
				deleteExpando = jQuery.support.deleteExpando,
				special = jQuery.event.special;
			for (; (elem = elems[i]) != null; i++) {
				if (acceptData || jQuery.acceptData(elem)) {
					id = elem[internalKey];
					data = id && cache[id];
					if (data) {
						if (data.events) {
							for (type in data.events) {
								if (special[type]) {
									jQuery.event.remove(elem, type);
								} else {
									jQuery.removeEvent(elem, type, data.handle);
								}
							}
						}
						if (cache[id]) {
							delete cache[id];
							if (deleteExpando) {
								delete elem[internalKey];
							} else if (elem.removeAttribute) {
								elem.removeAttribute(internalKey);
							} else {
								elem[internalKey] = null;
							}
							jQuery.deletedIds.push(id);
						}
					}
				}
			}
		},
	});
	(function () {
		var matched, browser;
		jQuery.uaMatch = function (ua) {
			ua = ua.toLowerCase();
			var match =
				/(chrome)[ \/]([\w.]+)/.exec(ua) ||
				/(webkit)[ \/]([\w.]+)/.exec(ua) ||
				/(opera)(?:.*version|)[ \/]([\w.]+)/.exec(ua) ||
				/(msie) ([\w.]+)/.exec(ua) ||
				(ua.indexOf("compatible") < 0 &&
					/(mozilla)(?:.*? rv:([\w.]+)|)/.exec(ua)) ||
				[];
			return {
				browser: match[1] || "",
				version: match[2] || "0",
			};
		};
		matched = jQuery.uaMatch(navigator.userAgent);
		browser = {};
		if (matched.browser) {
			browser[matched.browser] = true;
			browser.version = matched.version;
		}
		if (browser.chrome) {
			browser.webkit = true;
		} else if (browser.webkit) {
			browser.safari = true;
		}
		jQuery.browser = browser;
		jQuery.sub = function () {
			function jQuerySub(selector, context) {
				return new jQuerySub.fn.init(selector, context);
			}
			jQuery.extend(true, jQuerySub, this);
			jQuerySub.superclass = this;
			jQuerySub.fn = jQuerySub.prototype = this();
			jQuerySub.fn.constructor = jQuerySub;
			jQuerySub.sub = this.sub;
			jQuerySub.fn.init = function init(selector, context) {
				if (
					context &&
					context instanceof jQuery &&
					!(context instanceof jQuerySub)
				) {
					context = jQuerySub(context);
				}
				return jQuery.fn.init.call(this, selector, context, rootjQuerySub);
			};
			jQuerySub.fn.init.prototype = jQuerySub.fn;
			var rootjQuerySub = jQuerySub(document);
			return jQuerySub;
		};
	})();
	var curCSS,
		iframe,
		iframeDoc,
		ralpha = /alpha\([^)]*\)/i,
		ropacity = /opacity=([^)]*)/,
		rposition = /^(top|right|bottom|left)$/,
		rdisplayswap = /^(none|table(?!-c[ea]).+)/,
		rmargin = /^margin/,
		rnumsplit = new RegExp("^(" + core_pnum + ")(.*)$", "i"),
		rnumnonpx = new RegExp("^(" + core_pnum + ")(?!px)[a-z%]+$", "i"),
		rrelNum = new RegExp("^([-+])=(" + core_pnum + ")", "i"),
		elemdisplay = {},
		cssShow = {
			position: "absolute",
			visibility: "hidden",
			display: "block",
		},
		cssNormalTransform = {
			letterSpacing: 0,
			fontWeight: 400,
		},
		cssExpand = ["Top", "Right", "Bottom", "Left"],
		cssPrefixes = ["Webkit", "O", "Moz", "ms"],
		eventsToggle = jQuery.fn.toggle;

	function vendorPropName(style, name) {
		if (name in style) {
			return name;
		}
		var capName = name.charAt(0).toUpperCase() + name.slice(1),
			origName = name,
			i = cssPrefixes.length;
		while (i--) {
			name = cssPrefixes[i] + capName;
			if (name in style) {
				return name;
			}
		}
		return origName;
	}

	function isHidden(elem, el) {
		elem = el || elem;
		return (
			jQuery.css(elem, "display") === "none" ||
			!jQuery.contains(elem.ownerDocument, elem)
		);
	}

	function showHide(elements, show) {
		var elem,
			display,
			values = [],
			index = 0,
			length = elements.length;
		for (; index < length; index++) {
			elem = elements[index];
			if (!elem.style) {
				continue;
			}
			values[index] = jQuery._data(elem, "olddisplay");
			if (show) {
				if (!values[index] && elem.style.display === "none") {
					elem.style.display = "";
				}
				if (elem.style.display === "" && isHidden(elem)) {
					values[index] = jQuery._data(
						elem,
						"olddisplay",
						css_defaultDisplay(elem.nodeName)
					);
				}
			} else {
				display = curCSS(elem, "display");
				if (!values[index] && display !== "none") {
					jQuery._data(elem, "olddisplay", display);
				}
			}
		}
		for (index = 0; index < length; index++) {
			elem = elements[index];
			if (!elem.style) {
				continue;
			}
			if (!show || elem.style.display === "none" || elem.style.display === "") {
				elem.style.display = show ? values[index] || "" : "none";
			}
		}
		return elements;
	}
	jQuery.fn.extend({
		css: function (name, value) {
			return jQuery.access(
				this,
				function (elem, name, value) {
					return value !== undefined
						? jQuery.style(elem, name, value)
						: jQuery.css(elem, name);
				},
				name,
				value,
				arguments.length > 1
			);
		},
		show: function () {
			return showHide(this, true);
		},
		hide: function () {
			return showHide(this);
		},
		toggle: function (state, fn2) {
			var bool = typeof state === "boolean";
			if (jQuery.isFunction(state) && jQuery.isFunction(fn2)) {
				return eventsToggle.apply(this, arguments);
			}
			return this.each(function () {
				if (bool ? state : isHidden(this)) {
					jQuery(this).show();
				} else {
					jQuery(this).hide();
				}
			});
		},
	});
	jQuery.extend({
		cssHooks: {
			opacity: {
				get: function (elem, computed) {
					if (computed) {
						var ret = curCSS(elem, "opacity");
						return ret === "" ? "1" : ret;
					}
				},
			},
		},
		cssNumber: {
			fillOpacity: true,
			fontWeight: true,
			lineHeight: true,
			opacity: true,
			orphans: true,
			widows: true,
			zIndex: true,
			zoom: true,
		},
		cssProps: {
			float: jQuery.support.cssFloat ? "cssFloat" : "styleFloat",
		},
		style: function (elem, name, value, extra) {
			if (!elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style) {
				return;
			}
			var ret,
				type,
				hooks,
				origName = jQuery.camelCase(name),
				style = elem.style;
			name =
				jQuery.cssProps[origName] ||
				(jQuery.cssProps[origName] = vendorPropName(style, origName));
			hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];
			if (value !== undefined) {
				type = typeof value;
				if (type === "string" && (ret = rrelNum.exec(value))) {
					value = (ret[1] + 1) * ret[2] + parseFloat(jQuery.css(elem, name));
					type = "number";
				}
				if (value == null || (type === "number" && isNaN(value))) {
					return;
				}
				if (type === "number" && !jQuery.cssNumber[origName]) {
					value += "px";
				}
				if (
					!hooks ||
					!("set" in hooks) ||
					(value = hooks.set(elem, value, extra)) !== undefined
				) {
					try {
						style[name] = value;
					} catch (e) {}
				}
			} else {
				if (
					hooks &&
					"get" in hooks &&
					(ret = hooks.get(elem, false, extra)) !== undefined
				) {
					return ret;
				}
				return style[name];
			}
		},
		css: function (elem, name, numeric, extra) {
			var val,
				num,
				hooks,
				origName = jQuery.camelCase(name);
			name =
				jQuery.cssProps[origName] ||
				(jQuery.cssProps[origName] = vendorPropName(elem.style, origName));
			hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];
			if (hooks && "get" in hooks) {
				val = hooks.get(elem, true, extra);
			}
			if (val === undefined) {
				val = curCSS(elem, name);
			}
			if (val === "normal" && name in cssNormalTransform) {
				val = cssNormalTransform[name];
			}
			if (numeric || extra !== undefined) {
				num = parseFloat(val);
				return numeric || jQuery.isNumeric(num) ? num || 0 : val;
			}
			return val;
		},
		swap: function (elem, options, callback) {
			var ret,
				name,
				old = {};
			for (name in options) {
				old[name] = elem.style[name];
				elem.style[name] = options[name];
			}
			ret = callback.call(elem);
			for (name in options) {
				elem.style[name] = old[name];
			}
			return ret;
		},
	});
	if (window.getComputedStyle) {
		curCSS = function (elem, name) {
			var ret,
				width,
				minWidth,
				maxWidth,
				computed = window.getComputedStyle(elem, null),
				style = elem.style;
			if (computed) {
				ret = computed[name];
				if (ret === "" && !jQuery.contains(elem.ownerDocument, elem)) {
					ret = jQuery.style(elem, name);
				}
				if (rnumnonpx.test(ret) && rmargin.test(name)) {
					width = style.width;
					minWidth = style.minWidth;
					maxWidth = style.maxWidth;
					style.minWidth = style.maxWidth = style.width = ret;
					ret = computed.width;
					style.width = width;
					style.minWidth = minWidth;
					style.maxWidth = maxWidth;
				}
			}
			return ret;
		};
	} else if (document.documentElement.currentStyle) {
		curCSS = function (elem, name) {
			var left,
				rsLeft,
				ret = elem.currentStyle && elem.currentStyle[name],
				style = elem.style;
			if (ret == null && style && style[name]) {
				ret = style[name];
			}
			if (rnumnonpx.test(ret) && !rposition.test(name)) {
				left = style.left;
				rsLeft = elem.runtimeStyle && elem.runtimeStyle.left;
				if (rsLeft) {
					elem.runtimeStyle.left = elem.currentStyle.left;
				}
				style.left = name === "fontSize" ? "1em" : ret;
				ret = style.pixelLeft + "px";
				style.left = left;
				if (rsLeft) {
					elem.runtimeStyle.left = rsLeft;
				}
			}
			return ret === "" ? "auto" : ret;
		};
	}

	function setPositiveNumber(elem, value, subtract) {
		var matches = rnumsplit.exec(value);
		return matches
			? Math.max(0, matches[1] - (subtract || 0)) + (matches[2] || "px")
			: value;
	}

	function augmentWidthOrHeight(elem, name, extra, isBorderBox) {
		var i =
				extra === (isBorderBox ? "border" : "content")
					? 4
					: name === "width"
					? 1
					: 0,
			val = 0;
		for (; i < 4; i += 2) {
			if (extra === "margin") {
				val += jQuery.css(elem, extra + cssExpand[i], true);
			}
			if (isBorderBox) {
				if (extra === "content") {
					val -= parseFloat(curCSS(elem, "padding" + cssExpand[i])) || 0;
				}
				if (extra !== "margin") {
					val -=
						parseFloat(curCSS(elem, "border" + cssExpand[i] + "Width")) || 0;
				}
			} else {
				val += parseFloat(curCSS(elem, "padding" + cssExpand[i])) || 0;
				if (extra !== "padding") {
					val +=
						parseFloat(curCSS(elem, "border" + cssExpand[i] + "Width")) || 0;
				}
			}
		}
		return val;
	}

	function getWidthOrHeight(elem, name, extra) {
		var val = name === "width" ? elem.offsetWidth : elem.offsetHeight,
			valueIsBorderBox = true,
			isBorderBox =
				jQuery.support.boxSizing &&
				jQuery.css(elem, "boxSizing") === "border-box";
		if (val <= 0 || val == null) {
			val = curCSS(elem, name);
			if (val < 0 || val == null) {
				val = elem.style[name];
			}
			if (rnumnonpx.test(val)) {
				return val;
			}
			valueIsBorderBox =
				isBorderBox &&
				(jQuery.support.boxSizingReliable || val === elem.style[name]);
			val = parseFloat(val) || 0;
		}
		return (
			val +
			augmentWidthOrHeight(
				elem,
				name,
				extra || (isBorderBox ? "border" : "content"),
				valueIsBorderBox
			) +
			"px"
		);
	}

	function css_defaultDisplay(nodeName) {
		if (elemdisplay[nodeName]) {
			return elemdisplay[nodeName];
		}
		var elem = jQuery("<" + nodeName + ">").appendTo(document.body),
			display = elem.css("display");
		elem.remove();
		if (display === "none" || display === "") {
			iframe = document.body.appendChild(
				iframe ||
					jQuery.extend(document.createElement("iframe"), {
						frameBorder: 0,
						width: 0,
						height: 0,
					})
			);
			if (!iframeDoc || !iframe.createElement) {
				iframeDoc = (iframe.contentWindow || iframe.contentDocument).document;
				iframeDoc.write("<!doctype html><html><body>");
				iframeDoc.close();
			}
			elem = iframeDoc.body.appendChild(iframeDoc.createElement(nodeName));
			display = curCSS(elem, "display");
			document.body.removeChild(iframe);
		}
		elemdisplay[nodeName] = display;
		return display;
	}
	jQuery.each(["height", "width"], function (i, name) {
		jQuery.cssHooks[name] = {
			get: function (elem, computed, extra) {
				if (computed) {
					if (
						elem.offsetWidth === 0 &&
						rdisplayswap.test(curCSS(elem, "display"))
					) {
						return jQuery.swap(elem, cssShow, function () {
							return getWidthOrHeight(elem, name, extra);
						});
					} else {
						return getWidthOrHeight(elem, name, extra);
					}
				}
			},
			set: function (elem, value, extra) {
				return setPositiveNumber(
					elem,
					value,
					extra
						? augmentWidthOrHeight(
								elem,
								name,
								extra,
								jQuery.support.boxSizing &&
									jQuery.css(elem, "boxSizing") === "border-box"
						  )
						: 0
				);
			},
		};
	});
	if (!jQuery.support.opacity) {
		jQuery.cssHooks.opacity = {
			get: function (elem, computed) {
				return ropacity.test(
					(computed && elem.currentStyle
						? elem.currentStyle.filter
						: elem.style.filter) || ""
				)
					? 0.01 * parseFloat(RegExp.$1) + ""
					: computed
					? "1"
					: "";
			},
			set: function (elem, value) {
				var style = elem.style,
					currentStyle = elem.currentStyle,
					opacity = jQuery.isNumeric(value)
						? "alpha(opacity=" + value * 100 + ")"
						: "",
					filter = (currentStyle && currentStyle.filter) || style.filter || "";
				style.zoom = 1;
				if (
					value >= 1 &&
					jQuery.trim(filter.replace(ralpha, "")) === "" &&
					style.removeAttribute
				) {
					style.removeAttribute("filter");
					if (currentStyle && !currentStyle.filter) {
						return;
					}
				}
				style.filter = ralpha.test(filter)
					? filter.replace(ralpha, opacity)
					: filter + " " + opacity;
			},
		};
	}
	jQuery(function () {
		if (!jQuery.support.reliableMarginRight) {
			jQuery.cssHooks.marginRight = {
				get: function (elem, computed) {
					return jQuery.swap(
						elem,
						{
							display: "inline-block",
						},
						function () {
							if (computed) {
								return curCSS(elem, "marginRight");
							}
						}
					);
				},
			};
		}
		if (!jQuery.support.pixelPosition && jQuery.fn.position) {
			jQuery.each(["top", "left"], function (i, prop) {
				jQuery.cssHooks[prop] = {
					get: function (elem, computed) {
						if (computed) {
							var ret = curCSS(elem, prop);
							return rnumnonpx.test(ret)
								? jQuery(elem).position()[prop] + "px"
								: ret;
						}
					},
				};
			});
		}
	});
	if (jQuery.expr && jQuery.expr.filters) {
		jQuery.expr.filters.hidden = function (elem) {
			return (
				(elem.offsetWidth === 0 && elem.offsetHeight === 0) ||
				(!jQuery.support.reliableHiddenOffsets &&
					((elem.style && elem.style.display) || curCSS(elem, "display")) ===
						"none")
			);
		};
		jQuery.expr.filters.visible = function (elem) {
			return !jQuery.expr.filters.hidden(elem);
		};
	}
	jQuery.each(
		{
			margin: "",
			padding: "",
			border: "Width",
		},
		function (prefix, suffix) {
			jQuery.cssHooks[prefix + suffix] = {
				expand: function (value) {
					var i,
						parts = typeof value === "string" ? value.split(" ") : [value],
						expanded = {};
					for (i = 0; i < 4; i++) {
						expanded[prefix + cssExpand[i] + suffix] =
							parts[i] || parts[i - 2] || parts[0];
					}
					return expanded;
				},
			};
			if (!rmargin.test(prefix)) {
				jQuery.cssHooks[prefix + suffix].set = setPositiveNumber;
			}
		}
	);
	var r20 = /%20/g,
		rbracket = /\[\]$/,
		rCRLF = /\r?\n/g,
		rinput =
			/^(?:color|date|datetime|datetime-local|email|hidden|month|number|password|range|search|tel|text|time|url|week)$/i,
		rselectTextarea = /^(?:select|textarea)/i;
	jQuery.fn.extend({
		serialize: function () {
			return jQuery.param(this.serializeArray());
		},
		serializeArray: function () {
			return this.map(function () {
				return this.elements ? jQuery.makeArray(this.elements) : this;
			})
				.filter(function () {
					return (
						this.name &&
						!this.disabled &&
						(this.checked ||
							rselectTextarea.test(this.nodeName) ||
							rinput.test(this.type))
					);
				})
				.map(function (i, elem) {
					var val = jQuery(this).val();
					return val == null
						? null
						: jQuery.isArray(val)
						? jQuery.map(val, function (val, i) {
								return {
									name: elem.name,
									value: val.replace(rCRLF, "\r\n"),
								};
						  })
						: {
								name: elem.name,
								value: val.replace(rCRLF, "\r\n"),
						  };
				})
				.get();
		},
	});
	jQuery.param = function (a, traditional) {
		var prefix,
			s = [],
			add = function (key, value) {
				value = jQuery.isFunction(value) ? value() : value == null ? "" : value;
				s[s.length] = encodeURIComponent(key) + "=" + encodeURIComponent(value);
			};
		if (traditional === undefined) {
			traditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional;
		}
		if (jQuery.isArray(a) || (a.jquery && !jQuery.isPlainObject(a))) {
			jQuery.each(a, function () {
				add(this.name, this.value);
			});
		} else {
			for (prefix in a) {
				buildParams(prefix, a[prefix], traditional, add);
			}
		}
		return s.join("&").replace(r20, "+");
	};

	function buildParams(prefix, obj, traditional, add) {
		var name;
		if (jQuery.isArray(obj)) {
			jQuery.each(obj, function (i, v) {
				if (traditional || rbracket.test(prefix)) {
					add(prefix, v);
				} else {
					buildParams(
						prefix + "[" + (typeof v === "object" ? i : "") + "]",
						v,
						traditional,
						add
					);
				}
			});
		} else if (!traditional && jQuery.type(obj) === "object") {
			for (name in obj) {
				buildParams(prefix + "[" + name + "]", obj[name], traditional, add);
			}
		} else {
			add(prefix, obj);
		}
	}
	var ajaxLocation,
		ajaxLocParts,
		rhash = /#.*$/,
		rheaders = /^(.*?):[ \t]*([^\r\n]*)\r?$/gm,
		rlocalProtocol =
			/^(?:about|app|app\-storage|.+\-extension|file|res|widget):$/,
		rnoContent = /^(?:GET|HEAD)$/,
		rprotocol = /^\/\//,
		rquery = /\?/,
		rscript = /<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi,
		rts = /([?&])_=[^&]*/,
		rurl = /^([\w\+\.\-]+:)(?:\/\/([^\/?#:]*)(?::(\d+)|)|)/,
		_load = jQuery.fn.load,
		prefilters = {},
		transports = {},
		allTypes = ["*/"] + ["*"];
	try {
		ajaxLocation = location.href;
	} catch (e) {
		ajaxLocation = document.createElement("a");
		ajaxLocation.href = "";
		ajaxLocation = ajaxLocation.href;
	}
	ajaxLocParts = rurl.exec(ajaxLocation.toLowerCase()) || [];

	function addToPrefiltersOrTransports(structure) {
		return function (dataTypeExpression, func) {
			if (typeof dataTypeExpression !== "string") {
				func = dataTypeExpression;
				dataTypeExpression = "*";
			}
			var dataType,
				list,
				placeBefore,
				dataTypes = dataTypeExpression.toLowerCase().split(core_rspace),
				i = 0,
				length = dataTypes.length;
			if (jQuery.isFunction(func)) {
				for (; i < length; i++) {
					dataType = dataTypes[i];
					placeBefore = /^\+/.test(dataType);
					if (placeBefore) {
						dataType = dataType.substr(1) || "*";
					}
					list = structure[dataType] = structure[dataType] || [];
					list[placeBefore ? "unshift" : "push"](func);
				}
			}
		};
	}

	function inspectPrefiltersOrTransports(
		structure,
		options,
		originalOptions,
		jqXHR,
		dataType,
		inspected
	) {
		dataType = dataType || options.dataTypes[0];
		inspected = inspected || {};
		inspected[dataType] = true;
		var selection,
			list = structure[dataType],
			i = 0,
			length = list ? list.length : 0,
			executeOnly = structure === prefilters;
		for (; i < length && (executeOnly || !selection); i++) {
			selection = list[i](options, originalOptions, jqXHR);
			if (typeof selection === "string") {
				if (!executeOnly || inspected[selection]) {
					selection = undefined;
				} else {
					options.dataTypes.unshift(selection);
					selection = inspectPrefiltersOrTransports(
						structure,
						options,
						originalOptions,
						jqXHR,
						selection,
						inspected
					);
				}
			}
		}
		if ((executeOnly || !selection) && !inspected["*"]) {
			selection = inspectPrefiltersOrTransports(
				structure,
				options,
				originalOptions,
				jqXHR,
				"*",
				inspected
			);
		}
		return selection;
	}

	function ajaxExtend(target, src) {
		var key,
			deep,
			flatOptions = jQuery.ajaxSettings.flatOptions || {};
		for (key in src) {
			if (src[key] !== undefined) {
				(flatOptions[key] ? target : deep || (deep = {}))[key] = src[key];
			}
		}
		if (deep) {
			jQuery.extend(true, target, deep);
		}
	}
	jQuery.fn.load = function (url, params, callback) {
		if (typeof url !== "string" && _load) {
			return _load.apply(this, arguments);
		}
		if (!this.length) {
			return this;
		}
		var selector,
			type,
			response,
			self = this,
			off = url.indexOf(" ");
		if (off >= 0) {
			selector = url.slice(off, url.length);
			url = url.slice(0, off);
		}
		if (jQuery.isFunction(params)) {
			callback = params;
			params = undefined;
		} else if (params && typeof params === "object") {
			type = "POST";
		}
		jQuery
			.ajax({
				url: url,
				type: type,
				dataType: "html",
				data: params,
				complete: function (jqXHR, status) {
					if (callback) {
						self.each(
							callback,
							response || [jqXHR.responseText, status, jqXHR]
						);
					}
				},
			})
			.done(function (responseText) {
				response = arguments;
				self.html(
					selector
						? jQuery("<div>")
								.append(responseText.replace(rscript, ""))
								.find(selector)
						: responseText
				);
			});
		return this;
	};
	jQuery.each(
		"ajaxStart ajaxStop ajaxComplete ajaxError ajaxSuccess ajaxSend".split(" "),
		function (i, o) {
			jQuery.fn[o] = function (f) {
				return this.on(o, f);
			};
		}
	);
	jQuery.each(["get", "post"], function (i, method) {
		jQuery[method] = function (url, data, callback, type) {
			if (jQuery.isFunction(data)) {
				type = type || callback;
				callback = data;
				data = undefined;
			}
			return jQuery.ajax({
				type: method,
				url: url,
				data: data,
				success: callback,
				dataType: type,
			});
		};
	});
	jQuery.extend({
		getScript: function (url, callback) {
			return jQuery.get(url, undefined, callback, "script");
		},
		getJSON: function (url, data, callback) {
			return jQuery.get(url, data, callback, "json");
		},
		ajaxSetup: function (target, settings) {
			if (settings) {
				ajaxExtend(target, jQuery.ajaxSettings);
			} else {
				settings = target;
				target = jQuery.ajaxSettings;
			}
			ajaxExtend(target, settings);
			return target;
		},
		ajaxSettings: {
			url: ajaxLocation,
			isLocal: rlocalProtocol.test(ajaxLocParts[1]),
			global: true,
			type: "GET",
			contentType: "application/x-www-form-urlencoded; charset=UTF-8",
			processData: true,
			async: true,
			accepts: {
				xml: "application/xml, text/xml",
				html: "text/html",
				text: "text/plain",
				json: "application/json, text/javascript",
				"*": allTypes,
			},
			contents: {
				xml: /xml/,
				html: /html/,
				json: /json/,
			},
			responseFields: {
				xml: "responseXML",
				text: "responseText",
			},
			converters: {
				"* text": window.String,
				"text html": true,
				"text json": jQuery.parseJSON,
				"text xml": jQuery.parseXML,
			},
			flatOptions: {
				context: true,
				url: true,
			},
		},
		ajaxPrefilter: addToPrefiltersOrTransports(prefilters),
		ajaxTransport: addToPrefiltersOrTransports(transports),
		ajax: function (url, options) {
			if (typeof url === "object") {
				options = url;
				url = undefined;
			}
			options = options || {};
			var ifModifiedKey,
				responseHeadersString,
				responseHeaders,
				transport,
				timeoutTimer,
				parts,
				fireGlobals,
				i,
				s = jQuery.ajaxSetup({}, options),
				callbackContext = s.context || s,
				globalEventContext =
					callbackContext !== s &&
					(callbackContext.nodeType || callbackContext instanceof jQuery)
						? jQuery(callbackContext)
						: jQuery.event,
				deferred = jQuery.Deferred(),
				completeDeferred = jQuery.Callbacks("once memory"),
				statusCode = s.statusCode || {},
				requestHeaders = {},
				requestHeadersNames = {},
				state = 0,
				strAbort = "canceled",
				jqXHR = {
					readyState: 0,
					setRequestHeader: function (name, value) {
						if (!state) {
							var lname = name.toLowerCase();
							name = requestHeadersNames[lname] =
								requestHeadersNames[lname] || name;
							requestHeaders[name] = value;
						}
						return this;
					},
					getAllResponseHeaders: function () {
						return state === 2 ? responseHeadersString : null;
					},
					getResponseHeader: function (key) {
						var match;
						if (state === 2) {
							if (!responseHeaders) {
								responseHeaders = {};
								while ((match = rheaders.exec(responseHeadersString))) {
									responseHeaders[match[1].toLowerCase()] = match[2];
								}
							}
							match = responseHeaders[key.toLowerCase()];
						}
						return match === undefined ? null : match;
					},
					overrideMimeType: function (type) {
						if (!state) {
							s.mimeType = type;
						}
						return this;
					},
					abort: function (statusText) {
						statusText = statusText || strAbort;
						if (transport) {
							transport.abort(statusText);
						}
						done(0, statusText);
						return this;
					},
				};

			function done(status, nativeStatusText, responses, headers) {
				var isSuccess,
					success,
					error,
					response,
					modified,
					statusText = nativeStatusText;
				if (state === 2) {
					return;
				}
				state = 2;
				if (timeoutTimer) {
					clearTimeout(timeoutTimer);
				}
				transport = undefined;
				responseHeadersString = headers || "";
				jqXHR.readyState = status > 0 ? 4 : 0;
				if (responses) {
					response = ajaxHandleResponses(s, jqXHR, responses);
				}
				if ((status >= 200 && status < 300) || status === 304) {
					if (s.ifModified) {
						modified = jqXHR.getResponseHeader("Last-Modified");
						if (modified) {
							jQuery.lastModified[ifModifiedKey] = modified;
						}
						modified = jqXHR.getResponseHeader("Etag");
						if (modified) {
							jQuery.etag[ifModifiedKey] = modified;
						}
					}
					if (status === 304) {
						statusText = "notmodified";
						isSuccess = true;
					} else {
						isSuccess = ajaxConvert(s, response);
						statusText = isSuccess.state;
						success = isSuccess.data;
						error = isSuccess.error;
						isSuccess = !error;
					}
				} else {
					error = statusText;
					if (!statusText || status) {
						statusText = "error";
						if (status < 0) {
							status = 0;
						}
					}
				}
				jqXHR.status = status;
				jqXHR.statusText = "" + (nativeStatusText || statusText);
				if (isSuccess) {
					deferred.resolveWith(callbackContext, [success, statusText, jqXHR]);
				} else {
					deferred.rejectWith(callbackContext, [jqXHR, statusText, error]);
				}
				jqXHR.statusCode(statusCode);
				statusCode = undefined;
				if (fireGlobals) {
					globalEventContext.trigger(
						"ajax" + (isSuccess ? "Success" : "Error"),
						[jqXHR, s, isSuccess ? success : error]
					);
				}
				completeDeferred.fireWith(callbackContext, [jqXHR, statusText]);
				if (fireGlobals) {
					globalEventContext.trigger("ajaxComplete", [jqXHR, s]);
					if (!--jQuery.active) {
						jQuery.event.trigger("ajaxStop");
					}
				}
			}
			deferred.promise(jqXHR);
			jqXHR.success = jqXHR.done;
			jqXHR.error = jqXHR.fail;
			jqXHR.complete = completeDeferred.add;
			jqXHR.statusCode = function (map) {
				if (map) {
					var tmp;
					if (state < 2) {
						for (tmp in map) {
							statusCode[tmp] = [statusCode[tmp], map[tmp]];
						}
					} else {
						tmp = map[jqXHR.status];
						jqXHR.always(tmp);
					}
				}
				return this;
			};
			s.url = ((url || s.url) + "")
				.replace(rhash, "")
				.replace(rprotocol, ajaxLocParts[1] + "//");
			s.dataTypes = jQuery
				.trim(s.dataType || "*")
				.toLowerCase()
				.split(core_rspace);
			if (s.crossDomain == null) {
				parts = rurl.exec(s.url.toLowerCase());
				s.crossDomain = !!(
					parts &&
					(parts[1] != ajaxLocParts[1] ||
						parts[2] != ajaxLocParts[2] ||
						(parts[3] || (parts[1] === "http:" ? 80 : 443)) !=
							(ajaxLocParts[3] || (ajaxLocParts[1] === "http:" ? 80 : 443)))
				);
			}
			if (s.data && s.processData && typeof s.data !== "string") {
				s.data = jQuery.param(s.data, s.traditional);
			}
			inspectPrefiltersOrTransports(prefilters, s, options, jqXHR);
			if (state === 2) {
				return jqXHR;
			}
			fireGlobals = s.global;
			s.type = s.type.toUpperCase();
			s.hasContent = !rnoContent.test(s.type);
			if (fireGlobals && jQuery.active++ === 0) {
				jQuery.event.trigger("ajaxStart");
			}
			if (!s.hasContent) {
				if (s.data) {
					s.url += (rquery.test(s.url) ? "&" : "?") + s.data;
					delete s.data;
				}
				ifModifiedKey = s.url;
				if (s.cache === false) {
					var ts = jQuery.now(),
						ret = s.url.replace(rts, "$1_=" + ts);
					s.url =
						ret +
						(ret === s.url ? (rquery.test(s.url) ? "&" : "?") + "_=" + ts : "");
				}
			}
			if (
				(s.data && s.hasContent && s.contentType !== false) ||
				options.contentType
			) {
				jqXHR.setRequestHeader("Content-Type", s.contentType);
			}
			if (s.ifModified) {
				ifModifiedKey = ifModifiedKey || s.url;
				if (jQuery.lastModified[ifModifiedKey]) {
					jqXHR.setRequestHeader(
						"If-Modified-Since",
						jQuery.lastModified[ifModifiedKey]
					);
				}
				if (jQuery.etag[ifModifiedKey]) {
					jqXHR.setRequestHeader("If-None-Match", jQuery.etag[ifModifiedKey]);
				}
			}
			jqXHR.setRequestHeader(
				"Accept",
				s.dataTypes[0] && s.accepts[s.dataTypes[0]]
					? s.accepts[s.dataTypes[0]] +
							(s.dataTypes[0] !== "*" ? ", " + allTypes + "; q=0.01" : "")
					: s.accepts["*"]
			);
			for (i in s.headers) {
				jqXHR.setRequestHeader(i, s.headers[i]);
			}
			if (
				s.beforeSend &&
				(s.beforeSend.call(callbackContext, jqXHR, s) === false || state === 2)
			) {
				return jqXHR.abort();
			}
			strAbort = "abort";
			for (i in {
				success: 1,
				error: 1,
				complete: 1,
			}) {
				jqXHR[i](s[i]);
			}
			transport = inspectPrefiltersOrTransports(transports, s, options, jqXHR);
			if (!transport) {
				done(-1, "No Transport");
			} else {
				jqXHR.readyState = 1;
				if (fireGlobals) {
					globalEventContext.trigger("ajaxSend", [jqXHR, s]);
				}
				if (s.async && s.timeout > 0) {
					timeoutTimer = setTimeout(function () {
						jqXHR.abort("timeout");
					}, s.timeout);
				}
				try {
					state = 1;
					transport.send(requestHeaders, done);
				} catch (e) {
					if (state < 2) {
						done(-1, e);
					} else {
						throw e;
					}
				}
			}
			return jqXHR;
		},
		active: 0,
		lastModified: {},
		etag: {},
	});

	function ajaxHandleResponses(s, jqXHR, responses) {
		var ct,
			type,
			finalDataType,
			firstDataType,
			contents = s.contents,
			dataTypes = s.dataTypes,
			responseFields = s.responseFields;
		for (type in responseFields) {
			if (type in responses) {
				jqXHR[responseFields[type]] = responses[type];
			}
		}
		while (dataTypes[0] === "*") {
			dataTypes.shift();
			if (ct === undefined) {
				ct = s.mimeType || jqXHR.getResponseHeader("content-type");
			}
		}
		if (ct) {
			for (type in contents) {
				if (contents[type] && contents[type].test(ct)) {
					dataTypes.unshift(type);
					break;
				}
			}
		}
		if (dataTypes[0] in responses) {
			finalDataType = dataTypes[0];
		} else {
			for (type in responses) {
				if (!dataTypes[0] || s.converters[type + " " + dataTypes[0]]) {
					finalDataType = type;
					break;
				}
				if (!firstDataType) {
					firstDataType = type;
				}
			}
			finalDataType = finalDataType || firstDataType;
		}
		if (finalDataType) {
			if (finalDataType !== dataTypes[0]) {
				dataTypes.unshift(finalDataType);
			}
			return responses[finalDataType];
		}
	}

	function ajaxConvert(s, response) {
		var conv,
			conv2,
			current,
			tmp,
			dataTypes = s.dataTypes.slice(),
			prev = dataTypes[0],
			converters = {},
			i = 0;
		if (s.dataFilter) {
			response = s.dataFilter(response, s.dataType);
		}
		if (dataTypes[1]) {
			for (conv in s.converters) {
				converters[conv.toLowerCase()] = s.converters[conv];
			}
		}
		for (; (current = dataTypes[++i]); ) {
			if (current !== "*") {
				if (prev !== "*" && prev !== current) {
					conv = converters[prev + " " + current] || converters["* " + current];
					if (!conv) {
						for (conv2 in converters) {
							tmp = conv2.split(" ");
							if (tmp[1] === current) {
								conv =
									converters[prev + " " + tmp[0]] || converters["* " + tmp[0]];
								if (conv) {
									if (conv === true) {
										conv = converters[conv2];
									} else if (converters[conv2] !== true) {
										current = tmp[0];
										dataTypes.splice(i--, 0, current);
									}
									break;
								}
							}
						}
					}
					if (conv !== true) {
						if (conv && s["throws"]) {
							response = conv(response);
						} else {
							try {
								response = conv(response);
							} catch (e) {
								return {
									state: "parsererror",
									error: conv
										? e
										: "No conversion from " + prev + " to " + current,
								};
							}
						}
					}
				}
				prev = current;
			}
		}
		return {
			state: "success",
			data: response,
		};
	}
	var oldCallbacks = [],
		rquestion = /\?/,
		rjsonp = /(=)\?(?=&|$)|\?\?/,
		nonce = jQuery.now();
	jQuery.ajaxSetup({
		jsonp: "callback",
		jsonpCallback: function () {
			var callback = oldCallbacks.pop() || jQuery.expando + "_" + nonce++;
			this[callback] = true;
			return callback;
		},
	});
	jQuery.ajaxPrefilter("json jsonp", function (s, originalSettings, jqXHR) {
		var callbackName,
			overwritten,
			responseContainer,
			data = s.data,
			url = s.url,
			hasCallback = s.jsonp !== false,
			replaceInUrl = hasCallback && rjsonp.test(url),
			replaceInData =
				hasCallback &&
				!replaceInUrl &&
				typeof data === "string" &&
				!(s.contentType || "").indexOf("application/x-www-form-urlencoded") &&
				rjsonp.test(data);
		if (s.dataTypes[0] === "jsonp" || replaceInUrl || replaceInData) {
			callbackName = s.jsonpCallback = jQuery.isFunction(s.jsonpCallback)
				? s.jsonpCallback()
				: s.jsonpCallback;
			overwritten = window[callbackName];
			if (replaceInUrl) {
				s.url = url.replace(rjsonp, "$1" + callbackName);
			} else if (replaceInData) {
				s.data = data.replace(rjsonp, "$1" + callbackName);
			} else if (hasCallback) {
				s.url +=
					(rquestion.test(url) ? "&" : "?") + s.jsonp + "=" + callbackName;
			}
			s.converters["script json"] = function () {
				if (!responseContainer) {
					jQuery.error(callbackName + " was not called");
				}
				return responseContainer[0];
			};
			s.dataTypes[0] = "json";
			window[callbackName] = function () {
				responseContainer = arguments;
			};
			jqXHR.always(function () {
				window[callbackName] = overwritten;
				if (s[callbackName]) {
					s.jsonpCallback = originalSettings.jsonpCallback;
					oldCallbacks.push(callbackName);
				}
				if (responseContainer && jQuery.isFunction(overwritten)) {
					overwritten(responseContainer[0]);
				}
				responseContainer = overwritten = undefined;
			});
			return "script";
		}
	});
	jQuery.ajaxSetup({
		accepts: {
			script:
				"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript",
		},
		contents: {
			script: /javascript|ecmascript/,
		},
		converters: {
			"text script": function (text) {
				jQuery.globalEval(text);
				return text;
			},
		},
	});
	jQuery.ajaxPrefilter("script", function (s) {
		if (s.cache === undefined) {
			s.cache = false;
		}
		if (s.crossDomain) {
			s.type = "GET";
			s.global = false;
		}
	});
	jQuery.ajaxTransport("script", function (s) {
		if (s.crossDomain) {
			var script,
				head =
					document.head ||
					document.getElementsByTagName("head")[0] ||
					document.documentElement;
			return {
				send: function (_, callback) {
					script = document.createElement("script");
					script.async = "async";
					if (s.scriptCharset) {
						script.charset = s.scriptCharset;
					}
					script.src = s.url;
					script.onload = script.onreadystatechange = function (_, isAbort) {
						if (
							isAbort ||
							!script.readyState ||
							/loaded|complete/.test(script.readyState)
						) {
							script.onload = script.onreadystatechange = null;
							if (head && script.parentNode) {
								head.removeChild(script);
							}
							script = undefined;
							if (!isAbort) {
								callback(200, "success");
							}
						}
					};
					head.insertBefore(script, head.firstChild);
				},
				abort: function () {
					if (script) {
						script.onload(0, 1);
					}
				},
			};
		}
	});
	var xhrCallbacks,
		xhrOnUnloadAbort = window.ActiveXObject
			? function () {
					for (var key in xhrCallbacks) {
						xhrCallbacks[key](0, 1);
					}
			  }
			: false,
		xhrId = 0;

	function createStandardXHR() {
		try {
			return new window.XMLHttpRequest();
		} catch (e) {}
	}

	function createActiveXHR() {
		try {
			return new window.ActiveXObject("Microsoft.XMLHTTP");
		} catch (e) {}
	}
	jQuery.ajaxSettings.xhr = window.ActiveXObject
		? function () {
				return (!this.isLocal && createStandardXHR()) || createActiveXHR();
		  }
		: createStandardXHR;
	(function (xhr) {
		jQuery.extend(jQuery.support, {
			ajax: !!xhr,
			cors: !!xhr && "withCredentials" in xhr,
		});
	})(jQuery.ajaxSettings.xhr());
	if (jQuery.support.ajax) {
		jQuery.ajaxTransport(function (s) {
			if (!s.crossDomain || jQuery.support.cors) {
				var callback;
				return {
					send: function (headers, complete) {
						var handle,
							i,
							xhr = s.xhr();
						if (s.username) {
							xhr.open(s.type, s.url, s.async, s.username, s.password);
						} else {
							xhr.open(s.type, s.url, s.async);
						}
						if (s.xhrFields) {
							for (i in s.xhrFields) {
								xhr[i] = s.xhrFields[i];
							}
						}
						if (s.mimeType && xhr.overrideMimeType) {
							xhr.overrideMimeType(s.mimeType);
						}
						if (!s.crossDomain && !headers["X-Requested-With"]) {
							headers["X-Requested-With"] = "XMLHttpRequest";
						}
						try {
							for (i in headers) {
								xhr.setRequestHeader(i, headers[i]);
							}
						} catch (_) {}
						xhr.send((s.hasContent && s.data) || null);
						callback = function (_, isAbort) {
							var status, statusText, responseHeaders, responses, xml;
							try {
								if (callback && (isAbort || xhr.readyState === 4)) {
									callback = undefined;
									if (handle) {
										xhr.onreadystatechange = jQuery.noop;
										if (xhrOnUnloadAbort) {
											delete xhrCallbacks[handle];
										}
									}
									if (isAbort) {
										if (xhr.readyState !== 4) {
											xhr.abort();
										}
									} else {
										status = xhr.status;
										responseHeaders = xhr.getAllResponseHeaders();
										responses = {};
										xml = xhr.responseXML;
										if (xml && xml.documentElement) {
											responses.xml = xml;
										}
										try {
											responses.text = xhr.responseText;
										} catch (_) {}
										try {
											statusText = xhr.statusText;
										} catch (e) {
											statusText = "";
										}
										if (!status && s.isLocal && !s.crossDomain) {
											status = responses.text ? 200 : 404;
										} else if (status === 1223) {
											status = 204;
										}
									}
								}
							} catch (firefoxAccessException) {
								if (!isAbort) {
									complete(-1, firefoxAccessException);
								}
							}
							if (responses) {
								complete(status, statusText, responses, responseHeaders);
							}
						};
						if (!s.async) {
							callback();
						} else if (xhr.readyState === 4) {
							setTimeout(callback, 0);
						} else {
							handle = ++xhrId;
							if (xhrOnUnloadAbort) {
								if (!xhrCallbacks) {
									xhrCallbacks = {};
									jQuery(window).unload(xhrOnUnloadAbort);
								}
								xhrCallbacks[handle] = callback;
							}
							xhr.onreadystatechange = callback;
						}
					},
					abort: function () {
						if (callback) {
							callback(0, 1);
						}
					},
				};
			}
		});
	}
	var fxNow,
		timerId,
		rfxtypes = /^(?:toggle|show|hide)$/,
		rfxnum = new RegExp("^(?:([-+])=|)(" + core_pnum + ")([a-z%]*)$", "i"),
		rrun = /queueHooks$/,
		animationPrefilters = [defaultPrefilter],
		tweeners = {
			"*": [
				function (prop, value) {
					var end,
						unit,
						prevScale,
						tween = this.createTween(prop, value),
						parts = rfxnum.exec(value),
						target = tween.cur(),
						start = +target || 0,
						scale = 1;
					if (parts) {
						end = +parts[2];
						unit = parts[3] || (jQuery.cssNumber[prop] ? "" : "px");
						if (unit !== "px" && start) {
							start = jQuery.css(tween.elem, prop, true) || end || 1;
							do {
								prevScale = scale = scale || ".5";
								start = start / scale;
								jQuery.style(tween.elem, prop, start + unit);
								scale = tween.cur() / target;
							} while (scale !== 1 && scale !== prevScale);
						}
						tween.unit = unit;
						tween.start = start;
						tween.end = parts[1] ? start + (parts[1] + 1) * end : end;
					}
					return tween;
				},
			],
		};

	function createFxNow() {
		setTimeout(function () {
			fxNow = undefined;
		}, 0);
		return (fxNow = jQuery.now());
	}

	function createTweens(animation, props) {
		jQuery.each(props, function (prop, value) {
			var collection = (tweeners[prop] || []).concat(tweeners["*"]),
				index = 0,
				length = collection.length;
			for (; index < length; index++) {
				if (collection[index].call(animation, prop, value)) {
					return;
				}
			}
		});
	}

	function Animation(elem, properties, options) {
		var result,
			index = 0,
			tweenerIndex = 0,
			length = animationPrefilters.length,
			deferred = jQuery.Deferred().always(function () {
				delete tick.elem;
			}),
			tick = function () {
				var currentTime = fxNow || createFxNow(),
					remaining = Math.max(
						0,
						animation.startTime + animation.duration - currentTime
					),
					percent = 1 - (remaining / animation.duration || 0),
					index = 0,
					length = animation.tweens.length;
				for (; index < length; index++) {
					animation.tweens[index].run(percent);
				}
				deferred.notifyWith(elem, [animation, percent, remaining]);
				if (percent < 1 && length) {
					return remaining;
				} else {
					deferred.resolveWith(elem, [animation]);
					return false;
				}
			},
			animation = deferred.promise({
				elem: elem,
				props: jQuery.extend({}, properties),
				opts: jQuery.extend(
					true,
					{
						specialEasing: {},
					},
					options
				),
				originalProperties: properties,
				originalOptions: options,
				startTime: fxNow || createFxNow(),
				duration: options.duration,
				tweens: [],
				createTween: function (prop, end, easing) {
					var tween = jQuery.Tween(
						elem,
						animation.opts,
						prop,
						end,
						animation.opts.specialEasing[prop] || animation.opts.easing
					);
					animation.tweens.push(tween);
					return tween;
				},
				stop: function (gotoEnd) {
					var index = 0,
						length = gotoEnd ? animation.tweens.length : 0;
					for (; index < length; index++) {
						animation.tweens[index].run(1);
					}
					if (gotoEnd) {
						deferred.resolveWith(elem, [animation, gotoEnd]);
					} else {
						deferred.rejectWith(elem, [animation, gotoEnd]);
					}
					return this;
				},
			}),
			props = animation.props;
		propFilter(props, animation.opts.specialEasing);
		for (; index < length; index++) {
			result = animationPrefilters[index].call(
				animation,
				elem,
				props,
				animation.opts
			);
			if (result) {
				return result;
			}
		}
		createTweens(animation, props);
		if (jQuery.isFunction(animation.opts.start)) {
			animation.opts.start.call(elem, animation);
		}
		jQuery.fx.timer(
			jQuery.extend(tick, {
				anim: animation,
				queue: animation.opts.queue,
				elem: elem,
			})
		);
		return animation
			.progress(animation.opts.progress)
			.done(animation.opts.done, animation.opts.complete)
			.fail(animation.opts.fail)
			.always(animation.opts.always);
	}

	function propFilter(props, specialEasing) {
		var index, name, easing, value, hooks;
		for (index in props) {
			name = jQuery.camelCase(index);
			easing = specialEasing[name];
			value = props[index];
			if (jQuery.isArray(value)) {
				easing = value[1];
				value = props[index] = value[0];
			}
			if (index !== name) {
				props[name] = value;
				delete props[index];
			}
			hooks = jQuery.cssHooks[name];
			if (hooks && "expand" in hooks) {
				value = hooks.expand(value);
				delete props[name];
				for (index in value) {
					if (!(index in props)) {
						props[index] = value[index];
						specialEasing[index] = easing;
					}
				}
			} else {
				specialEasing[name] = easing;
			}
		}
	}
	jQuery.Animation = jQuery.extend(Animation, {
		tweener: function (props, callback) {
			if (jQuery.isFunction(props)) {
				callback = props;
				props = ["*"];
			} else {
				props = props.split(" ");
			}
			var prop,
				index = 0,
				length = props.length;
			for (; index < length; index++) {
				prop = props[index];
				tweeners[prop] = tweeners[prop] || [];
				tweeners[prop].unshift(callback);
			}
		},
		prefilter: function (callback, prepend) {
			if (prepend) {
				animationPrefilters.unshift(callback);
			} else {
				animationPrefilters.push(callback);
			}
		},
	});

	function defaultPrefilter(elem, props, opts) {
		var index,
			prop,
			value,
			length,
			dataShow,
			tween,
			hooks,
			oldfire,
			anim = this,
			style = elem.style,
			orig = {},
			handled = [],
			hidden = elem.nodeType && isHidden(elem);
		if (!opts.queue) {
			hooks = jQuery._queueHooks(elem, "fx");
			if (hooks.unqueued == null) {
				hooks.unqueued = 0;
				oldfire = hooks.empty.fire;
				hooks.empty.fire = function () {
					if (!hooks.unqueued) {
						oldfire();
					}
				};
			}
			hooks.unqueued++;
			anim.always(function () {
				anim.always(function () {
					hooks.unqueued--;
					if (!jQuery.queue(elem, "fx").length) {
						hooks.empty.fire();
					}
				});
			});
		}
		if (elem.nodeType === 1 && ("height" in props || "width" in props)) {
			opts.overflow = [style.overflow, style.overflowX, style.overflowY];
			if (
				jQuery.css(elem, "display") === "inline" &&
				jQuery.css(elem, "float") === "none"
			) {
				if (
					!jQuery.support.inlineBlockNeedsLayout ||
					css_defaultDisplay(elem.nodeName) === "inline"
				) {
					style.display = "inline-block";
				} else {
					style.zoom = 1;
				}
			}
		}
		if (opts.overflow) {
			style.overflow = "hidden";
			if (!jQuery.support.shrinkWrapBlocks) {
				anim.done(function () {
					style.overflow = opts.overflow[0];
					style.overflowX = opts.overflow[1];
					style.overflowY = opts.overflow[2];
				});
			}
		}
		for (index in props) {
			value = props[index];
			if (rfxtypes.exec(value)) {
				delete props[index];
				if (value === (hidden ? "hide" : "show")) {
					continue;
				}
				handled.push(index);
			}
		}
		length = handled.length;
		if (length) {
			dataShow =
				jQuery._data(elem, "fxshow") || jQuery._data(elem, "fxshow", {});
			if (hidden) {
				jQuery(elem).show();
			} else {
				anim.done(function () {
					jQuery(elem).hide();
				});
			}
			anim.done(function () {
				var prop;
				jQuery.removeData(elem, "fxshow", true);
				for (prop in orig) {
					jQuery.style(elem, prop, orig[prop]);
				}
			});
			for (index = 0; index < length; index++) {
				prop = handled[index];
				tween = anim.createTween(prop, hidden ? dataShow[prop] : 0);
				orig[prop] = dataShow[prop] || jQuery.style(elem, prop);
				if (!(prop in dataShow)) {
					dataShow[prop] = tween.start;
					if (hidden) {
						tween.end = tween.start;
						tween.start = prop === "width" || prop === "height" ? 1 : 0;
					}
				}
			}
		}
	}

	function Tween(elem, options, prop, end, easing) {
		return new Tween.prototype.init(elem, options, prop, end, easing);
	}
	jQuery.Tween = Tween;
	Tween.prototype = {
		constructor: Tween,
		init: function (elem, options, prop, end, easing, unit) {
			this.elem = elem;
			this.prop = prop;
			this.easing = easing || "swing";
			this.options = options;
			this.start = this.now = this.cur();
			this.end = end;
			this.unit = unit || (jQuery.cssNumber[prop] ? "" : "px");
		},
		cur: function () {
			var hooks = Tween.propHooks[this.prop];
			return hooks && hooks.get
				? hooks.get(this)
				: Tween.propHooks._default.get(this);
		},
		run: function (percent) {
			var eased,
				hooks = Tween.propHooks[this.prop];
			if (this.options.duration) {
				this.pos = eased = jQuery.easing[this.easing](
					percent,
					this.options.duration * percent,
					0,
					1,
					this.options.duration
				);
			} else {
				this.pos = eased = percent;
			}
			this.now = (this.end - this.start) * eased + this.start;
			if (this.options.step) {
				this.options.step.call(this.elem, this.now, this);
			}
			if (hooks && hooks.set) {
				hooks.set(this);
			} else {
				Tween.propHooks._default.set(this);
			}
			return this;
		},
	};
	Tween.prototype.init.prototype = Tween.prototype;
	Tween.propHooks = {
		_default: {
			get: function (tween) {
				var result;
				if (
					tween.elem[tween.prop] != null &&
					(!tween.elem.style || tween.elem.style[tween.prop] == null)
				) {
					return tween.elem[tween.prop];
				}
				result = jQuery.css(tween.elem, tween.prop, false, "");
				return !result || result === "auto" ? 0 : result;
			},
			set: function (tween) {
				if (jQuery.fx.step[tween.prop]) {
					jQuery.fx.step[tween.prop](tween);
				} else if (
					tween.elem.style &&
					(tween.elem.style[jQuery.cssProps[tween.prop]] != null ||
						jQuery.cssHooks[tween.prop])
				) {
					jQuery.style(tween.elem, tween.prop, tween.now + tween.unit);
				} else {
					tween.elem[tween.prop] = tween.now;
				}
			},
		},
	};
	Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
		set: function (tween) {
			if (tween.elem.nodeType && tween.elem.parentNode) {
				tween.elem[tween.prop] = tween.now;
			}
		},
	};
	jQuery.each(["toggle", "show", "hide"], function (i, name) {
		var cssFn = jQuery.fn[name];
		jQuery.fn[name] = function (speed, easing, callback) {
			return speed == null ||
				typeof speed === "boolean" ||
				(!i && jQuery.isFunction(speed) && jQuery.isFunction(easing))
				? cssFn.apply(this, arguments)
				: this.animate(genFx(name, true), speed, easing, callback);
		};
	});
	jQuery.fn.extend({
		fadeTo: function (speed, to, easing, callback) {
			return this.filter(isHidden).css("opacity", 0).show().end().animate(
				{
					opacity: to,
				},
				speed,
				easing,
				callback
			);
		},
		animate: function (prop, speed, easing, callback) {
			var empty = jQuery.isEmptyObject(prop),
				optall = jQuery.speed(speed, easing, callback),
				doAnimation = function () {
					var anim = Animation(this, jQuery.extend({}, prop), optall);
					if (empty) {
						anim.stop(true);
					}
				};
			return empty || optall.queue === false
				? this.each(doAnimation)
				: this.queue(optall.queue, doAnimation);
		},
		stop: function (type, clearQueue, gotoEnd) {
			var stopQueue = function (hooks) {
				var stop = hooks.stop;
				delete hooks.stop;
				stop(gotoEnd);
			};
			if (typeof type !== "string") {
				gotoEnd = clearQueue;
				clearQueue = type;
				type = undefined;
			}
			if (clearQueue && type !== false) {
				this.queue(type || "fx", []);
			}
			return this.each(function () {
				var dequeue = true,
					index = type != null && type + "queueHooks",
					timers = jQuery.timers,
					data = jQuery._data(this);
				if (index) {
					if (data[index] && data[index].stop) {
						stopQueue(data[index]);
					}
				} else {
					for (index in data) {
						if (data[index] && data[index].stop && rrun.test(index)) {
							stopQueue(data[index]);
						}
					}
				}
				for (index = timers.length; index--; ) {
					if (
						timers[index].elem === this &&
						(type == null || timers[index].queue === type)
					) {
						timers[index].anim.stop(gotoEnd);
						dequeue = false;
						timers.splice(index, 1);
					}
				}
				if (dequeue || !gotoEnd) {
					jQuery.dequeue(this, type);
				}
			});
		},
	});

	function genFx(type, includeWidth) {
		var which,
			attrs = {
				height: type,
			},
			i = 0;
		includeWidth = includeWidth ? 1 : 0;
		for (; i < 4; i += 2 - includeWidth) {
			which = cssExpand[i];
			attrs["margin" + which] = attrs["padding" + which] = type;
		}
		if (includeWidth) {
			attrs.opacity = attrs.width = type;
		}
		return attrs;
	}
	jQuery.each(
		{
			slideDown: genFx("show"),
			slideUp: genFx("hide"),
			slideToggle: genFx("toggle"),
			fadeIn: {
				opacity: "show",
			},
			fadeOut: {
				opacity: "hide",
			},
			fadeToggle: {
				opacity: "toggle",
			},
		},
		function (name, props) {
			jQuery.fn[name] = function (speed, easing, callback) {
				return this.animate(props, speed, easing, callback);
			};
		}
	);
	jQuery.speed = function (speed, easing, fn) {
		var opt =
			speed && typeof speed === "object"
				? jQuery.extend({}, speed)
				: {
						complete:
							fn || (!fn && easing) || (jQuery.isFunction(speed) && speed),
						duration: speed,
						easing:
							(fn && easing) ||
							(easing && !jQuery.isFunction(easing) && easing),
				  };
		opt.duration = jQuery.fx.off
			? 0
			: typeof opt.duration === "number"
			? opt.duration
			: opt.duration in jQuery.fx.speeds
			? jQuery.fx.speeds[opt.duration]
			: jQuery.fx.speeds._default;
		if (opt.queue == null || opt.queue === true) {
			opt.queue = "fx";
		}
		opt.old = opt.complete;
		opt.complete = function () {
			if (jQuery.isFunction(opt.old)) {
				opt.old.call(this);
			}
			if (opt.queue) {
				jQuery.dequeue(this, opt.queue);
			}
		};
		return opt;
	};
	jQuery.easing = {
		linear: function (p) {
			return p;
		},
		swing: function (p) {
			return 0.5 - Math.cos(p * Math.PI) / 2;
		},
	};
	jQuery.timers = [];
	jQuery.fx = Tween.prototype.init;
	jQuery.fx.tick = function () {
		var timer,
			timers = jQuery.timers,
			i = 0;
		for (; i < timers.length; i++) {
			timer = timers[i];
			if (!timer() && timers[i] === timer) {
				timers.splice(i--, 1);
			}
		}
		if (!timers.length) {
			jQuery.fx.stop();
		}
	};
	jQuery.fx.timer = function (timer) {
		if (timer() && jQuery.timers.push(timer) && !timerId) {
			timerId = setInterval(jQuery.fx.tick, jQuery.fx.interval);
		}
	};
	jQuery.fx.interval = 13;
	jQuery.fx.stop = function () {
		clearInterval(timerId);
		timerId = null;
	};
	jQuery.fx.speeds = {
		slow: 600,
		fast: 200,
		_default: 400,
	};
	jQuery.fx.step = {};
	if (jQuery.expr && jQuery.expr.filters) {
		jQuery.expr.filters.animated = function (elem) {
			return jQuery.grep(jQuery.timers, function (fn) {
				return elem === fn.elem;
			}).length;
		};
	}
	var rroot = /^(?:body|html)$/i;
	jQuery.fn.offset = function (options) {
		if (arguments.length) {
			return options === undefined
				? this
				: this.each(function (i) {
						jQuery.offset.setOffset(this, options, i);
				  });
		}
		var box,
			docElem,
			body,
			win,
			clientTop,
			clientLeft,
			scrollTop,
			scrollLeft,
			top,
			left,
			elem = this[0],
			doc = elem && elem.ownerDocument;
		if (!doc) {
			return;
		}
		if ((body = doc.body) === elem) {
			return jQuery.offset.bodyOffset(elem);
		}
		docElem = doc.documentElement;
		if (!jQuery.contains(docElem, elem)) {
			return {
				top: 0,
				left: 0,
			};
		}
		box = elem.getBoundingClientRect();
		win = getWindow(doc);
		clientTop = docElem.clientTop || body.clientTop || 0;
		clientLeft = docElem.clientLeft || body.clientLeft || 0;
		scrollTop = win.pageYOffset || docElem.scrollTop;
		scrollLeft = win.pageXOffset || docElem.scrollLeft;
		top = box.top + scrollTop - clientTop;
		left = box.left + scrollLeft - clientLeft;
		return {
			top: top,
			left: left,
		};
	};
	jQuery.offset = {
		bodyOffset: function (body) {
			var top = body.offsetTop,
				left = body.offsetLeft;
			if (jQuery.support.doesNotIncludeMarginInBodyOffset) {
				top += parseFloat(jQuery.css(body, "marginTop")) || 0;
				left += parseFloat(jQuery.css(body, "marginLeft")) || 0;
			}
			return {
				top: top,
				left: left,
			};
		},
		setOffset: function (elem, options, i) {
			var position = jQuery.css(elem, "position");
			if (position === "static") {
				elem.style.position = "relative";
			}
			var curElem = jQuery(elem),
				curOffset = curElem.offset(),
				curCSSTop = jQuery.css(elem, "top"),
				curCSSLeft = jQuery.css(elem, "left"),
				calculatePosition =
					(position === "absolute" || position === "fixed") &&
					jQuery.inArray("auto", [curCSSTop, curCSSLeft]) > -1,
				props = {},
				curPosition = {},
				curTop,
				curLeft;
			if (calculatePosition) {
				curPosition = curElem.position();
				curTop = curPosition.top;
				curLeft = curPosition.left;
			} else {
				curTop = parseFloat(curCSSTop) || 0;
				curLeft = parseFloat(curCSSLeft) || 0;
			}
			if (jQuery.isFunction(options)) {
				options = options.call(elem, i, curOffset);
			}
			if (options.top != null) {
				props.top = options.top - curOffset.top + curTop;
			}
			if (options.left != null) {
				props.left = options.left - curOffset.left + curLeft;
			}
			if ("using" in options) {
				options.using.call(elem, props);
			} else {
				curElem.css(props);
			}
		},
	};
	jQuery.fn.extend({
		position: function () {
			if (!this[0]) {
				return;
			}
			var elem = this[0],
				offsetParent = this.offsetParent(),
				offset = this.offset(),
				parentOffset = rroot.test(offsetParent[0].nodeName)
					? {
							top: 0,
							left: 0,
					  }
					: offsetParent.offset();
			offset.top -= parseFloat(jQuery.css(elem, "marginTop")) || 0;
			offset.left -= parseFloat(jQuery.css(elem, "marginLeft")) || 0;
			parentOffset.top +=
				parseFloat(jQuery.css(offsetParent[0], "borderTopWidth")) || 0;
			parentOffset.left +=
				parseFloat(jQuery.css(offsetParent[0], "borderLeftWidth")) || 0;
			return {
				top: offset.top - parentOffset.top,
				left: offset.left - parentOffset.left,
			};
		},
		offsetParent: function () {
			return this.map(function () {
				var offsetParent = this.offsetParent || document.body;
				while (
					offsetParent &&
					!rroot.test(offsetParent.nodeName) &&
					jQuery.css(offsetParent, "position") === "static"
				) {
					offsetParent = offsetParent.offsetParent;
				}
				return offsetParent || document.body;
			});
		},
	});
	jQuery.each(
		{
			scrollLeft: "pageXOffset",
			scrollTop: "pageYOffset",
		},
		function (method, prop) {
			var top = /Y/.test(prop);
			jQuery.fn[method] = function (val) {
				return jQuery.access(
					this,
					function (elem, method, val) {
						var win = getWindow(elem);
						if (val === undefined) {
							return win
								? prop in win
									? win[prop]
									: win.document.documentElement[method]
								: elem[method];
						}
						if (win) {
							win.scrollTo(
								!top ? val : jQuery(win).scrollLeft(),
								top ? val : jQuery(win).scrollTop()
							);
						} else {
							elem[method] = val;
						}
					},
					method,
					val,
					arguments.length,
					null
				);
			};
		}
	);

	function getWindow(elem) {
		return jQuery.isWindow(elem)
			? elem
			: elem.nodeType === 9
			? elem.defaultView || elem.parentWindow
			: false;
	}
	jQuery.each(
		{
			Height: "height",
			Width: "width",
		},
		function (name, type) {
			jQuery.each(
				{
					padding: "inner" + name,
					content: type,
					"": "outer" + name,
				},
				function (defaultExtra, funcName) {
					jQuery.fn[funcName] = function (margin, value) {
						var chainable =
								arguments.length &&
								(defaultExtra || typeof margin !== "boolean"),
							extra =
								defaultExtra ||
								(margin === true || value === true ? "margin" : "border");
						return jQuery.access(
							this,
							function (elem, type, value) {
								var doc;
								if (jQuery.isWindow(elem)) {
									return elem.document.documentElement["client" + name];
								}
								if (elem.nodeType === 9) {
									doc = elem.documentElement;
									return Math.max(
										elem.body["scroll" + name],
										doc["scroll" + name],
										elem.body["offset" + name],
										doc["offset" + name],
										doc["client" + name]
									);
								}
								return value === undefined
									? jQuery.css(elem, type, value, extra)
									: jQuery.style(elem, type, value, extra);
							},
							type,
							chainable ? margin : undefined,
							chainable,
							null
						);
					};
				}
			);
		}
	);
	window.jQuery = window.$ = jQuery;
	if (typeof define === "function" && define.amd && define.amd.jQuery) {
		define("jquery", [], function () {
			return jQuery;
		});
	}
})(window);
// plugins/flowplayer/flowplayer.min.js
!(function (e) {
	function t(t, n) {
		var i = "obj" + ("" + Math.random()).slice(2, 15),
			a = '<object class="fp-engine" id="' + i + '" name="' + i + '" ';
		a += e.browser.msie
			? 'classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000">'
			: ' data="' + t + '" type="application/x-shockwave-flash">';
		var o = {
			width: "100%",
			height: "100%",
			allowscriptaccess: "always",
			wmode: "transparent",
			quality: "high",
			flashvars: "",
			movie: t + (e.browser.msie ? "?" + i : ""),
			name: i,
		};
		return (
			e.each(n, function (e, t) {
				o.flashvars += e + "=" + t + "&";
			}),
			e.each(o, function (e, t) {
				a += '<param name="' + e + '" value="' + t + '"/>';
			}),
			(a += "</object>"),
			e(a)
		);
	}

	function n(e, t) {
		return (t = t || 100), Math.round(e * t) / t;
	}

	function i(e) {
		return /mpegurl/i.test(e) ? "application/x-mpegurl" : "video/" + e;
	}

	function a(e) {
		return (
			/^(video|application)/.test(e) || (e = i(e)),
			!!m.canPlayType(e).replace("no", "")
		);
	}

	function o(t, n) {
		var i = e.grep(t, function (e) {
			return e.type === n;
		});
		return i.length ? i[0] : null;
	}

	function r(e) {
		var t = e.attr("src"),
			n = e.attr("type") || "",
			i = t.split(y)[1];
		return (
			(n = /mpegurl/.test(n) ? "mpegurl" : n.replace("video/", "")),
			{
				src: t,
				suffix: i || n,
				type: n || i,
			}
		);
	}

	function s(t) {
		var n = this,
			i = [];
		e("source", t).each(function () {
			i.push(r(e(this)));
		}),
			i.length || i.push(r(t)),
			(n.initialSources = i),
			(n.resolve = function (t) {
				return t
					? (e.isArray(t)
							? (t = {
									sources: e.map(t, function (t) {
										var n,
											i = e.extend({}, t);
										return (
											e.each(t, function (e) {
												n = e;
											}),
											(i.type = n),
											(i.src = t[n]),
											delete i[n],
											i
										);
									}),
							  })
							: "string" == typeof t &&
							  ((t = {
									src: t,
									sources: [],
							  }),
							  e.each(i, function (e, n) {
									"flash" != n.type &&
										t.sources.push({
											type: n.type,
											src: t.src.replace(y, "." + n.suffix + "$2"),
										});
							  })),
					  t)
					: {
							sources: i,
					  };
			});
	}

	function l(e) {
		return (e = parseInt(e, 10)), e >= 10 ? e : "0" + e;
	}

	function d(e) {
		e = e || 0;
		var t = Math.floor(e / 3600),
			n = Math.floor(e / 60);
		return (
			(e -= 60 * n),
			t >= 1 ? ((n -= 60 * t), t + ":" + l(n) + ":" + l(e)) : l(n) + ":" + l(e)
		);
	}
	!(function (e) {
		if (!e.browser) {
			var t = (e.browser = {}),
				n = navigator.userAgent.toLowerCase(),
				i =
					/(chrome)[ \/]([\w.]+)/.exec(n) ||
					/(safari)[ \/]([\w.]+)/.exec(n) ||
					/(webkit)[ \/]([\w.]+)/.exec(n) ||
					/(opera)(?:.*version|)[ \/]([\w.]+)/.exec(n) ||
					/(msie) ([\w.]+)/.exec(n) ||
					(n.indexOf("compatible") < 0 &&
						/(mozilla)(?:.*? rv:([\w.]+)|)/.exec(n)) ||
					[];
			i[1] && ((t[i[1]] = !0), (t.version = i[2] || "0"));
		}
	})(jQuery);
	$(window).load(function () {
		"function" == typeof e.fn.flowplayer &&
			e("video").parent(".flowplayer").flowplayer();
	});
	var u = [],
		c = [],
		p = window.navigator.userAgent;
	(window.flowplayer = function (t) {
		return e.isFunction(t)
			? c.push(t)
			: "number" == typeof t || void 0 === t
			? u[t || 0]
			: e(t).data("flowplayer");
	}),
		e(window).on("beforeunload", function () {
			e.each(u, function (t, n) {
				n.conf.splash
					? n.unload()
					: n.bind("error", function () {
							e(".flowplayer.is-error .fp-message").remove();
					  });
			});
		}),
		e.extend(flowplayer, {
			version: "5.4.4",
			engine: {},
			conf: {},
			support: {},
			defaults: {
				debug: !1,
				disabled: !1,
				engine: "html5",
				fullscreen: window == window.top,
				keyboard: !0,
				ratio: 9 / 16,
				adaptiveRatio: !1,
				flashfit: !1,
				rtmp: 0,
				splash: !1,
				live: !1,
				swf: "//releases.flowplayer.org/5.4.4/flowplayer.swf",
				speeds: [0.25, 0.5, 1, 1.5, 2],
				tooltip: !0,
				volume:
					"object" != typeof localStorage
						? 1
						: "true" == localStorage.muted
						? 0
						: isNaN(localStorage.volume)
						? 1
						: localStorage.volume || 1,
				errors: [
					"",
					"Video loading aborted",
					"Network error",
					"Video not properly encoded",
					"Video file not found",
					"Unsupported video",
					"Skin not found",
					"SWF file not found",
					"Subtitles not found",
					"Invalid RTMP URL",
					"Unsupported video format. Try installing Adobe Flash.",
				],
				errorUrls: [
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"http://get.adobe.com/flashplayer/",
				],
				playlist: [],
			},
		});
	var f = 1;
	(e.fn.flowplayer = function (t, n) {
		return (
			"string" == typeof t &&
				(t = {
					swf: t,
				}),
			e.isFunction(t) && ((n = t), (t = {})),
			(!t && this.data("flowplayer")) ||
				this.each(function () {
					var i,
						a,
						o = e(this).addClass("is-loading"),
						r = e.extend({}, flowplayer.defaults, flowplayer.conf, t, o.data()),
						l = e("video", o).addClass("fp-engine").removeAttr("controls"),
						d = l.length ? new s(l) : null,
						p = {};
					if (
						(flowplayer.support.firstframe || l.detach(), r.playlist.length)
					) {
						var v,
							m = l.attr("preload");
						l.length && l.replaceWith((v = e("<p />"))),
							(l = e("<video />").addClass("fp-engine")),
							v ? v.replaceWith(l) : o.prepend(l),
							l.attr("preload", m),
							"string" == typeof r.playlist[0]
								? l.attr("src", r.playlist[0])
								: e.each(r.playlist[0], function (t, n) {
										for (var i in n)
											n.hasOwnProperty(i) &&
												l.append(
													e("<source />").attr({
														type: "video/" + i,
														src: n[i],
													})
												);
								  }),
							(d = new s(l));
					}
					var g = o.data("flowplayer");
					g && g.unload(),
						o.data("fp-player_id", o.data("fp-player_id") || f++);
					try {
						p = window.localStorage || p;
					} catch (h) {}
					var y =
						(this.currentStyle && "rtl" === this.currentStyle.direction) ||
						(window.getComputedStyle &&
							"rtl" ===
								window
									.getComputedStyle(this, null)
									.getPropertyValue("direction"));
					y && o.addClass("is-rtl");
					var b = g || {
						conf: r,
						currentSpeed: 1,
						volumeLevel:
							"undefined" == typeof r.volume ? 1 * p.volume : r.volume,
						video: {},
						disabled: !1,
						finished: !1,
						loading: !1,
						muted: "true" == p.muted || r.muted,
						paused: !1,
						playing: !1,
						ready: !1,
						splash: !1,
						rtl: y,
						load: function (t, n) {
							if (!(b.error || b.loading || b.disabled)) {
								if (
									((t = d.resolve(t)), e.extend(t, a.pick(t.sources)), t.src)
								) {
									var i = e.Event("load");
									o.trigger(i, [b, t, a]),
										i.isDefaultPrevented()
											? (b.loading = !1)
											: (a.load(t),
											  e.isFunction(t) && (n = t),
											  n && o.one("ready", n));
								}
								return b;
							}
						},
						pause: function (e) {
							return (
								!b.ready ||
									b.seeking ||
									b.disabled ||
									b.loading ||
									(a.pause(), b.one("pause", e)),
								b
							);
						},
						resume: function () {
							return (
								b.ready &&
									b.paused &&
									!b.disabled &&
									(a.resume(),
									b.finished && (b.trigger("resume"), (b.finished = !1))),
								b
							);
						},
						toggle: function () {
							return b.ready ? (b.paused ? b.resume() : b.pause()) : b.load();
						},
						seek: function (t, n) {
							if (b.ready) {
								if ("boolean" == typeof t) {
									var r = 0.1 * b.video.duration;
									t = b.video.time + (t ? r : -r);
								}
								t = i = Math.min(Math.max(t, 0), b.video.duration).toFixed(1);
								var s = e.Event("beforeseek");
								o.trigger(s, [b, t]),
									s.isDefaultPrevented()
										? ((b.seeking = !1), o.toggleClass("is-seeking", b.seeking))
										: (a.seek(t), e.isFunction(n) && o.one("seek", n));
							}
							return b;
						},
						seekTo: function (e, t) {
							var n = void 0 === e ? i : 0.1 * b.video.duration * e;
							return b.seek(n, t);
						},
						mute: function (e) {
							return (
								void 0 === e && (e = !b.muted),
								(p.muted = b.muted = e),
								(p.volume = isNaN(p.volume) ? r.volume : p.volume),
								b.volume(e ? 0 : p.volume, !0),
								b.trigger("mute", e),
								b
							);
						},
						volume: function (e, t) {
							return (
								b.ready &&
									((e = Math.min(Math.max(e, 0), 1)),
									t || (p.volume = e),
									a.volume(e)),
								b
							);
						},
						speed: function (t, n) {
							return (
								b.ready &&
									("boolean" == typeof t &&
										(t =
											r.speeds[
												e.inArray(b.currentSpeed, r.speeds) + (t ? 1 : -1)
											] || b.currentSpeed),
									a.speed(t),
									n && o.one("speed", n)),
								b
							);
						},
						stop: function () {
							return (
								b.ready &&
									(b.pause(),
									b.seek(0, function () {
										o.trigger("stop");
									})),
								b
							);
						},
						unload: function () {
							return (
								o.hasClass("is-embedding") ||
									(r.splash ? (b.trigger("unload"), a.unload()) : b.stop()),
								b
							);
						},
						disable: function (e) {
							return (
								void 0 === e && (e = !b.disabled),
								e != b.disabled && ((b.disabled = e), b.trigger("disable", e)),
								b
							);
						},
					};
					(b.conf = e.extend(b.conf, r)),
						e.each(["bind", "one", "unbind"], function (e, t) {
							b[t] = function (e, n) {
								return o[t](e, n), b;
							};
						}),
						(b.trigger = function (e, t) {
							return o.trigger(e, [b, t]), b;
						}),
						o.data("flowplayer") ||
							o
								.bind("boot", function () {
									return (
										e.each(
											["autoplay", "loop", "preload", "poster"],
											function (e, t) {
												var n = l.attr(t);
												void 0 !== n && (r[t] = n ? n : !0);
											}
										),
										(r.splash ||
											o.hasClass("is-splash") ||
											!flowplayer.support.firstframe) &&
											((b.forcedSplash = !r.splash && !o.hasClass("is-splash")),
											(b.splash = r.splash = r.autoplay = !0),
											o.addClass("is-splash"),
											l.attr("preload", "none")),
										(r.live || o.hasClass("is-live")) &&
											((b.live = r.live = !0), o.addClass("is-live")),
										e.each(c, function () {
											var e;
											flowplayer.support.firstframe ||
												(e = l.clone().prependTo(o)),
												this(b, o),
												e && e.remove();
										}),
										(a = flowplayer.engine[r.engine]),
										a && (a = a(b, o)),
										a.pick(d.initialSources)
											? (b.engine = r.engine)
											: e.each(flowplayer.engine, function (e) {
													return e != r.engine
														? ((a = this(b, o)),
														  a.pick(d.initialSources) && (b.engine = e),
														  !1)
														: void 0;
											  }),
										u.push(b),
										b.engine
											? (r.splash ? b.unload() : b.load(),
											  r.disabled && b.disable(),
											  a.volume(b.volumeLevel),
											  o.one("ready", n),
											  void 0)
											: b.trigger("error", {
													code: flowplayer.support.flashVideo ? 5 : 10,
											  })
									);
								})
								.bind("load", function (t, n) {
									r.splash &&
										e(".flowplayer")
											.filter(".is-ready, .is-loading")
											.not(o)
											.each(function () {
												var t = e(this).data("flowplayer");
												t.conf.splash && t.unload();
											}),
										o.addClass("is-loading"),
										(n.loading = !0);
								})
								.bind("ready", function (e, t, n) {
									function i() {
										o.removeClass("is-loading"), (t.loading = !1);
									}
									(n.time = 0),
										(t.video = n),
										r.splash ? o.one("progress", i) : i(),
										t.muted ? t.mute(!0) : t.volume(t.volumeLevel);
								})
								.bind("unload", function () {
									r.splash && l.remove(),
										o.removeClass("is-loading"),
										(b.loading = !1);
								})
								.bind("ready unload", function (e) {
									var t = "ready" == e.type;
									o.toggleClass("is-splash", !t).toggleClass("is-ready", t),
										(b.ready = t),
										(b.splash = !t);
								})
								.bind("progress", function (e, t, n) {
									t.video.time = n;
								})
								.bind("speed", function (e, t, n) {
									t.currentSpeed = n;
								})
								.bind("volume", function (e, t, n) {
									(t.volumeLevel = Math.round(100 * n) / 100),
										t.muted ? n && t.mute(!1) : (p.volume = n);
								})
								.bind("beforeseek seek", function (e) {
									(b.seeking = "beforeseek" == e.type),
										o.toggleClass("is-seeking", b.seeking);
								})
								.bind(
									"ready pause resume unload finish stop",
									function (e, t, n) {
										(b.paused = /pause|finish|unload|stop/.test(e.type)),
											"ready" == e.type &&
												((b.paused = "none" == r.preload),
												n &&
													(b.paused =
														!n.duration ||
														(!r.autoplay && "none" != r.preload))),
											(b.playing = !b.paused),
											o
												.toggleClass("is-paused", b.paused)
												.toggleClass("is-playing", b.playing),
											b.load.ed || b.pause();
									}
								)
								.bind("finish", function () {
									b.finished = !0;
								})
								.bind("error", function () {
									l.remove();
								}),
						o.trigger("boot", [b, o]).data("flowplayer", b);
				})
		);
	}),
		!(function () {
			var t = function (e) {
					var t = /Version\/(\d\.\d)/.exec(e);
					return t && t.length > 1 ? parseFloat(t[1], 10) : 0;
				},
				n = flowplayer.support,
				i = e.browser,
				a = e("<video loop autoplay preload/>")[0],
				o = i.msie,
				r = navigator.userAgent,
				s = /iPad|MeeGo/.test(r) && !/CriOS/.test(r),
				l = /iPad/.test(r) && /CriOS/.test(r),
				d = /iP(hone|od)/i.test(r) && !/iPad/.test(r),
				u = /Android/.test(r) && !/Firefox/.test(r),
				c = /Android/.test(r) && /Firefox/.test(r),
				p = /Silk/.test(r),
				f = /IEMobile/.test(r),
				v =
					(s ? t(r) : 0,
					u ? parseFloat(/Android\ ((\d+)((\.?)(\d+))?)/.exec(r)[1], 10) : 0);
			e.extend(n, {
				subtitles: !!a.addTextTrack,
				fullscreen:
					!u &&
					(("function" == typeof document.webkitCancelFullScreen &&
						!/Mac OS X 10_5.+Version\/5\.0\.\d Safari/.test(r)) ||
						document.mozFullScreenEnabled ||
						"function" == typeof document.exitFullscreen),
				inlineBlock: !(o && i.version < 8),
				touch: "ontouchstart" in window,
				dataload: !s && !d && !f,
				zeropreload: !o && !u,
				volume: !(s || u || d || p || l),
				cachedVideoTag: !(s || d || l || f),
				firstframe: !(d || s || u || p || l || f || c),
				inlineVideo: !d && !p && !f && (!u || v >= 3),
				hlsDuration: !i.safari || s || d || l,
				seekable: !s && !l,
			});
			try {
				var m = o
					? new ActiveXObject("ShockwaveFlash.ShockwaveFlash").GetVariable(
							"$version"
					  )
					: navigator.plugins["Shockwave Flash"].description;
				(m = m.split(/\D+/)),
					m.length && !m[0] && (m = m.slice(1)),
					(n.flashVideo = m[0] > 9 || (9 == m[0] && m[3] >= 115));
			} catch (g) {}
			try {
				(n.video = !!a.canPlayType), n.video && a.canPlayType("video/mp4");
			} catch (h) {
				n.video = !1;
			}
			n.animation = (function () {
				for (
					var t = ["", "Webkit", "Moz", "O", "ms", "Khtml"],
						n = e("<p/>")[0],
						i = 0;
					i < t.length;
					i++
				)
					if ("undefined" !== n.style[t[i] + "AnimationName"]) return !0;
			})();
		})(),
		window.attachEvent &&
			window.attachEvent("onbeforeunload", function () {
				__flash_savedUnloadHandler = __flash_unloadHandler = function () {};
			}),
		(flowplayer.engine.flash = function (n, i) {
			var a,
				o,
				r,
				s = n.conf;
			n.video;
			var l = {
				pick: function (t) {
					if (flowplayer.support.flashVideo) {
						var n = e.grep(t, function (e) {
							return "flash" == e.type;
						})[0];
						if (n) return n;
						for (var i, a = 0; a < t.length; a++)
							if (((i = t[a]), /mp4|flv/.test(i.type))) return i;
					}
				},
				load: function (l) {
					function d(e) {
						return e
							.replace(/&amp;/g, "%26")
							.replace(/&/g, "%26")
							.replace(/=/g, "%3D");
					}
					var u = e("video", i),
						c = d(l.src);
					is_absolute = /^https?:/.test(c);
					try {
						u.length > 0 && flowplayer.support.video && u[0].pause();
					} catch (p) {}
					var f = function () {
							u.remove();
						},
						v = function (t) {
							return (
								e.grep(t, function (e) {
									return !!u[0].canPlayType("video/" + e.type);
								}).length > 0
							);
						};
					if (
						(flowplayer.support.video && u.prop("autoplay") && v(l.sources)
							? u.one("timeupdate", f)
							: f(),
						is_absolute || s.rtmp || (c = e("<img/>").attr("src", c)[0].src),
						r)
					)
						r.__play(c);
					else {
						a = "fp" + ("" + Math.random()).slice(3, 15);
						var m = {
							hostname: s.embedded ? s.hostname : location.hostname,
							url: c,
							callback: "jQuery." + a,
						};
						i.data("origin") && (m.origin = i.data("origin")),
							is_absolute && delete s.rtmp,
							e.each(
								[
									"key",
									"autoplay",
									"preload",
									"rtmp",
									"loop",
									"debug",
									"preload",
									"splash",
									"bufferTime",
								],
								function (e, t) {
									s[t] && (m[t] = s[t]);
								}
							),
							m.rtmp && (m.rtmp = d(m.rtmp)),
							(o = t(s.swf, m)),
							o.prependTo(i),
							(r = o[0]),
							setTimeout(function () {
								try {
									if (!r.PercentLoaded())
										return i.trigger("error", [
											n,
											{
												code: 7,
												url: s.swf,
											},
										]);
								} catch (e) {}
							}, 5e3),
							(e[a] = function (t, i) {
								s.debug && "status" != t && console.log("--", t, i);
								var a = e.Event(t);
								switch (t) {
									case "ready":
										i = e.extend(l, i);
										break;
									case "click":
										a.flash = !0;
										break;
									case "keydown":
										a.which = i;
										break;
									case "seek":
										l.time = i;
										break;
									case "status":
										n.trigger("progress", i.time),
											i.buffer < l.bytes && !l.buffered
												? ((l.buffer = (i.buffer / l.bytes) * l.duration),
												  n.trigger("buffer", l.buffer))
												: l.buffered ||
												  ((l.buffered = !0), n.trigger("buffered"));
								}
								"buffered" != t &&
									setTimeout(function () {
										n.trigger(a, i);
									}, 1);
							});
					}
				},
				speed: e.noop,
				unload: function () {
					r && r.__unload && r.__unload(),
						delete e[a],
						e("object", i).remove(),
						(r = 0);
				},
			};
			e.each("pause,resume,seek,volume".split(","), function (e, t) {
				l[t] = function (e) {
					n.ready &&
						("seek" == t &&
							n.video.time &&
							!n.paused &&
							n.trigger("beforeseek"),
						void 0 === e ? r["__" + t]() : r["__" + t](e));
				};
			});
			var d = e(window);
			return (
				n.bind("ready fullscreen fullscreen-exit", function (t) {
					var a = i.height(),
						o = i.width();
					if (n.conf.flashfit || /full/.test(t.type)) {
						var r,
							s,
							l = n.isFullscreen,
							u = l && F,
							c = !flowplayer.support.inlineBlock,
							p = l ? (u ? screen.width : d.width()) : o,
							f = l ? (u ? screen.height : d.height()) : a,
							v = 0,
							m = 0,
							g = c ? o : "",
							h = c ? a : "";
						(n.conf.flashfit || "fullscreen" === t.type) &&
							((r = n.video.width / n.video.height),
							(s = n.video.height / n.video.width),
							(h = Math.max(s * p)),
							(g = Math.max(r * f)),
							(h = h > f ? g * s : h),
							(h = Math.min(Math.round(h), f)),
							(g = g > p ? h * r : g),
							(g = Math.min(Math.round(g), p)),
							(m = Math.max(Math.round((f + m - h) / 2), 0)),
							(v = Math.max(Math.round((p + v - g) / 2), 0))),
							e("object", i).css({
								width: g,
								height: h,
								marginTop: m,
								marginLeft: v,
							});
					}
				}),
				l
			);
		});
	var v,
		m = e("<video/>")[0],
		g = {
			ended: "finish",
			pause: "pause",
			play: "resume",
			progress: "buffer",
			timeupdate: "progress",
			volumechange: "volume",
			ratechange: "speed",
			seeked: "seek",
			loadeddata: "ready",
			error: "error",
			dataunavailable: "error",
		},
		h = function (t) {
			return v
				? v.attr({
						type: i(t.type),
						src: t.src,
				  })
				: (v = e("<video/>", {
						src: t.src,
						type: i(t.type),
						class: "fp-engine",
						autoplay: "autoplay",
						preload: "none",
						"x-webkit-airplay": "allow",
				  }));
		};
	flowplayer.engine.html5 = function (t, i) {
		function r(o, r, s) {
			(o.listeners && o.listeners.hasOwnProperty(i.data("fp-player_id"))) ||
				(((o.listeners || (o.listeners = {}))[i.data("fp-player_id")] = !0),
				r.bind("error", function (n) {
					try {
						if (n.originalEvent && e(n.originalEvent.originalTarget).is("img"))
							return n.preventDefault();
						a(e(n.target).attr("type")) &&
							t.trigger("error", {
								code: 4,
							});
					} catch (i) {}
				}),
				e.each(g, function (a, r) {
					o.addEventListener(
						a,
						function (d) {
							if (
								("progress" == r &&
									d.srcElement &&
									0 === d.srcElement.readyState &&
									setTimeout(function () {
										t.video.duration ||
											((r = "error"),
											t.trigger(r, {
												code: 4,
											}));
									}, 1e4),
								f.debug && !/progress/.test(r) && console.log(a, "->", r, d),
								(t.ready || /ready|error/.test(r)) && r && e("video", i).length)
							) {
								var u,
									p = e.Event(r);
								switch (r) {
									case "ready":
										u = e.extend(s, {
											duration: o.duration,
											width: o.videoWidth,
											height: o.videoHeight,
											url: o.currentSrc,
											src: o.currentSrc,
										});
										try {
											u.seekable = o.seekable && o.seekable.end(null);
										} catch (v) {}
										if (
											((l =
												l ||
												setInterval(function () {
													try {
														u.buffer = o.buffered.end(null);
													} catch (e) {}
													u.buffer &&
														(n(u.buffer, 1e3) < n(u.duration, 1e3) &&
														!u.buffered
															? t.trigger("buffer", d)
															: u.buffered ||
															  ((u.buffered = !0),
															  t.trigger("buffer", d).trigger("buffered", d),
															  clearInterval(l),
															  (l = 0)));
												}, 250)),
											!f.live &&
												!u.duration &&
												!c.hlsDuration &&
												"loadeddata" === a)
										) {
											var m = function () {
												u.duration = o.duration;
												try {
													u.seekable = o.seekable && o.seekable.end(null);
												} catch (e) {}
												t.trigger(p, u),
													o.removeEventListener("durationchange", m);
											};
											return o.addEventListener("durationchange", m), void 0;
										}
										break;
									case "progress":
									case "seek":
										if ((t.video.duration, o.currentTime > 0)) {
											u = Math.max(o.currentTime, 0);
											break;
										}
										if ("progress" == r) return;
									case "speed":
										u = n(o.playbackRate);
										break;
									case "volume":
										u = n(o.volume);
										break;
									case "error":
										try {
											u = (d.srcElement || d.originalTarget).error;
										} catch (g) {
											return;
										}
								}
								t.trigger(p, u);
							}
						},
						!1
					);
				}));
		}
		var s,
			l,
			d,
			u = e("video", i),
			c = flowplayer.support,
			p = e("track", u),
			f = t.conf;
		return (s = {
			pick: function (e) {
				if (c.video) {
					if (f.videoTypePreference) {
						var t = o(e, f.videoTypePreference);
						if (t) return t;
					}
					for (var n = 0; n < e.length; n++) if (a(e[n].type)) return e[n];
				}
			},
			load: function (n) {
				if (f.splash && !d)
					(u = h(n).prependTo(i)),
						c.inlineVideo ||
							u.css({
								position: "absolute",
								top: "-9999em",
							}),
						p.length && u.append(p.attr("default", "")),
						f.loop && u.attr("loop", "loop"),
						(d = u[0]);
				else {
					d = u[0];
					var a = u.find("source");
					!d.src && a.length && ((d.src = n.src), a.remove()),
						t.video.src && n.src != t.video.src
							? (u.attr("autoplay", "autoplay"), (d.src = n.src))
							: ("none" != f.preload && c.dataload) ||
							  (c.zeropreload
									? t
											.trigger("ready", n)
											.trigger("pause")
											.one("ready", function () {
												i.trigger("resume");
											})
									: t.one("ready", function () {
											i.trigger("pause");
									  }));
				}
				r(d, e("source", u).add(u), n),
					("none" == f.preload && c.zeropreload && c.dataload) || d.load(),
					f.splash && d.load();
			},
			pause: function () {
				d.pause();
			},
			resume: function () {
				d.play();
			},
			speed: function (e) {
				d.playbackRate = e;
			},
			seek: function (e) {
				try {
					var n = t.paused;
					(d.currentTime = e), n && d.pause();
				} catch (i) {}
			},
			volume: function (e) {
				d.volume = e;
			},
			unload: function () {
				e("video.fp-engine", i).remove(),
					c.cachedVideoTag || (v = null),
					(l = clearInterval(l)),
					(d = 0);
			},
		});
	};
	var y = /\.(\w{3,4})(\?.*)?$/i;
	(e.throttle = function (e, t) {
		var n;
		return function () {
			n ||
				(e.apply(this, arguments),
				(n = 1),
				setTimeout(function () {
					n = 0;
				}, t));
		};
	}),
		(e.fn.slider2 = function (t) {
			var n =
				/iPad/.test(navigator.userAgent) && !/CriOS/.test(navigator.userAgent);
			return this.each(function () {
				var i,
					a,
					o,
					r,
					s,
					l,
					d,
					u,
					c = e(this),
					p = e(document),
					f = c.children(":last"),
					v = !1,
					m = function () {
						(a = c.offset()),
							(o = c.width()),
							(r = c.height()),
							(l = s ? r : o),
							(u = b(d));
					},
					g = function (e) {
						i ||
							e == w.value ||
							(d && !(d > e)) ||
							(c.trigger("slide", [e]), (w.value = e));
					},
					h = function (e) {
						var n = e.pageX;
						!n &&
							e.originalEvent &&
							e.originalEvent.touches &&
							e.originalEvent.touches.length &&
							(n = e.originalEvent.touches[0].pageX);
						var i = s ? e.pageY - a.top : n - a.left;
						i = Math.max(0, Math.min(u || l, i));
						var o = i / l;
						return s && (o = 1 - o), t && (o = 1 - o), y(o, 0, !0);
					},
					y = function (e, t) {
						void 0 === t && (t = 0), e > 1 && (e = 1);
						var i = Math.round(1e3 * e) / 10 + "%";
						return (
							(!d || d >= e) &&
								(n || f.stop(),
								v
									? f.css("width", i)
									: f.animate(
											s
												? {
														height: i,
												  }
												: {
														width: i,
												  },
											t,
											"linear"
									  )),
							e
						);
					},
					b = function (e) {
						return Math.max(0, Math.min(l, s ? (1 - e) * r : e * o));
					},
					w = {
						max: function (e) {
							d = e;
						},
						disable: function (e) {
							i = e;
						},
						slide: function (e, t, n) {
							m(), n && g(e), y(e, t);
						},
						disableAnimation: function (e) {
							v = e !== !1;
						},
					};
				m(),
					c.data("api", w).bind("mousedown.sld touchstart", function (t) {
						if ((t.preventDefault(), !i)) {
							var n = e.throttle(g, 100);
							m(),
								(w.dragging = !0),
								c.addClass("is-dragging"),
								g(h(t)),
								p
									.bind("mousemove.sld touchmove", function (e) {
										e.preventDefault(), n(h(e));
									})
									.one("mouseup touchend", function () {
										(w.dragging = !1),
											c.removeClass("is-dragging"),
											p.unbind("mousemove.sld touchmove");
									});
						}
					});
			});
		}),
		flowplayer(function (t, n) {
			function i(t) {
				return e(".fp-" + t, n);
			}

			function a(t) {
				("0px" === n.css("width") ||
					"0px" === n.css("height") ||
					t !== flowplayer.defaults.ratio) &&
					(parseInt(y, 10) || m.css("paddingTop", 100 * t + "%")),
					l.inlineBlock || e("object", n).height(n.height());
			}

			function o(e) {
				n.toggleClass("is-mouseover", e).toggleClass("is-mouseout", !e);
			}
			var r,
				s = t.conf,
				l = flowplayer.support;
			n.find(".fp-ratio,.fp-ui").remove(),
				n
					.addClass("flowplayer")
					.append(
						'      <div class="ratio"/>      <div class="ui">         <div class="waiting"><em/><em/><em/></div>         <a class="fullscreen"/>         <a class="unload"/>         <p class="speed"/>         <div class="controls">            <a class="play"></a>            <div class="timeline">               <div class="buffer"/>               <div class="progress"/>            </div>            <div class="volume">               <a class="mute"></a>               <div class="volumeslider">                  <div class="volumelevel"/>               </div>            </div>         </div>         <div class="time">            <em class="elapsed">00:00</em>            <em class="remaining"/>            <em class="duration">00:00</em>         </div>         <div class="message"><h2/><p/></div>      </div>'.replace(
							/class="/g,
							'class="fp-'
						)
					);
			var u = i("progress"),
				c = i("buffer"),
				p = i("elapsed"),
				f = i("remaining"),
				v = i("waiting"),
				m = i("ratio"),
				g = i("speed"),
				h = i("duration"),
				y = m.css("paddingTop"),
				b = i("timeline").slider2(t.rtl),
				w = b.data("api"),
				k = (i("volume"), i("fullscreen")),
				x = i("volumeslider").slider2(t.rtl),
				C = x.data("api"),
				T = n.is(".fixed-controls, .no-toggle");
			w.disableAnimation(n.hasClass("is-touch")),
				l.animation || v.html("<p>loading &hellip;</p>"),
				a(s.ratio);
			try {
				s.fullscreen || k.remove();
			} catch (S) {
				k.remove();
			}
			t
				.bind("ready", function () {
					var e = t.video.duration;
					w.disable(t.disabled || !e),
						s.adaptiveRatio && a(t.video.height / t.video.width),
						h.add(f).html(d(e)),
						(e >= 3600 && n.addClass("is-long")) || n.removeClass("is-long"),
						C.slide(t.volumeLevel);
				})
				.bind("unload", function () {
					y || m.css("paddingTop", "");
				})
				.bind("buffer", function () {
					var e = t.video,
						n = e.buffer / e.duration;
					!e.seekable && l.seekable && w.max(n),
						1 > n
							? c.css("width", 100 * n + "%")
							: c.css({
									width: "100%",
							  });
				})
				.bind("speed", function (e, t, n) {
					g.text(n + "x").addClass("fp-hilite"),
						setTimeout(function () {
							g.removeClass("fp-hilite");
						}, 1e3);
				})
				.bind("buffered", function () {
					c.css({
						width: "100%",
					}),
						w.max(1);
				})
				.bind("progress", function () {
					var e = t.video.time,
						n = t.video.duration;
					w.dragging || w.slide(e / n, t.seeking ? 0 : 250),
						p.html(d(e)),
						f.html("-" + d(n - e));
				})
				.bind("finish resume seek", function (e) {
					n.toggleClass("is-finished", "finish" == e.type);
				})
				.bind("stop", function () {
					p.html(d(0)), w.slide(0, 100);
				})
				.bind("finish", function () {
					p.html(d(t.video.duration)),
						w.slide(1, 100),
						n.removeClass("is-seeking");
				})
				.bind("beforeseek", function () {
					u.stop();
				})
				.bind("volume", function () {
					C.slide(t.volumeLevel);
				})
				.bind("disable", function () {
					var e = t.disabled;
					w.disable(e), C.disable(e), n.toggleClass("is-disabled", t.disabled);
				})
				.bind("mute", function (e, t, i) {
					n.toggleClass("is-muted", i);
				})
				.bind("error", function (t, i, a) {
					if ((n.removeClass("is-loading").addClass("is-error"), a)) {
						(a.message = s.errors[a.code]), (i.error = !0);
						var o = e(".fp-message", n);
						e("h2", o).text((i.engine || "html5") + ": " + a.message),
							e("p", o).text(
								a.url || i.video.url || i.video.src || s.errorUrls[a.code]
							),
							n.unbind("mouseenter click").removeClass("is-mouseover");
					}
				})
				.bind("mouseenter mouseleave", function (e) {
					if (!T) {
						var t,
							i = "mouseenter" == e.type;
						o(i),
							i
								? (n.bind("pause.x mousemove.x volume.x", function () {
										o(!0), (t = new Date());
								  }),
								  (r = setInterval(function () {
										new Date() - t > 5e3 && (o(!1), (t = new Date()));
								  }, 100)))
								: (n.unbind(".x"), clearInterval(r));
					}
				})
				.bind("mouseleave", function () {
					(w.dragging || C.dragging) &&
						n.addClass("is-mouseover").removeClass("is-mouseout");
				})
				.bind("click.player", function (n) {
					return e(n.target).is(".fp-ui, .fp-engine") || n.flash
						? (n.preventDefault(), t.toggle())
						: void 0;
				})
				.bind("contextmenu", function (t) {
					t.preventDefault();
					var i = n.offset(),
						a = e(window),
						o = t.clientX - i.left,
						r = t.clientY - i.top + a.scrollTop(),
						s = n
							.find(".fp-context-menu")
							.css({
								left: o + "px",
								top: r + "px",
								display: "block",
							})
							.on("click", function (e) {
								e.stopPropagation();
							});
					e("html").on("click.outsidemenu", function () {
						s.hide(), e("html").off("click.outsidemenu");
					});
				}),
				s.poster && n.css("backgroundImage", "url(" + s.poster + ")");
			var F = n.css("backgroundColor"),
				E =
					"none" != n.css("backgroundImage") ||
					(F && "rgba(0, 0, 0, 0)" != F && "transparent" != F);
			!E ||
				s.splash ||
				s.autoplay ||
				t.bind("ready stop", function () {
					n.addClass("is-poster").one("progress", function () {
						n.removeClass("is-poster");
					});
				}),
				!E && t.forcedSplash && n.css("backgroundColor", "#555"),
				e(".fp-toggle, .fp-play", n).click(t.toggle),
				e.each(["mute", "fullscreen", "unload"], function (e, n) {
					i(n).click(function () {
						t[n]();
					});
				}),
				b.bind("slide", function (e, n) {
					(t.seeking = !0), t.seek(n * t.video.duration);
				}),
				x.bind("slide", function (e, n) {
					t.volume(n);
				}),
				i("time").click(function () {
					e(this).toggleClass("is-inverted");
				}),
				o(T);
		});
	var b,
		w,
		k = "is-help";
	e(document).bind("keydown.fp", function (t) {
		var n = b,
			i = t.ctrlKey || t.metaKey || t.altKey,
			a = t.which,
			o = n && n.conf;
		if (n && o.keyboard && !n.disabled) {
			if (-1 != e.inArray(a, [63, 187, 191])) return w.toggleClass(k), !1;
			if (27 == a && w.hasClass(k)) return w.toggleClass(k), !1;
			if (!i && n.ready) {
				if ((t.preventDefault(), t.shiftKey))
					return 39 == a ? n.speed(!0) : 37 == a && n.speed(!1), void 0;
				if (58 > a && a > 47) return n.seekTo(a - 48);
				switch (a) {
					case 38:
					case 75:
						n.volume(n.volumeLevel + 0.15);
						break;
					case 40:
					case 74:
						n.volume(n.volumeLevel - 0.15);
						break;
					case 39:
					case 76:
						(n.seeking = !0), n.seek(!0);
						break;
					case 37:
					case 72:
						(n.seeking = !0), n.seek(!1);
						break;
					case 190:
						n.seekTo();
						break;
					case 32:
						n.toggle();
						break;
					case 70:
						o.fullscreen && n.fullscreen();
						break;
					case 77:
						n.mute();
						break;
					case 81:
						n.unload();
				}
			}
		}
	}),
		flowplayer(function (t, n) {
			t.conf.keyboard &&
				(n.bind("mouseenter mouseleave", function (e) {
					(b = t.disabled || "mouseenter" != e.type ? 0 : t), b && (w = n);
				}),
				n.append(
					'      <div class="fp-help">         <a class="fp-close"></a>         <div class="fp-help-section fp-help-basics">            <p><em>space</em>play / pause</p>            <p><em>q</em>unload | stop</p>            <p><em>f</em>fullscreen</p>            <p><em>shift</em> + <em>&#8592;</em><em>&#8594;</em>slower / faster <small>(latest Chrome and Safari)</small></p>         </div>         <div class="fp-help-section">            <p><em>&#8593;</em><em>&#8595;</em>volume</p>            <p><em>m</em>mute</p>         </div>         <div class="fp-help-section">            <p><em>&#8592;</em><em>&#8594;</em>seek</p>            <p><em>&nbsp;. </em>seek to previous            </p><p><em>1</em><em>2</em>&hellip;<em>6</em> seek to 10%, 20%, &hellip;60% </p>         </div>      </div>   '
				),
				t.conf.tooltip &&
					e(".fp-ui", n)
						.attr("title", "Hit ? for help")
						.on("mouseout.tip", function () {
							e(this).removeAttr("title").off("mouseout.tip");
						}),
				e(".fp-close", n).click(function () {
					n.toggleClass(k);
				}));
		});
	var x,
		C = e.browser.mozilla ? "moz" : "webkit",
		T = "fullscreen",
		S = "fullscreen-exit",
		F = flowplayer.support.fullscreen,
		E = "function" == typeof document.exitFullscreen,
		_ = navigator.userAgent.toLowerCase(),
		M = /(safari)[ \/]([\w.]+)/.exec(_) && !/(chrome)[ \/]([\w.]+)/.exec(_);
	e(document).bind(
		E ? "fullscreenchange" : C + "fullscreenchange",
		function (t) {
			var n = e(
				document.webkitCurrentFullScreenElement ||
					document.mozFullScreenElement ||
					document.fullscreenElement ||
					t.target
			);
			n.length && !x
				? (x = n.trigger(T, [n]))
				: (x.trigger(S, [x]), (x = null));
		}
	),
		flowplayer(function (t, n) {
			if (t.conf.fullscreen) {
				var i,
					a = e(window),
					o = {
						index: 0,
						pos: 0,
						play: !1,
					};
				(t.isFullscreen = !1),
					(t.fullscreen = function (r) {
						return t.disabled
							? void 0
							: (void 0 === r && (r = !t.isFullscreen),
							  r && (i = a.scrollTop()),
							  ("webkit" != C && !M) ||
									"flash" != t.engine ||
									((o.index = t.video.index),
									t.conf.rtmp &&
										e.extend(o, {
											pos: t.video.time,
											play: t.playing,
										})),
							  F
									? r
										? E
											? n[0].requestFullscreen()
											: (n[0][C + "RequestFullScreen"](
													Element.ALLOW_KEYBOARD_INPUT
											  ),
											  !M ||
													document.webkitCurrentFullScreenElement ||
													document.mozFullScreenElement ||
													n[0][C + "RequestFullScreen"]())
										: E
										? document.exitFullscreen()
										: document[C + "CancelFullScreen"]()
									: t.trigger(r ? T : S, [t]),
							  t);
					});
				var r;
				n.bind("mousedown.fs", function () {
					+new Date() - r < 150 && t.ready && t.fullscreen(), (r = +new Date());
				}),
					t
						.bind(T, function () {
							n.addClass("is-fullscreen"), (t.isFullscreen = !0);
						})
						.bind(S, function () {
							n.removeClass("is-fullscreen"),
								(t.isFullscreen = !1),
								a.scrollTop(i);
						})
						.bind("ready", function () {
							o.index > 0
								? (t.play(o.index), (o.index = 0))
								: o.pos &&
								  !isNaN(o.pos) &&
								  t.resume().seek(o.pos, function () {
										o.play || t.pause(),
											e.extend(o, {
												pos: 0,
												play: !1,
											});
								  });
						});
			}
		}),
		flowplayer(function (t, n) {
			function i() {
				return e(o.query, n);
			}

			function a() {
				return e(o.query + "." + r, n);
			}
			var o = e.extend(
					{
						active: "is-active",
						advance: !0,
						query: ".fp-playlist a",
					},
					t.conf
				),
				r = o.active;
			(t.play = function (n) {
				return void 0 === n
					? t.resume()
					: "number" != typeof n || t.conf.playlist[n]
					? ("number" != typeof n && t.load.apply(null, arguments),
					  t.unbind("resume.fromfirst"),
					  (t.video.index = n),
					  t.load(
							"string" == typeof t.conf.playlist[n]
								? t.conf.playlist[n].toString()
								: e.map(t.conf.playlist[n], function (t) {
										return e.extend({}, t);
								  })
					  ),
					  t)
					: t;
			}),
				(t.next = function (e) {
					e && e.preventDefault();
					var n = t.video.index;
					return (
						-1 != n &&
							((n = n === t.conf.playlist.length - 1 ? 0 : n + 1), t.play(n)),
						t
					);
				}),
				(t.prev = function (e) {
					e && e.preventDefault();
					var n = t.video.index;
					return (
						-1 != n &&
							((n = 0 === n ? t.conf.playlist.length - 1 : n - 1), t.play(n)),
						t
					);
				}),
				e(".fp-next", n).click(t.next),
				e(".fp-prev", n).click(t.prev),
				o.advance &&
					n.unbind("finish.pl").bind("finish.pl", function (e, t) {
						var i = t.video.index + 1;
						i < t.conf.playlist.length || o.loop
							? ((i = i === t.conf.playlist.length ? 0 : i),
							  n.removeClass("is-finished"),
							  setTimeout(function () {
									t.play(i);
							  }))
							: (n.addClass("is-playing"),
							  t.conf.playlist.length > 1 &&
									t.one("resume.fromfirst", function () {
										return t.play(0), !1;
									}));
					});
			var s = !1;
			if (t.conf.playlist.length) {
				s = !0;
				var l = n.find(".fp-playlist");
				if (!l.length) {
					l = e('<div class="fp-playlist"></div>');
					var d = e(".fp-next,.fp-prev", n);
					d.length ? d.eq(0).before(l) : e("video", n).after(l);
				}
				l.empty(),
					e.each(t.conf.playlist, function (t, n) {
						var i;
						if ("string" == typeof n) i = n;
						else
							for (var a in n[0])
								if (n[0].hasOwnProperty(a)) {
									i = n[0][a];
									break;
								}
						l.append(
							e("<a />").attr({
								href: i,
								"data-index": t,
							})
						);
					});
			}
			if (i().length) {
				s ||
					((t.conf.playlist = []),
					i().each(function () {
						var n = e(this).attr("href");
						e(this).attr("data-index", t.conf.playlist.length),
							t.conf.playlist.push(n);
					})),
					n.on("click", o.query, function (n) {
						n.preventDefault();
						var i = e(n.target).closest(o.query),
							a = Number(i.attr("data-index"));
						-1 != a && t.play(a);
					});
				var u = i().filter("[data-cuepoints]").length;
				t.bind("load", function (i, o, s) {
					var l = a().removeClass(r),
						d = l.attr("data-index"),
						c = (s.index = t.video.index || 0),
						p = e('a[data-index="' + c + '"]', n).addClass(r),
						f = c == t.conf.playlist.length - 1;
					n
						.removeClass("video" + d)
						.addClass("video" + c)
						.toggleClass("last-video", f),
						(s.index = o.video.index = c),
						(s.is_last = o.video.is_last = f),
						u && (t.cuepoints = p.data("cuepoints"));
				}).bind("unload.pl", function () {
					a().toggleClass(r);
				});
			}
			t.conf.playlist.length && (t.conf.loop = !1);
		});
	var D = / ?cue\d+ ?/;
	flowplayer(function (t, n) {
		function i(e) {
			(n[0].className = n[0].className.replace(D, " ")),
				e >= 0 && n.addClass("cue" + e);
		}
		var a = 0;
		(t.cuepoints = t.conf.cuepoints || []),
			t
				.bind("progress", function (e, o, r) {
					if (a && 0.015 > r - a) return (a = r);
					a = r;
					for (var s, l = t.cuepoints || [], d = 0; d < l.length; d++)
						(s = l[d]),
							isNaN(s) ||
								(s = {
									time: s,
								}),
							s.time < 0 && (s.time = t.video.duration + s.time),
							(s.index = d),
							Math.abs(s.time - r) < 0.125 * t.currentSpeed &&
								(i(d), n.trigger("cuepoint", [t, s]));
				})
				.bind("unload seek", i),
			t.conf.generate_cuepoints &&
				t
					.bind("load", function () {
						e(".fp-cuepoint", n).remove();
					})
					.bind("ready", function () {
						var i = t.cuepoints || [],
							a = t.video.duration,
							o = e(".fp-timeline", n).css("overflow", "visible");
						e.each(i, function (n, i) {
							var r = i.time || i;
							0 > r && (r = a + i);
							var s = e("<a/>")
								.addClass("fp-cuepoint fp-cuepoint" + n)
								.css("left", 100 * (r / a) + "%");
							s.appendTo(o).mousedown(function () {
								return t.seek(r), !1;
							});
						});
					});
	}),
		flowplayer(function (t, n) {
			function i(e) {
				var t = e.split(":");
				return (
					2 == t.length && t.unshift(0),
					60 * 60 * t[0] + 60 * t[1] + parseFloat(t[2].replace(",", "."))
				);
			}
			var a = e("track", n),
				o = t.conf;
			if (
				!flowplayer.support.subtitles ||
				((t.subtitles = a.length && a[0].track),
				!o.nativesubtitles || "html5" != o.engine)
			) {
				a.remove();
				var r =
					/^(([0-9]{2}:)?[0-9]{2}:[0-9]{2}[,.]{1}[0-9]{3}) --\> (([0-9]{2}:)?[0-9]{2}:[0-9]{2}[,.]{1}[0-9]{3})(.*)/;
				t.subtitles = [];
				var s = a.attr("src");
				if (s) {
					setTimeout(function () {
						e.get(s, function (n) {
							for (
								var a, o, s, l, d = 0, u = n.split("\n"), c = u.length, p = {};
								c > d;
								d++
							)
								if ((o = r.exec(u[d]))) {
									for (
										a = u[d - 1], s = "<p>" + u[++d] + "</p><br/>";
										e.trim(u[++d]) && d < u.length;

									)
										s += "<p>" + u[d] + "</p><br/>";
									(p = {
										title: a,
										startTime: i(o[1]),
										endTime: i(o[2] || o[3]),
										text: s,
									}),
										(l = {
											time: p.startTime,
											subtitle: p,
										}),
										t.subtitles.push(p),
										t.cuepoints.push(l),
										t.cuepoints.push({
											time: p.endTime,
											subtitleEnd: a,
										}),
										0 === p.startTime && t.trigger("cuepoint", l);
								}
						}).fail(function () {
							return (
								t.trigger("error", {
									code: 8,
									url: s,
								}),
								!1
							);
						});
					});
					var l,
						d = e("<div class='fp-subtitle'/>").appendTo(n);
					t.bind("cuepoint", function (e, t, n) {
						n.subtitle
							? ((l = n.index), d.html(n.subtitle.text).addClass("fp-active"))
							: n.subtitleEnd && (d.removeClass("fp-active"), (l = n.index));
					}).bind("seek", function (n, i, a) {
						l &&
							t.cuepoints[l] &&
							t.cuepoints[l].time > a &&
							(d.removeClass("fp-active"), (l = null)),
							e.each(t.cuepoints || [], function (e, n) {
								var i = n.subtitle;
								i && l != n.index
									? a >= n.time &&
									  (!i.endTime || a <= i.endTime) &&
									  t.trigger("cuepoint", n)
									: n.subtitleEnd &&
									  a >= n.time &&
									  n.index == l + 1 &&
									  t.trigger("cuepoint", n);
							});
					});
				}
			}
		}),
		flowplayer(function (t, n) {
			function i() {
				if (o && "undefined" != typeof _gat) {
					var e = _gat._getTracker(a),
						i = t.video;
					e._setAllowLinker(!0),
						e._trackEvent(
							"Video / Seconds played",
							t.engine + "/" + i.type,
							n.attr("title") || i.src.split("/").slice(-1)[0].replace(y, ""),
							Math.round(o / 1e3)
						),
						(o = 0);
				}
			}
			var a = t.conf.analytics,
				o = 0,
				r = 0;
			a &&
				("undefined" == typeof _gat &&
					e.getScript("//google-analytics.com/ga.js"),
				t
					.bind("load unload", i)
					.bind("progress", function () {
						t.seeking || ((o += r ? +new Date() - r : 0), (r = +new Date()));
					})
					.bind("pause", function () {
						r = 0;
					}),
				e(window).unload(i));
		});
	var A = /IEMobile/.test(p);
	(flowplayer.support.touch || A) &&
		flowplayer(function (t, n) {
			var i = /Android/.test(p) && !/Firefox/.test(p) && !/Opera/.test(p),
				a = /Silk/.test(p),
				o = i ? parseFloat(/Android\ (\d\.\d)/.exec(p)[1], 10) : 0;
			if (
				i &&
				((t.conf.videoTypePreference = "mp4"), !/Chrome/.test(p) && 4 > o)
			) {
				var r = t.load;
				t.load = function () {
					var e = r.apply(t, arguments);
					return t.trigger("ready", t, t.video), e;
				};
			}
			flowplayer.support.volume || n.addClass("no-volume no-mute"),
				n.addClass("is-touch"),
				n.find(".fp-timeline").data("api").disableAnimation();
			var s = !1;
			n
				.bind("touchmove", function () {
					s = !0;
				})
				.bind("touchend click", function () {
					return s
						? ((s = !1), void 0)
						: t.playing && !n.hasClass("is-mouseover")
						? (n.addClass("is-mouseover").removeClass("is-mouseout"), !1)
						: (t.paused && n.hasClass("is-mouseout") && !t.splash && t.toggle(),
						  t.paused && A && e("video.fp-engine", n)[0].play(),
						  void 0);
				}),
				t.conf.native_fullscreen &&
					"function" == typeof e("<video />")[0].webkitEnterFullScreen &&
					(t.fullscreen = function () {
						var t = e("video.fp-engine", n);
						t[0].webkitEnterFullScreen(),
							t.one("webkitendfullscreen", function () {
								t.prop("controls", !0).prop("controls", !1);
							});
					}),
				(i || a) &&
					t.bind("ready", function () {
						var i = e("video.fp-engine", n);
						i.one("canplay", function () {
							i[0].play();
						}),
							i[0].play(),
							t.bind("progress.dur", function () {
								var a = i[0].duration;
								1 !== a &&
									((t.video.duration = a),
									e(".fp-duration", n).html(d(a)),
									t.unbind("progress.dur"));
							});
					});
		}),
		flowplayer(function (t, n) {
			if (t.conf.embed !== !1) {
				var i = t.conf,
					a = e(".fp-ui", n),
					o = e("<a/>", {
						class: "fp-embed",
						title: "Copy to your site",
					}).appendTo(a),
					r = e("<div/>", {
						class: "fp-embed-code",
					})
						.append(
							"<label>Paste this HTML code on your site to embed.</label><textarea/>"
						)
						.appendTo(a),
					s = e("textarea", r);
				(t.embedCode = function () {
					var a = t.video,
						o = a.width || n.width(),
						r = a.height || n.height(),
						s = e("<div/>", {
							class: "flowplayer",
							css: {
								width: o,
								height: r,
							},
						}),
						l = e("<video/>").appendTo(s);
					e.each(["origin", "analytics", "key", "rtmp"], function (e, t) {
						i[t] && s.attr("data-" + t, i[t]);
					}),
						i.logo &&
							s.attr("data-logo", e("<img />").attr("src", i.logo)[0].src),
						e.each(a.sources, function (t, n) {
							var a = n.src;
							((!/^https?:/.test(n.src) && "flash" !== n.type) || !i.rtmp) &&
								(a = e("<img/>").attr("src", n.src)[0].src),
								l.append(
									e("<source/>", {
										type: "video/" + n.type,
										src: a,
									})
								);
						});
					var d = {
						src: "//embed.flowplayer.org/5.4.4/embed.min.js",
					};
					e.isPlainObject(i.embed) &&
						((d["data-swf"] = i.embed.swf),
						(d["data-library"] = i.embed.library),
						(d.src = i.embed.script || d.src),
						i.embed.skin && (d["data-skin"] = i.embed.skin));
					var u = e("<foo/>", d).append(s);
					return e("<p/>")
						.append(u)
						.html()
						.replace(/<(\/?)foo/g, "<$1script");
				}),
					n.fptip(".fp-embed", "is-embedding"),
					s.click(function () {
						this.select();
					}),
					o.click(function () {
						s.text(t.embedCode()), s[0].focus(), s[0].select();
					});
			}
		}),
		(e.fn.fptip = function (t, n) {
			return this.each(function () {
				function i() {
					a.removeClass(n), e(document).unbind(".st");
				}
				var a = e(this);
				e(t || "a", this).click(function (t) {
					t.preventDefault(),
						a.toggleClass(n),
						a.hasClass(n) &&
							e(document)
								.bind("keydown.st", function (e) {
									27 == e.which && i();
								})
								.bind("click.st", function (t) {
									e(t.target).parents("." + n).length || i();
								});
				});
			});
		});
})(jQuery);
flowplayer(function (e, o) {
	function l(e) {
		var o = a("<a/>")[0];
		return (o.href = e), o.hostname;
	}
	var a = jQuery,
		r = e.conf,
		i = r.swf.indexOf("flowplayer.org") && r.e && o.data("origin"),
		n = i ? l(i) : location.hostname,
		t = r.key;
	if (
		("file:" == location.protocol && (n = "localhost"),
		(e.load.ed = 1),
		(r.hostname = n),
		(r.origin = i || location.href),
		i && o.addClass("is-embedded"),
		"string" == typeof t && (t = t.split(/,\s*/)),
		t && "function" == typeof key_check && key_check(t, n))
	)
		r.logo &&
			o.append(
				a("<a>", {
					class: "fp-logo",
					href: i,
				}).append(
					a("<img/>", {
						src: r.logo,
					})
				)
			);
	else {
		var s = a("<a/>").attr("href", "http://flowplayer.org").appendTo(o);
		a(".fp-controls", o);
		var p = a(
			'<div class="fp-context-menu"><ul><li class="copyright">&copy; 2013</li><li><a href="http://flowplayer.org">About Flowplayer</a></li><li><a href="http://flowplayer.org/license">GPL based license</a></li></ul></div>'
		).appendTo(o);
		e.bind("pause resume finish unload", function (e, l) {
			var r = -1;
			l.video.src &&
				a.each(
					[
						["org", "flowplayer", "drive"],
						["org", "flowplayer", "my"],
					],
					function (e, o) {
						return (
							(r = l.video.src.indexOf("://" + o.reverse().join("."))), -1 === r
						);
					}
				),
				/pause|resume/.test(e.type) && "flash" != l.engine && 4 != r && 5 != r
					? (s.show().css({
							position: "absolute",
							left: 16,
							bottom: 36,
							zIndex: 99999,
							width: 100,
							height: 20,
							backgroundImage:
								"url(" +
								[
									".png",
									"logo",
									"/",
									".net",
									".cloudfront",
									"d32wqyuo10o653",
									"//",
								]
									.reverse()
									.join("") +
								")",
					  }),
					  (l.load.ed = s.is(":visible") && a.contains(o[0], p[0])),
					  l.load.ed || l.pause())
					: s.hide();
		});
	}
});
// js/jquery.hoverIntent.js
(function ($) {
	$.fn.hoverIntent = function (f, g) {
		var cfg = {
			sensitivity: 7,
			interval: 100,
			timeout: 0,
		};
		cfg = $.extend(
			cfg,
			g
				? {
						over: f,
						out: g,
				  }
				: f
		);
		var cX, cY, pX, pY;
		var track = function (ev) {
			cX = ev.pageX;
			cY = ev.pageY;
		};
		var compare = function (ev, ob) {
			ob.hoverIntent_t = clearTimeout(ob.hoverIntent_t);
			if (Math.abs(pX - cX) + Math.abs(pY - cY) < cfg.sensitivity) {
				$(ob).unbind("mousemove", track);
				ob.hoverIntent_s = 1;
				return cfg.over.apply(ob, [ev]);
			} else {
				pX = cX;
				pY = cY;
				ob.hoverIntent_t = setTimeout(function () {
					compare(ev, ob);
				}, cfg.interval);
			}
		};
		var delay = function (ev, ob) {
			ob.hoverIntent_t = clearTimeout(ob.hoverIntent_t);
			ob.hoverIntent_s = 0;
			return cfg.out.apply(ob, [ev]);
		};
		var handleHover = function (e) {
			var ev = jQuery.extend({}, e);
			var ob = this;
			if (ob.hoverIntent_t) {
				ob.hoverIntent_t = clearTimeout(ob.hoverIntent_t);
			}
			if (e.type == "mouseenter") {
				pX = ev.pageX;
				pY = ev.pageY;
				$(ob).bind("mousemove", track);
				if (ob.hoverIntent_s != 1) {
					ob.hoverIntent_t = setTimeout(function () {
						compare(ev, ob);
					}, cfg.interval);
				}
			} else {
				$(ob).unbind("mousemove", track);
				if (ob.hoverIntent_s == 1) {
					ob.hoverIntent_t = setTimeout(function () {
						delay(ev, ob);
					}, cfg.timeout);
				}
			}
		};
		return this.bind("mouseenter", handleHover).bind("mouseleave", handleHover);
	};
})(jQuery);
// /js/jquery-ui.tooltip.js
(function (e, t) {
	function i(t, i) {
		var s,
			n,
			r,
			o = t.nodeName.toLowerCase();
		return "area" === o
			? ((s = t.parentNode),
			  (n = s.name),
			  t.href && n && "map" === s.nodeName.toLowerCase()
					? ((r = e("img[usemap=#" + n + "]")[0]), !!r && a(r))
					: !1)
			: (/input|select|textarea|button|object/.test(o)
					? !t.disabled
					: "a" === o
					? t.href || i
					: i) && a(t);
	}

	function a(t) {
		return (
			e.expr.filters.visible(t) &&
			!e(t)
				.parents()
				.addBack()
				.filter(function () {
					return "hidden" === e.css(this, "visibility");
				}).length
		);
	}
	var s = 0,
		n = /^ui-id-\d+$/;
	(e.ui = e.ui || {}),
		e.extend(e.ui, {
			version: "1.10.3",
			keyCode: {
				BACKSPACE: 8,
				COMMA: 188,
				DELETE: 46,
				DOWN: 40,
				END: 35,
				ENTER: 13,
				ESCAPE: 27,
				HOME: 36,
				LEFT: 37,
				NUMPAD_ADD: 107,
				NUMPAD_DECIMAL: 110,
				NUMPAD_DIVIDE: 111,
				NUMPAD_ENTER: 108,
				NUMPAD_MULTIPLY: 106,
				NUMPAD_SUBTRACT: 109,
				PAGE_DOWN: 34,
				PAGE_UP: 33,
				PERIOD: 190,
				RIGHT: 39,
				SPACE: 32,
				TAB: 9,
				UP: 38,
			},
		}),
		e.fn.extend({
			focus: (function (t) {
				return function (i, a) {
					return "number" == typeof i
						? this.each(function () {
								var t = this;
								setTimeout(function () {
									e(t).focus(), a && a.call(t);
								}, i);
						  })
						: t.apply(this, arguments);
				};
			})(e.fn.focus),
			scrollParent: function () {
				var t;
				return (
					(t =
						(e.ui.ie && /(static|relative)/.test(this.css("position"))) ||
						/absolute/.test(this.css("position"))
							? this.parents()
									.filter(function () {
										return (
											/(relative|absolute|fixed)/.test(
												e.css(this, "position")
											) &&
											/(auto|scroll)/.test(
												e.css(this, "overflow") +
													e.css(this, "overflow-y") +
													e.css(this, "overflow-x")
											)
										);
									})
									.eq(0)
							: this.parents()
									.filter(function () {
										return /(auto|scroll)/.test(
											e.css(this, "overflow") +
												e.css(this, "overflow-y") +
												e.css(this, "overflow-x")
										);
									})
									.eq(0)),
					/fixed/.test(this.css("position")) || !t.length ? e(document) : t
				);
			},
			zIndex: function (i) {
				if (i !== t) return this.css("zIndex", i);
				if (this.length)
					for (var a, s, n = e(this[0]); n.length && n[0] !== document; ) {
						if (
							((a = n.css("position")),
							("absolute" === a || "relative" === a || "fixed" === a) &&
								((s = parseInt(n.css("zIndex"), 10)), !isNaN(s) && 0 !== s))
						)
							return s;
						n = n.parent();
					}
				return 0;
			},
			uniqueId: function () {
				return this.each(function () {
					this.id || (this.id = "ui-id-" + ++s);
				});
			},
			removeUniqueId: function () {
				return this.each(function () {
					n.test(this.id) && e(this).removeAttr("id");
				});
			},
		}),
		e.extend(e.expr[":"], {
			data: e.expr.createPseudo
				? e.expr.createPseudo(function (t) {
						return function (i) {
							return !!e.data(i, t);
						};
				  })
				: function (t, i, a) {
						return !!e.data(t, a[3]);
				  },
			focusable: function (t) {
				return i(t, !isNaN(e.attr(t, "tabindex")));
			},
			tabbable: function (t) {
				var a = e.attr(t, "tabindex"),
					s = isNaN(a);
				return (s || a >= 0) && i(t, !s);
			},
		}),
		e("<a>").outerWidth(1).jquery ||
			e.each(["Width", "Height"], function (i, a) {
				function s(t, i, a, s) {
					return (
						e.each(n, function () {
							(i -= parseFloat(e.css(t, "padding" + this)) || 0),
								a &&
									(i -= parseFloat(e.css(t, "border" + this + "Width")) || 0),
								s && (i -= parseFloat(e.css(t, "margin" + this)) || 0);
						}),
						i
					);
				}
				var n = "Width" === a ? ["Left", "Right"] : ["Top", "Bottom"],
					r = a.toLowerCase(),
					o = {
						innerWidth: e.fn.innerWidth,
						innerHeight: e.fn.innerHeight,
						outerWidth: e.fn.outerWidth,
						outerHeight: e.fn.outerHeight,
					};
				(e.fn["inner" + a] = function (i) {
					return i === t
						? o["inner" + a].call(this)
						: this.each(function () {
								e(this).css(r, s(this, i) + "px");
						  });
				}),
					(e.fn["outer" + a] = function (t, i) {
						return "number" != typeof t
							? o["outer" + a].call(this, t)
							: this.each(function () {
									e(this).css(r, s(this, t, !0, i) + "px");
							  });
					});
			}),
		e.fn.addBack ||
			(e.fn.addBack = function (e) {
				return this.add(
					null == e ? this.prevObject : this.prevObject.filter(e)
				);
			}),
		e("<a>").data("a-b", "a").removeData("a-b").data("a-b") &&
			(e.fn.removeData = (function (t) {
				return function (i) {
					return arguments.length ? t.call(this, e.camelCase(i)) : t.call(this);
				};
			})(e.fn.removeData)),
		(e.ui.ie = !!/msie [\w.]+/.exec(navigator.userAgent.toLowerCase())),
		(e.support.selectstart = "onselectstart" in document.createElement("div")),
		e.fn.extend({
			disableSelection: function () {
				return this.bind(
					(e.support.selectstart ? "selectstart" : "mousedown") +
						".ui-disableSelection",
					function (e) {
						e.preventDefault();
					}
				);
			},
			enableSelection: function () {
				return this.unbind(".ui-disableSelection");
			},
		}),
		e.extend(e.ui, {
			plugin: {
				add: function (t, i, a) {
					var s,
						n = e.ui[t].prototype;
					for (s in a)
						(n.plugins[s] = n.plugins[s] || []), n.plugins[s].push([i, a[s]]);
				},
				call: function (e, t, i) {
					var a,
						s = e.plugins[t];
					if (
						s &&
						e.element[0].parentNode &&
						11 !== e.element[0].parentNode.nodeType
					)
						for (a = 0; s.length > a; a++)
							e.options[s[a][0]] && s[a][1].apply(e.element, i);
				},
			},
			hasScroll: function (t, i) {
				if ("hidden" === e(t).css("overflow")) return !1;
				var a = i && "left" === i ? "scrollLeft" : "scrollTop",
					s = !1;
				return t[a] > 0 ? !0 : ((t[a] = 1), (s = t[a] > 0), (t[a] = 0), s);
			},
		});
})(jQuery);
(function (e, t) {
	var i = 0,
		s = Array.prototype.slice,
		a = e.cleanData;
	(e.cleanData = function (t) {
		for (var i, s = 0; null != (i = t[s]); s++)
			try {
				e(i).triggerHandler("remove");
			} catch (n) {}
		a(t);
	}),
		(e.widget = function (i, s, a) {
			var n,
				r,
				o,
				h,
				l = {},
				u = i.split(".")[0];
			(i = i.split(".")[1]),
				(n = u + "-" + i),
				a || ((a = s), (s = e.Widget)),
				(e.expr[":"][n.toLowerCase()] = function (t) {
					return !!e.data(t, n);
				}),
				(e[u] = e[u] || {}),
				(r = e[u][i]),
				(o = e[u][i] =
					function (e, i) {
						return this._createWidget
							? (arguments.length && this._createWidget(e, i), t)
							: new o(e, i);
					}),
				e.extend(o, r, {
					version: a.version,
					_proto: e.extend({}, a),
					_childConstructors: [],
				}),
				(h = new s()),
				(h.options = e.widget.extend({}, h.options)),
				e.each(a, function (i, a) {
					return e.isFunction(a)
						? ((l[i] = (function () {
								var e = function () {
										return s.prototype[i].apply(this, arguments);
									},
									t = function (e) {
										return s.prototype[i].apply(this, e);
									};
								return function () {
									var i,
										s = this._super,
										n = this._superApply;
									return (
										(this._super = e),
										(this._superApply = t),
										(i = a.apply(this, arguments)),
										(this._super = s),
										(this._superApply = n),
										i
									);
								};
						  })()),
						  t)
						: ((l[i] = a), t);
				}),
				(o.prototype = e.widget.extend(
					h,
					{
						widgetEventPrefix: r ? h.widgetEventPrefix : i,
					},
					l,
					{
						constructor: o,
						namespace: u,
						widgetName: i,
						widgetFullName: n,
					}
				)),
				r
					? (e.each(r._childConstructors, function (t, i) {
							var s = i.prototype;
							e.widget(s.namespace + "." + s.widgetName, o, i._proto);
					  }),
					  delete r._childConstructors)
					: s._childConstructors.push(o),
				e.widget.bridge(i, o);
		}),
		(e.widget.extend = function (i) {
			for (var a, n, r = s.call(arguments, 1), o = 0, h = r.length; h > o; o++)
				for (a in r[o])
					(n = r[o][a]),
						r[o].hasOwnProperty(a) &&
							n !== t &&
							(i[a] = e.isPlainObject(n)
								? e.isPlainObject(i[a])
									? e.widget.extend({}, i[a], n)
									: e.widget.extend({}, n)
								: n);
			return i;
		}),
		(e.widget.bridge = function (i, a) {
			var n = a.prototype.widgetFullName || i;
			e.fn[i] = function (r) {
				var o = "string" == typeof r,
					h = s.call(arguments, 1),
					l = this;
				return (
					(r = !o && h.length ? e.widget.extend.apply(null, [r].concat(h)) : r),
					o
						? this.each(function () {
								var s,
									a = e.data(this, n);
								return a
									? e.isFunction(a[r]) && "_" !== r.charAt(0)
										? ((s = a[r].apply(a, h)),
										  s !== a && s !== t
												? ((l = s && s.jquery ? l.pushStack(s.get()) : s), !1)
												: t)
										: e.error(
												"no such method '" +
													r +
													"' for " +
													i +
													" widget instance"
										  )
									: e.error(
											"cannot call methods on " +
												i +
												" prior to initialization; " +
												"attempted to call method '" +
												r +
												"'"
									  );
						  })
						: this.each(function () {
								var t = e.data(this, n);
								t ? t.option(r || {})._init() : e.data(this, n, new a(r, this));
						  }),
					l
				);
			};
		}),
		(e.Widget = function () {}),
		(e.Widget._childConstructors = []),
		(e.Widget.prototype = {
			widgetName: "widget",
			widgetEventPrefix: "",
			defaultElement: "<div>",
			options: {
				disabled: !1,
				create: null,
			},
			_createWidget: function (t, s) {
				(s = e(s || this.defaultElement || this)[0]),
					(this.element = e(s)),
					(this.uuid = i++),
					(this.eventNamespace = "." + this.widgetName + this.uuid),
					(this.options = e.widget.extend(
						{},
						this.options,
						this._getCreateOptions(),
						t
					)),
					(this.bindings = e()),
					(this.hoverable = e()),
					(this.focusable = e()),
					s !== this &&
						(e.data(s, this.widgetFullName, this),
						this._on(!0, this.element, {
							remove: function (e) {
								e.target === s && this.destroy();
							},
						}),
						(this.document = e(s.style ? s.ownerDocument : s.document || s)),
						(this.window = e(
							this.document[0].defaultView || this.document[0].parentWindow
						))),
					this._create(),
					this._trigger("create", null, this._getCreateEventData()),
					this._init();
			},
			_getCreateOptions: e.noop,
			_getCreateEventData: e.noop,
			_create: e.noop,
			_init: e.noop,
			destroy: function () {
				this._destroy(),
					this.element
						.unbind(this.eventNamespace)
						.removeData(this.widgetName)
						.removeData(this.widgetFullName)
						.removeData(e.camelCase(this.widgetFullName)),
					this.widget()
						.unbind(this.eventNamespace)
						.removeAttr("aria-disabled")
						.removeClass(
							this.widgetFullName + "-disabled " + "ui-state-disabled"
						),
					this.bindings.unbind(this.eventNamespace),
					this.hoverable.removeClass("ui-state-hover"),
					this.focusable.removeClass("ui-state-focus");
			},
			_destroy: e.noop,
			widget: function () {
				return this.element;
			},
			option: function (i, s) {
				var a,
					n,
					r,
					o = i;
				if (0 === arguments.length) return e.widget.extend({}, this.options);
				if ("string" == typeof i)
					if (((o = {}), (a = i.split(".")), (i = a.shift()), a.length)) {
						for (
							n = o[i] = e.widget.extend({}, this.options[i]), r = 0;
							a.length - 1 > r;
							r++
						)
							(n[a[r]] = n[a[r]] || {}), (n = n[a[r]]);
						if (((i = a.pop()), s === t)) return n[i] === t ? null : n[i];
						n[i] = s;
					} else {
						if (s === t) return this.options[i] === t ? null : this.options[i];
						o[i] = s;
					}
				return this._setOptions(o), this;
			},
			_setOptions: function (e) {
				var t;
				for (t in e) this._setOption(t, e[t]);
				return this;
			},
			_setOption: function (e, t) {
				return (
					(this.options[e] = t),
					"disabled" === e &&
						(this.widget()
							.toggleClass(
								this.widgetFullName + "-disabled ui-state-disabled",
								!!t
							)
							.attr("aria-disabled", t),
						this.hoverable.removeClass("ui-state-hover"),
						this.focusable.removeClass("ui-state-focus")),
					this
				);
			},
			enable: function () {
				return this._setOption("disabled", !1);
			},
			disable: function () {
				return this._setOption("disabled", !0);
			},
			_on: function (i, s, a) {
				var n,
					r = this;
				"boolean" != typeof i && ((a = s), (s = i), (i = !1)),
					a
						? ((s = n = e(s)), (this.bindings = this.bindings.add(s)))
						: ((a = s), (s = this.element), (n = this.widget())),
					e.each(a, function (a, o) {
						function h() {
							return i ||
								(r.options.disabled !== !0 &&
									!e(this).hasClass("ui-state-disabled"))
								? ("string" == typeof o ? r[o] : o).apply(r, arguments)
								: t;
						}
						"string" != typeof o &&
							(h.guid = o.guid = o.guid || h.guid || e.guid++);
						var l = a.match(/^(\w+)\s*(.*)$/),
							u = l[1] + r.eventNamespace,
							c = l[2];
						c ? n.delegate(c, u, h) : s.bind(u, h);
					});
			},
			_off: function (e, t) {
				(t =
					(t || "").split(" ").join(this.eventNamespace + " ") +
					this.eventNamespace),
					e.unbind(t).undelegate(t);
			},
			_delay: function (e, t) {
				function i() {
					return ("string" == typeof e ? s[e] : e).apply(s, arguments);
				}
				var s = this;
				return setTimeout(i, t || 0);
			},
			_hoverable: function (t) {
				(this.hoverable = this.hoverable.add(t)),
					this._on(t, {
						mouseenter: function (t) {
							e(t.currentTarget).addClass("ui-state-hover");
						},
						mouseleave: function (t) {
							e(t.currentTarget).removeClass("ui-state-hover");
						},
					});
			},
			_focusable: function (t) {
				(this.focusable = this.focusable.add(t)),
					this._on(t, {
						focusin: function (t) {
							e(t.currentTarget).addClass("ui-state-focus");
						},
						focusout: function (t) {
							e(t.currentTarget).removeClass("ui-state-focus");
						},
					});
			},
			_trigger: function (t, i, s) {
				var a,
					n,
					r = this.options[t];
				if (
					((s = s || {}),
					(i = e.Event(i)),
					(i.type = (
						t === this.widgetEventPrefix ? t : this.widgetEventPrefix + t
					).toLowerCase()),
					(i.target = this.element[0]),
					(n = i.originalEvent))
				)
					for (a in n) a in i || (i[a] = n[a]);
				return (
					this.element.trigger(i, s),
					!(
						(e.isFunction(r) &&
							r.apply(this.element[0], [i].concat(s)) === !1) ||
						i.isDefaultPrevented()
					)
				);
			},
		}),
		e.each(
			{
				show: "fadeIn",
				hide: "fadeOut",
			},
			function (t, i) {
				e.Widget.prototype["_" + t] = function (s, a, n) {
					"string" == typeof a &&
						(a = {
							effect: a,
						});
					var r,
						o = a ? (a === !0 || "number" == typeof a ? i : a.effect || i) : t;
					(a = a || {}),
						"number" == typeof a &&
							(a = {
								duration: a,
							}),
						(r = !e.isEmptyObject(a)),
						(a.complete = n),
						a.delay && s.delay(a.delay),
						r && e.effects && e.effects.effect[o]
							? s[t](a)
							: o !== t && s[o]
							? s[o](a.duration, a.easing, n)
							: s.queue(function (i) {
									e(this)[t](), n && n.call(s[0]), i();
							  });
				};
			}
		);
})(jQuery);
(function (e, t) {
	function i(e, t, i) {
		return [
			parseFloat(e[0]) * (p.test(e[0]) ? t / 100 : 1),
			parseFloat(e[1]) * (p.test(e[1]) ? i / 100 : 1),
		];
	}

	function s(t, i) {
		return parseInt(e.css(t, i), 10) || 0;
	}

	function a(t) {
		var i = t[0];
		return 9 === i.nodeType
			? {
					width: t.width(),
					height: t.height(),
					offset: {
						top: 0,
						left: 0,
					},
			  }
			: e.isWindow(i)
			? {
					width: t.width(),
					height: t.height(),
					offset: {
						top: t.scrollTop(),
						left: t.scrollLeft(),
					},
			  }
			: i.preventDefault
			? {
					width: 0,
					height: 0,
					offset: {
						top: i.pageY,
						left: i.pageX,
					},
			  }
			: {
					width: t.outerWidth(),
					height: t.outerHeight(),
					offset: t.offset(),
			  };
	}
	e.ui = e.ui || {};
	var n,
		r = Math.max,
		o = Math.abs,
		h = Math.round,
		l = /left|center|right/,
		u = /top|center|bottom/,
		c = /[\+\-]\d+(\.[\d]+)?%?/,
		d = /^\w+/,
		p = /%$/,
		f = e.fn.position;
	(e.position = {
		scrollbarWidth: function () {
			if (n !== t) return n;
			var i,
				s,
				a = e(
					"<div style='display:block;width:50px;height:50px;overflow:hidden;'><div style='height:100px;width:auto;'></div></div>"
				),
				r = a.children()[0];
			return (
				e("body").append(a),
				(i = r.offsetWidth),
				a.css("overflow", "scroll"),
				(s = r.offsetWidth),
				i === s && (s = a[0].clientWidth),
				a.remove(),
				(n = i - s)
			);
		},
		getScrollInfo: function (t) {
			var i = t.isWindow ? "" : t.element.css("overflow-x"),
				s = t.isWindow ? "" : t.element.css("overflow-y"),
				a =
					"scroll" === i ||
					("auto" === i && t.width < t.element[0].scrollWidth),
				n =
					"scroll" === s ||
					("auto" === s && t.height < t.element[0].scrollHeight);
			return {
				width: n ? e.position.scrollbarWidth() : 0,
				height: a ? e.position.scrollbarWidth() : 0,
			};
		},
		getWithinInfo: function (t) {
			var i = e(t || window),
				s = e.isWindow(i[0]);
			return {
				element: i,
				isWindow: s,
				offset: i.offset() || {
					left: 0,
					top: 0,
				},
				scrollLeft: i.scrollLeft(),
				scrollTop: i.scrollTop(),
				width: s ? i.width() : i.outerWidth(),
				height: s ? i.height() : i.outerHeight(),
			};
		},
	}),
		(e.fn.position = function (t) {
			if (!t || !t.of) return f.apply(this, arguments);
			t = e.extend({}, t);
			var n,
				p,
				m,
				g,
				v,
				y,
				b = e(t.of),
				_ = e.position.getWithinInfo(t.within),
				x = e.position.getScrollInfo(_),
				k = (t.collision || "flip").split(" "),
				w = {};
			return (
				(y = a(b)),
				b[0].preventDefault && (t.at = "left top"),
				(p = y.width),
				(m = y.height),
				(g = y.offset),
				(v = e.extend({}, g)),
				e.each(["my", "at"], function () {
					var e,
						i,
						s = (t[this] || "").split(" ");
					1 === s.length &&
						(s = l.test(s[0])
							? s.concat(["center"])
							: u.test(s[0])
							? ["center"].concat(s)
							: ["center", "center"]),
						(s[0] = l.test(s[0]) ? s[0] : "center"),
						(s[1] = u.test(s[1]) ? s[1] : "center"),
						(e = c.exec(s[0])),
						(i = c.exec(s[1])),
						(w[this] = [e ? e[0] : 0, i ? i[0] : 0]),
						(t[this] = [d.exec(s[0])[0], d.exec(s[1])[0]]);
				}),
				1 === k.length && (k[1] = k[0]),
				"right" === t.at[0]
					? (v.left += p)
					: "center" === t.at[0] && (v.left += p / 2),
				"bottom" === t.at[1]
					? (v.top += m)
					: "center" === t.at[1] && (v.top += m / 2),
				(n = i(w.at, p, m)),
				(v.left += n[0]),
				(v.top += n[1]),
				this.each(function () {
					var a,
						l,
						u = e(this),
						c = u.outerWidth(),
						d = u.outerHeight(),
						f = s(this, "marginLeft"),
						y = s(this, "marginTop"),
						D = c + f + s(this, "marginRight") + x.width,
						T = d + y + s(this, "marginBottom") + x.height,
						M = e.extend({}, v),
						S = i(w.my, u.outerWidth(), u.outerHeight());
					"right" === t.my[0]
						? (M.left -= c)
						: "center" === t.my[0] && (M.left -= c / 2),
						"bottom" === t.my[1]
							? (M.top -= d)
							: "center" === t.my[1] && (M.top -= d / 2),
						(M.left += S[0]),
						(M.top += S[1]),
						e.support.offsetFractions ||
							((M.left = h(M.left)), (M.top = h(M.top))),
						(a = {
							marginLeft: f,
							marginTop: y,
						}),
						e.each(["left", "top"], function (i, s) {
							e.ui.position[k[i]] &&
								e.ui.position[k[i]][s](M, {
									targetWidth: p,
									targetHeight: m,
									elemWidth: c,
									elemHeight: d,
									collisionPosition: a,
									collisionWidth: D,
									collisionHeight: T,
									offset: [n[0] + S[0], n[1] + S[1]],
									my: t.my,
									at: t.at,
									within: _,
									elem: u,
								});
						}),
						t.using &&
							(l = function (e) {
								var i = g.left - M.left,
									s = i + p - c,
									a = g.top - M.top,
									n = a + m - d,
									h = {
										target: {
											element: b,
											left: g.left,
											top: g.top,
											width: p,
											height: m,
										},
										element: {
											element: u,
											left: M.left,
											top: M.top,
											width: c,
											height: d,
										},
										horizontal: 0 > s ? "left" : i > 0 ? "right" : "center",
										vertical: 0 > n ? "top" : a > 0 ? "bottom" : "middle",
									};
								c > p && p > o(i + s) && (h.horizontal = "center"),
									d > m && m > o(a + n) && (h.vertical = "middle"),
									(h.important =
										r(o(i), o(s)) > r(o(a), o(n)) ? "horizontal" : "vertical"),
									t.using.call(this, e, h);
							}),
						u.offset(
							e.extend(M, {
								using: l,
							})
						);
				})
			);
		}),
		(e.ui.position = {
			fit: {
				left: function (e, t) {
					var i,
						s = t.within,
						a = s.isWindow ? s.scrollLeft : s.offset.left,
						n = s.width,
						o = e.left - t.collisionPosition.marginLeft,
						h = a - o,
						l = o + t.collisionWidth - n - a;
					t.collisionWidth > n
						? h > 0 && 0 >= l
							? ((i = e.left + h + t.collisionWidth - n - a), (e.left += h - i))
							: (e.left =
									l > 0 && 0 >= h ? a : h > l ? a + n - t.collisionWidth : a)
						: h > 0
						? (e.left += h)
						: l > 0
						? (e.left -= l)
						: (e.left = r(e.left - o, e.left));
				},
				top: function (e, t) {
					var i,
						s = t.within,
						a = s.isWindow ? s.scrollTop : s.offset.top,
						n = t.within.height,
						o = e.top - t.collisionPosition.marginTop,
						h = a - o,
						l = o + t.collisionHeight - n - a;
					t.collisionHeight > n
						? h > 0 && 0 >= l
							? ((i = e.top + h + t.collisionHeight - n - a), (e.top += h - i))
							: (e.top =
									l > 0 && 0 >= h ? a : h > l ? a + n - t.collisionHeight : a)
						: h > 0
						? (e.top += h)
						: l > 0
						? (e.top -= l)
						: (e.top = r(e.top - o, e.top));
				},
			},
			flip: {
				left: function (e, t) {
					var i,
						s,
						a = t.within,
						n = a.offset.left + a.scrollLeft,
						r = a.width,
						h = a.isWindow ? a.scrollLeft : a.offset.left,
						l = e.left - t.collisionPosition.marginLeft,
						u = l - h,
						c = l + t.collisionWidth - r - h,
						d =
							"left" === t.my[0]
								? -t.elemWidth
								: "right" === t.my[0]
								? t.elemWidth
								: 0,
						p =
							"left" === t.at[0]
								? t.targetWidth
								: "right" === t.at[0]
								? -t.targetWidth
								: 0,
						f = -2 * t.offset[0];
					0 > u
						? ((i = e.left + d + p + f + t.collisionWidth - r - n),
						  (0 > i || o(u) > i) && (e.left += d + p + f))
						: c > 0 &&
						  ((s = e.left - t.collisionPosition.marginLeft + d + p + f - h),
						  (s > 0 || c > o(s)) && (e.left += d + p + f));
				},
				top: function (e, t) {
					var i,
						s,
						a = t.within,
						n = a.offset.top + a.scrollTop,
						r = a.height,
						h = a.isWindow ? a.scrollTop : a.offset.top,
						l = e.top - t.collisionPosition.marginTop,
						u = l - h,
						c = l + t.collisionHeight - r - h,
						d = "top" === t.my[1],
						p = d ? -t.elemHeight : "bottom" === t.my[1] ? t.elemHeight : 0,
						f =
							"top" === t.at[1]
								? t.targetHeight
								: "bottom" === t.at[1]
								? -t.targetHeight
								: 0,
						m = -2 * t.offset[1];
					0 > u
						? ((s = e.top + p + f + m + t.collisionHeight - r - n),
						  e.top + p + f + m > u &&
								(0 > s || o(u) > s) &&
								(e.top += p + f + m))
						: c > 0 &&
						  ((i = e.top - t.collisionPosition.marginTop + p + f + m - h),
						  e.top + p + f + m > c &&
								(i > 0 || c > o(i)) &&
								(e.top += p + f + m));
				},
			},
			flipfit: {
				left: function () {
					e.ui.position.flip.left.apply(this, arguments),
						e.ui.position.fit.left.apply(this, arguments);
				},
				top: function () {
					e.ui.position.flip.top.apply(this, arguments),
						e.ui.position.fit.top.apply(this, arguments);
				},
			},
		}),
		(function () {
			var t,
				i,
				s,
				a,
				n,
				r = document.getElementsByTagName("body")[0],
				o = document.createElement("div");
			(t = document.createElement(r ? "div" : "body")),
				(s = {
					visibility: "hidden",
					width: 0,
					height: 0,
					border: 0,
					margin: 0,
					background: "none",
				}),
				r &&
					e.extend(s, {
						position: "absolute",
						left: "-1000px",
						top: "-1000px",
					});
			for (n in s) t.style[n] = s[n];
			t.appendChild(o),
				(i = r || document.documentElement),
				i.insertBefore(t, i.firstChild),
				(o.style.cssText = "position: absolute; left: 10.7432222px;"),
				(a = e(o).offset().left),
				(e.support.offsetFractions = a > 10 && 11 > a),
				(t.innerHTML = ""),
				i.removeChild(t);
		})();
})(jQuery);
(function (e) {
	function t(t, i) {
		var s = (t.attr("aria-describedby") || "").split(/\s+/);
		s.push(i),
			t.data("ui-tooltip-id", i).attr("aria-describedby", e.trim(s.join(" ")));
	}

	function i(t) {
		var i = t.data("ui-tooltip-id"),
			s = (t.attr("aria-describedby") || "").split(/\s+/),
			a = e.inArray(i, s);
		-1 !== a && s.splice(a, 1),
			t.removeData("ui-tooltip-id"),
			(s = e.trim(s.join(" "))),
			s ? t.attr("aria-describedby", s) : t.removeAttr("aria-describedby");
	}
	var s = 0;
	e.widget("ui.tooltip", {
		version: "1.10.3",
		options: {
			content: function () {
				var t = e(this).attr("title") || "";
				return e("<a>").text(t).html();
			},
			hide: !0,
			items: "[title]:not([disabled])",
			position: {
				my: "left top+15",
				at: "left bottom",
				collision: "flipfit flip",
			},
			show: !0,
			tooltipClass: null,
			track: !1,
			close: null,
			open: null,
		},
		_create: function () {
			this._on({
				mouseover: "open",
				focusin: "open",
			}),
				(this.tooltips = {}),
				(this.parents = {}),
				this.options.disabled && this._disable();
		},
		_setOption: function (t, i) {
			var s = this;
			return "disabled" === t
				? (this[i ? "_disable" : "_enable"](), (this.options[t] = i), void 0)
				: (this._super(t, i),
				  "content" === t &&
						e.each(this.tooltips, function (e, t) {
							s._updateContent(t);
						}),
				  void 0);
		},
		_disable: function () {
			var t = this;
			e.each(this.tooltips, function (i, s) {
				var a = e.Event("blur");
				(a.target = a.currentTarget = s[0]), t.close(a, !0);
			}),
				this.element
					.find(this.options.items)
					.addBack()
					.each(function () {
						var t = e(this);
						t.is("[title]") &&
							t.data("ui-tooltip-title", t.attr("title")).attr("title", "");
					});
		},
		_enable: function () {
			this.element
				.find(this.options.items)
				.addBack()
				.each(function () {
					var t = e(this);
					t.data("ui-tooltip-title") &&
						t.attr("title", t.data("ui-tooltip-title"));
				});
		},
		open: function (t) {
			var i = this,
				s = e(t ? t.target : this.element).closest(this.options.items);
			s.length &&
				!s.data("ui-tooltip-id") &&
				(s.attr("title") && s.data("ui-tooltip-title", s.attr("title")),
				s.data("ui-tooltip-open", !0),
				t &&
					"mouseover" === t.type &&
					s.parents().each(function () {
						var t,
							s = e(this);
						s.data("ui-tooltip-open") &&
							((t = e.Event("blur")),
							(t.target = t.currentTarget = this),
							i.close(t, !0)),
							s.attr("title") &&
								(s.uniqueId(),
								(i.parents[this.id] = {
									element: this,
									title: s.attr("title"),
								}),
								s.attr("title", ""));
					}),
				this._updateContent(s, t));
		},
		_updateContent: function (e, t) {
			var i,
				s = this.options.content,
				a = this,
				n = t ? t.type : null;
			return "string" == typeof s
				? this._open(t, e, s)
				: ((i = s.call(e[0], function (i) {
						e.data("ui-tooltip-open") &&
							a._delay(function () {
								t && (t.type = n), this._open(t, e, i);
							});
				  })),
				  i && this._open(t, e, i),
				  void 0);
		},
		_open: function (i, s, a) {
			function n(e) {
				(l.of = e), r.is(":hidden") || r.position(l);
			}
			var r,
				o,
				h,
				l = e.extend({}, this.options.position);
			if (a) {
				if (((r = this._find(s)), r.length))
					return r.find(".ui-tooltip-content").html(a), void 0;
				s.is("[title]") &&
					(i && "mouseover" === i.type
						? s.attr("title", "")
						: s.removeAttr("title")),
					(r = this._tooltip(s)),
					t(s, r.attr("id")),
					r.find(".ui-tooltip-content").html(a),
					this.options.track && i && /^mouse/.test(i.type)
						? (this._on(this.document, {
								mousemove: n,
						  }),
						  n(i))
						: r.position(e.extend({ of: s }, this.options.position)),
					r.hide(),
					this._show(r, this.options.show),
					this.options.show &&
						this.options.show.delay &&
						(h = this.delayedShow =
							setInterval(function () {
								r.is(":visible") && (n(l.of), clearInterval(h));
							}, e.fx.interval)),
					this._trigger("open", i, {
						tooltip: r,
					}),
					(o = {
						keyup: function (t) {
							if (t.keyCode === e.ui.keyCode.ESCAPE) {
								var i = e.Event(t);
								(i.currentTarget = s[0]), this.close(i, !0);
							}
						},
						remove: function () {
							this._removeTooltip(r);
						},
					}),
					(i && "mouseover" !== i.type) || (o.mouseleave = "close"),
					(i && "focusin" !== i.type) || (o.focusout = "close"),
					this._on(!0, s, o);
			}
		},
		close: function (t) {
			var s = this,
				a = e(t ? t.currentTarget : this.element),
				n = this._find(a);
			this.closing ||
				(clearInterval(this.delayedShow),
				a.data("ui-tooltip-title") &&
					a.attr("title", a.data("ui-tooltip-title")),
				i(a),
				n.stop(!0),
				this._hide(n, this.options.hide, function () {
					s._removeTooltip(e(this));
				}),
				a.removeData("ui-tooltip-open"),
				this._off(a, "mouseleave focusout keyup"),
				a[0] !== this.element[0] && this._off(a, "remove"),
				this._off(this.document, "mousemove"),
				t &&
					"mouseleave" === t.type &&
					e.each(this.parents, function (t, i) {
						e(i.element).attr("title", i.title), delete s.parents[t];
					}),
				(this.closing = !0),
				this._trigger("close", t, {
					tooltip: n,
				}),
				(this.closing = !1));
		},
		_tooltip: function (t) {
			var i = "ui-tooltip-" + s++,
				a = e("<div>")
					.attr({
						id: i,
						role: "tooltip",
					})
					.addClass(
						"ui-tooltip ui-widget ui-corner-all ui-widget-content " +
							(this.options.tooltipClass || "")
					);
			return (
				e("<div>").addClass("ui-tooltip-content").appendTo(a),
				a.appendTo(this.document[0].body),
				(this.tooltips[i] = t),
				a
			);
		},
		_find: function (t) {
			var i = t.data("ui-tooltip-id");
			return i ? e("#" + i) : e();
		},
		_removeTooltip: function (e) {
			e.remove(), delete this.tooltips[e.attr("id")];
		},
		_destroy: function () {
			var t = this;
			e.each(this.tooltips, function (i, s) {
				var a = e.Event("blur");
				(a.target = a.currentTarget = s[0]),
					t.close(a, !0),
					e("#" + i).remove(),
					s.data("ui-tooltip-title") &&
						(s.attr("title", s.data("ui-tooltip-title")),
						s.removeData("ui-tooltip-title"));
			});
		},
	});
})(jQuery);
// /STATICS/js/lazysizes.min.js
!(function (a, b) {
	var c = b(a, a.document);
	(a.lazySizes = c),
		"object" == typeof module && module.exports && (module.exports = c);
})(window, function (a, b) {
	"use strict";
	if (b.getElementsByClassName) {
		var c,
			d,
			e = b.documentElement,
			f = a.Date,
			g = a.HTMLPictureElement,
			h = "addEventListener",
			i = "getAttribute",
			j = a[h],
			k = a.setTimeout,
			l = a.requestAnimationFrame || k,
			m = a.requestIdleCallback,
			n = /^picture$/i,
			o = ["load", "error", "lazyincluded", "_lazyloaded"],
			p = {},
			q = Array.prototype.forEach,
			r = function (a, b) {
				return (
					p[b] || (p[b] = new RegExp("(\\s|^)" + b + "(\\s|$)")),
					p[b].test(a[i]("class") || "") && p[b]
				);
			},
			s = function (a, b) {
				r(a, b) ||
					a.setAttribute("class", (a[i]("class") || "").trim() + " " + b);
			},
			t = function (a, b) {
				var c;
				(c = r(a, b)) &&
					a.setAttribute("class", (a[i]("class") || "").replace(c, " "));
			},
			u = function (a, b, c) {
				var d = c ? h : "removeEventListener";
				c && u(a, b),
					o.forEach(function (c) {
						a[d](c, b);
					});
			},
			v = function (a, d, e, f, g) {
				var h = b.createEvent("CustomEvent");
				return (
					e || (e = {}),
					(e.instance = c),
					h.initCustomEvent(d, !f, !g, e),
					a.dispatchEvent(h),
					h
				);
			},
			w = function (b, c) {
				var e;
				!g && (e = a.picturefill || d.pf)
					? (c && c.src && !b[i]("srcset") && b.setAttribute("srcset", c.src),
					  e({
							reevaluate: !0,
							elements: [b],
					  }))
					: c && c.src && (b.src = c.src);
			},
			x = function (a, b) {
				return (getComputedStyle(a, null) || {})[b];
			},
			y = function (a, b, c) {
				for (c = c || a.offsetWidth; c < d.minSize && b && !a._lazysizesWidth; )
					(c = b.offsetWidth), (b = b.parentNode);
				return c;
			},
			z = (function () {
				var a,
					c,
					d = [],
					e = [],
					f = d,
					g = function () {
						var b = f;
						for (f = d.length ? e : d, a = !0, c = !1; b.length; ) b.shift()();
						a = !1;
					},
					h = function (d, e) {
						a && !e
							? d.apply(this, arguments)
							: (f.push(d), c || ((c = !0), (b.hidden ? k : l)(g)));
					};
				return (h._lsFlush = g), h;
			})(),
			A = function (a, b) {
				return b
					? function () {
							z(a);
					  }
					: function () {
							var b = this,
								c = arguments;
							z(function () {
								a.apply(b, c);
							});
					  };
			},
			B = function (a) {
				var b,
					c = 0,
					e = d.throttleDelay,
					g = d.ricTimeout,
					h = function () {
						(b = !1), (c = f.now()), a();
					},
					i =
						m && g > 49
							? function () {
									m(h, {
										timeout: g,
									}),
										g !== d.ricTimeout && (g = d.ricTimeout);
							  }
							: A(function () {
									k(h);
							  }, !0);
				return function (a) {
					var d;
					(a = a === !0) && (g = 33),
						b ||
							((b = !0),
							(d = e - (f.now() - c)),
							0 > d && (d = 0),
							a || 9 > d ? i() : k(i, d));
				};
			},
			C = function (a) {
				var b,
					c,
					d = 99,
					e = function () {
						(b = null), a();
					},
					g = function () {
						var a = f.now() - c;
						d > a ? k(g, d - a) : (m || e)(e);
					};
				return function () {
					(c = f.now()), b || (b = k(g, d));
				};
			};
		!(function () {
			var b,
				c = {
					lazyClass: "lazyload",
					loadedClass: "lazyloaded",
					loadingClass: "lazyloading",
					preloadClass: "lazypreload",
					errorClass: "lazyerror",
					autosizesClass: "lazyautosizes",
					srcAttr: "data-src",
					srcsetAttr: "data-srcset",
					sizesAttr: "data-sizes",
					minSize: 40,
					customMedia: {},
					init: !0,
					expFactor: 1.5,
					hFac: 0.8,
					loadMode: 2,
					loadHidden: !0,
					ricTimeout: 0,
					throttleDelay: 125,
				};
			d = a.lazySizesConfig || a.lazysizesConfig || {};
			for (b in c) b in d || (d[b] = c[b]);
			(a.lazySizesConfig = d),
				k(function () {
					d.init && F();
				});
		})();
		var D = (function () {
				var g,
					l,
					m,
					o,
					p,
					y,
					D,
					F,
					G,
					H,
					I,
					J,
					K,
					L,
					M = /^img$/i,
					N = /^iframe$/i,
					O = "onscroll" in a && !/(gle|ing)bot/.test(navigator.userAgent),
					P = 0,
					Q = 0,
					R = 0,
					S = -1,
					T = function (a) {
						R--,
							a && a.target && u(a.target, T),
							(!a || 0 > R || !a.target) && (R = 0);
					},
					U = function (a, c) {
						var d,
							f = a,
							g =
								"hidden" == x(b.body, "visibility") ||
								("hidden" != x(a.parentNode, "visibility") &&
									"hidden" != x(a, "visibility"));
						for (
							F -= c, I += c, G -= c, H += c;
							g && (f = f.offsetParent) && f != b.body && f != e;

						)
							(g = (x(f, "opacity") || 1) > 0),
								g &&
									"visible" != x(f, "overflow") &&
									((d = f.getBoundingClientRect()),
									(g =
										H > d.left &&
										G < d.right &&
										I > d.top - 1 &&
										F < d.bottom + 1));
						return g;
					},
					V = function () {
						var a,
							f,
							h,
							j,
							k,
							m,
							n,
							p,
							q,
							r = c.elements;
						if ((o = d.loadMode) && 8 > R && (a = r.length)) {
							(f = 0),
								S++,
								null == K &&
									("expand" in d ||
										(d.expand =
											e.clientHeight > 500 && e.clientWidth > 500 ? 500 : 370),
									(J = d.expand),
									(K = J * d.expFactor)),
								K > Q && 1 > R && S > 2 && o > 2 && !b.hidden
									? ((Q = K), (S = 0))
									: (Q = o > 1 && S > 1 && 6 > R ? J : P);
							for (; a > f; f++)
								if (r[f] && !r[f]._lazyRace)
									if (O)
										if (
											(((p = r[f][i]("data-expand")) && (m = 1 * p)) || (m = Q),
											q !== m &&
												((y = innerWidth + m * L),
												(D = innerHeight + m),
												(n = -1 * m),
												(q = m)),
											(h = r[f].getBoundingClientRect()),
											(I = h.bottom) >= n &&
												(F = h.top) <= D &&
												(H = h.right) >= n * L &&
												(G = h.left) <= y &&
												(I || H || G || F) &&
												(d.loadHidden || "hidden" != x(r[f], "visibility")) &&
												((l && 3 > R && !p && (3 > o || 4 > S)) || U(r[f], m)))
										) {
											if ((ba(r[f]), (k = !0), R > 9)) break;
										} else
											!k &&
												l &&
												!j &&
												4 > R &&
												4 > S &&
												o > 2 &&
												(g[0] || d.preloadAfterLoad) &&
												(g[0] ||
													(!p &&
														(I ||
															H ||
															G ||
															F ||
															"auto" != r[f][i](d.sizesAttr)))) &&
												(j = g[0] || r[f]);
									else ba(r[f]);
							j && !k && ba(j);
						}
					},
					W = B(V),
					X = function (a) {
						s(a.target, d.loadedClass),
							t(a.target, d.loadingClass),
							u(a.target, Z),
							v(a.target, "lazyloaded");
					},
					Y = A(X),
					Z = function (a) {
						Y({
							target: a.target,
						});
					},
					$ = function (a, b) {
						try {
							a.contentWindow.location.replace(b);
						} catch (c) {
							a.src = b;
						}
					},
					_ = function (a) {
						var b,
							c = a[i](d.srcsetAttr);
						(b = d.customMedia[a[i]("data-media") || a[i]("media")]) &&
							a.setAttribute("media", b),
							c && a.setAttribute("srcset", c);
					},
					aa = A(function (a, b, c, e, f) {
						var g, h, j, l, o, p;
						(o = v(a, "lazybeforeunveil", b)).defaultPrevented ||
							(e && (c ? s(a, d.autosizesClass) : a.setAttribute("sizes", e)),
							(h = a[i](d.srcsetAttr)),
							(g = a[i](d.srcAttr)),
							f && ((j = a.parentNode), (l = j && n.test(j.nodeName || ""))),
							(p = b.firesLoad || ("src" in a && (h || g || l))),
							(o = {
								target: a,
							}),
							p &&
								(u(a, T, !0),
								clearTimeout(m),
								(m = k(T, 2500)),
								s(a, d.loadingClass),
								u(a, Z, !0)),
							l && q.call(j.getElementsByTagName("source"), _),
							h
								? a.setAttribute("srcset", h)
								: g && !l && (N.test(a.nodeName) ? $(a, g) : (a.src = g)),
							f &&
								(h || l) &&
								w(a, {
									src: g,
								})),
							a._lazyRace && delete a._lazyRace,
							t(a, d.lazyClass),
							z(function () {
								(!p || (a.complete && a.naturalWidth > 1)) &&
									(p ? T(o) : R--, X(o));
							}, !0);
					}),
					ba = function (a) {
						var b,
							c = M.test(a.nodeName),
							e = c && (a[i](d.sizesAttr) || a[i]("sizes")),
							f = "auto" == e;
						((!f && l) ||
							!c ||
							(!a[i]("src") && !a.srcset) ||
							a.complete ||
							r(a, d.errorClass) ||
							!r(a, d.lazyClass)) &&
							((b = v(a, "lazyunveilread").detail),
							f && E.updateElem(a, !0, a.offsetWidth),
							(a._lazyRace = !0),
							R++,
							aa(a, b, f, e, c));
					},
					ca = function () {
						if (!l) {
							if (f.now() - p < 999) return void k(ca, 999);
							var a = C(function () {
								(d.loadMode = 3), W();
							});
							(l = !0),
								(d.loadMode = 3),
								W(),
								j(
									"scroll",
									function () {
										3 == d.loadMode && (d.loadMode = 2), a();
									},
									!0
								);
						}
					};
				return {
					_: function () {
						(p = f.now()),
							(c.elements = b.getElementsByClassName(d.lazyClass)),
							(g = b.getElementsByClassName(
								d.lazyClass + " " + d.preloadClass
							)),
							(L = d.hFac),
							j("scroll", W, !0),
							j("resize", W, !0),
							a.MutationObserver
								? new MutationObserver(W).observe(e, {
										childList: !0,
										subtree: !0,
										attributes: !0,
								  })
								: (e[h]("DOMNodeInserted", W, !0),
								  e[h]("DOMAttrModified", W, !0),
								  setInterval(W, 999)),
							j("hashchange", W, !0),
							[
								"focus",
								"mouseover",
								"click",
								"load",
								"transitionend",
								"animationend",
								"webkitAnimationEnd",
							].forEach(function (a) {
								b[h](a, W, !0);
							}),
							/d$|^c/.test(b.readyState)
								? ca()
								: (j("load", ca), b[h]("DOMContentLoaded", W), k(ca, 2e4)),
							c.elements.length ? (V(), z._lsFlush()) : W();
					},
					checkElems: W,
					unveil: ba,
				};
			})(),
			E = (function () {
				var a,
					c = A(function (a, b, c, d) {
						var e, f, g;
						if (
							((a._lazysizesWidth = d),
							(d += "px"),
							a.setAttribute("sizes", d),
							n.test(b.nodeName || ""))
						)
							for (
								e = b.getElementsByTagName("source"), f = 0, g = e.length;
								g > f;
								f++
							)
								e[f].setAttribute("sizes", d);
						c.detail.dataAttr || w(a, c.detail);
					}),
					e = function (a, b, d) {
						var e,
							f = a.parentNode;
						f &&
							((d = y(a, f, d)),
							(e = v(a, "lazybeforesizes", {
								width: d,
								dataAttr: !!b,
							})),
							e.defaultPrevented ||
								((d = e.detail.width),
								d && d !== a._lazysizesWidth && c(a, f, e, d)));
					},
					f = function () {
						var b,
							c = a.length;
						if (c) for (b = 0; c > b; b++) e(a[b]);
					},
					g = C(f);
				return {
					_: function () {
						(a = b.getElementsByClassName(d.autosizesClass)), j("resize", g);
					},
					checkElems: g,
					updateElem: e,
				};
			})(),
			F = function () {
				F.i || ((F.i = !0), E._(), D._());
			};
		return (c = {
			cfg: d,
			autoSizer: E,
			loader: D,
			init: F,
			uP: w,
			aC: s,
			rC: t,
			hC: r,
			fire: v,
			gW: y,
			rAF: z,
		});
	}
});
// /STATICS/plugins/fancybox/jquery.fancybox.js
(function (C, z, f, r) {
	var q = f(C),
		n = f(z),
		b = (f.fancybox = function () {
			b.open.apply(this, arguments);
		}),
		H = navigator.userAgent.match(/msie/),
		w = null,
		s = z.createTouch !== r,
		t = function (a) {
			return a && a.hasOwnProperty && a instanceof f;
		},
		p = function (a) {
			return a && "string" === f.type(a);
		},
		F = function (a) {
			return p(a) && 0 < a.indexOf("%");
		},
		l = function (a, d) {
			var e = parseInt(a, 10) || 0;
			d && F(a) && (e *= b.getViewport()[d] / 100);
			return Math.ceil(e);
		},
		x = function (a, b) {
			return l(a, b) + "px";
		};
	f.extend(b, {
		version: "2.1.4",
		defaults: {
			padding: 15,
			margin: 20,
			width: 800,
			height: 600,
			minWidth: 100,
			minHeight: 100,
			maxWidth: 9999,
			maxHeight: 9999,
			autoSize: !0,
			autoHeight: !1,
			autoWidth: !1,
			autoResize: !0,
			autoCenter: !s,
			fitToView: !0,
			aspectRatio: !1,
			topRatio: 0.5,
			leftRatio: 0.5,
			scrolling: "auto",
			wrapCSS: "",
			arrows: !0,
			closeBtn: !0,
			closeClick: !1,
			nextClick: !1,
			mouseWheel: !0,
			autoPlay: !1,
			playSpeed: 3e3,
			preload: 3,
			modal: !1,
			loop: !0,
			ajax: {
				dataType: "html",
				headers: {
					"X-fancyBox": !0,
				},
			},
			iframe: {
				scrolling: "auto",
				preload: !0,
			},
			swf: {
				wmode: "transparent",
				allowfullscreen: "true",
				allowscriptaccess: "always",
			},
			keys: {
				next: {
					13: "left",
					34: "up",
					39: "left",
					40: "up",
				},
				prev: {
					8: "right",
					33: "down",
					37: "right",
					38: "down",
				},
				close: [27],
				play: [32],
				toggle: [70],
			},
			direction: {
				next: "left",
				prev: "right",
			},
			scrollOutside: !0,
			index: 0,
			type: null,
			href: null,
			content: null,
			title: null,
			tpl: {
				wrap: '<div class="fancybox-wrap" tabIndex="-1"><div class="fancybox-skin"><div class="fancybox-outer"><div class="fancybox-inner"></div></div></div></div>',
				image: '<img class="fancybox-image" src="{href}" alt="" />',
				iframe:
					'<iframe id="fancybox-frame{rnd}" name="fancybox-frame{rnd}" class="fancybox-iframe" frameborder="0" vspace="0" hspace="0" webkitAllowFullScreen mozallowfullscreen allowFullScreen' +
					(H ? ' allowtransparency="true"' : "") +
					"></iframe>",
				error: '<p class="fancybox-error">',
				closeBtn:
					'<a title="بستن" class="fancybox-item fancybox-close" href="javascript:;"></a>',
				next: '<a title="Next" class="fancybox-nav fancybox-next" href="javascript:;"><span></span></a>',
				prev: '<a title="Previous" class="fancybox-nav fancybox-prev" href="javascript:;"><span></span></a>',
			},
			openEffect: "fade",
			openSpeed: 250,
			openEasing: "swing",
			openOpacity: !0,
			openMethod: "zoomIn",
			closeEffect: "fade",
			closeSpeed: 250,
			closeEasing: "swing",
			closeOpacity: !0,
			closeMethod: "zoomOut",
			nextEffect: "elastic",
			nextSpeed: 250,
			nextEasing: "swing",
			nextMethod: "changeIn",
			prevEffect: "elastic",
			prevSpeed: 250,
			prevEasing: "swing",
			prevMethod: "changeOut",
			helpers: {
				overlay: !0,
				title: !0,
			},
			onCancel: f.noop,
			beforeLoad: f.noop,
			afterLoad: f.noop,
			beforeShow: f.noop,
			afterShow: f.noop,
			beforeChange: f.noop,
			beforeClose: f.noop,
			afterClose: f.noop,
		},
		group: {},
		opts: {},
		previous: null,
		coming: null,
		current: null,
		isActive: !1,
		isOpen: !1,
		isOpened: !1,
		wrap: null,
		skin: null,
		outer: null,
		inner: null,
		player: {
			timer: null,
			isActive: !1,
		},
		ajaxLoad: null,
		imgPreload: null,
		transitions: {},
		helpers: {},
		open: function (a, d) {
			if (a && (f.isPlainObject(d) || (d = {}), !1 !== b.close(!0)))
				return (
					f.isArray(a) || (a = t(a) ? f(a).get() : [a]),
					f.each(a, function (e, c) {
						var k = {},
							g,
							h,
							j,
							m,
							l;
						"object" === f.type(c) &&
							(c.nodeType && (c = f(c)),
							t(c)
								? ((k = {
										href: c.data("fancybox-href") || c.attr("href"),
										title: c.data("fancybox-title") || c.attr("title"),
										isDom: !0,
										element: c,
								  }),
								  f.metadata && f.extend(!0, k, c.metadata()))
								: (k = c));
						g = d.href || k.href || (p(c) ? c : null);
						h = d.title !== r ? d.title : k.title || "";
						m = (j = d.content || k.content) ? "html" : d.type || k.type;
						!m &&
							k.isDom &&
							((m = c.data("fancybox-type")),
							m ||
								(m = (m = c.prop("class").match(/fancybox\.(\w+)/))
									? m[1]
									: null));
						p(g) &&
							(m ||
								(b.isImage(g)
									? (m = "image")
									: b.isSWF(g)
									? (m = "swf")
									: "#" === g.charAt(0)
									? (m = "inline")
									: p(c) && ((m = "html"), (j = c))),
							"ajax" === m &&
								((l = g.split(/\s+/, 2)), (g = l.shift()), (l = l.shift())));
						j ||
							("inline" === m
								? g
									? (j = f(p(g) ? g.replace(/.*(?=#[^\s]+$)/, "") : g))
									: k.isDom && (j = c)
								: "html" === m
								? (j = g)
								: !m && !g && k.isDom && ((m = "inline"), (j = c)));
						f.extend(k, {
							href: g,
							type: m,
							content: j,
							title: h,
							selector: l,
						});
						a[e] = k;
					}),
					(b.opts = f.extend(!0, {}, b.defaults, d)),
					d.keys !== r &&
						(b.opts.keys = d.keys ? f.extend({}, b.defaults.keys, d.keys) : !1),
					(b.group = a),
					b._start(b.opts.index)
				);
		},
		cancel: function () {
			var a = b.coming;
			a &&
				!1 !== b.trigger("onCancel") &&
				(b.hideLoading(),
				b.ajaxLoad && b.ajaxLoad.abort(),
				(b.ajaxLoad = null),
				b.imgPreload && (b.imgPreload.onload = b.imgPreload.onerror = null),
				a.wrap && a.wrap.stop(!0, !0).trigger("onReset").remove(),
				(b.coming = null),
				b.current || b._afterZoomOut(a));
		},
		close: function (a) {
			b.cancel();
			!1 !== b.trigger("beforeClose") &&
				(b.unbindEvents(),
				b.isActive &&
					(!b.isOpen || !0 === a
						? (f(".fancybox-wrap").stop(!0).trigger("onReset").remove(),
						  b._afterZoomOut())
						: ((b.isOpen = b.isOpened = !1),
						  (b.isClosing = !0),
						  f(".fancybox-item, .fancybox-nav").remove(),
						  b.wrap.stop(!0, !0).removeClass("fancybox-opened"),
						  b.transitions[b.current.closeMethod]())));
		},
		play: function (a) {
			var d = function () {
					clearTimeout(b.player.timer);
				},
				e = function () {
					d();
					b.current &&
						b.player.isActive &&
						(b.player.timer = setTimeout(b.next, b.current.playSpeed));
				},
				c = function () {
					d();
					f("body").unbind(".player");
					b.player.isActive = !1;
					b.trigger("onPlayEnd");
				};
			if (!0 === a || (!b.player.isActive && !1 !== a)) {
				if (
					b.current &&
					(b.current.loop || b.current.index < b.group.length - 1)
				)
					(b.player.isActive = !0),
						f("body").bind({
							"afterShow.player onUpdate.player": e,
							"onCancel.player beforeClose.player": c,
							"beforeLoad.player": d,
						}),
						e(),
						b.trigger("onPlayStart");
			} else c();
		},
		next: function (a) {
			var d = b.current;
			d && (p(a) || (a = d.direction.next), b.jumpto(d.index + 1, a, "next"));
		},
		prev: function (a) {
			var d = b.current;
			d && (p(a) || (a = d.direction.prev), b.jumpto(d.index - 1, a, "prev"));
		},
		jumpto: function (a, d, e) {
			var c = b.current;
			c &&
				((a = l(a)),
				(b.direction = d || c.direction[a >= c.index ? "next" : "prev"]),
				(b.router = e || "jumpto"),
				c.loop &&
					(0 > a && (a = c.group.length + (a % c.group.length)),
					(a %= c.group.length)),
				c.group[a] !== r && (b.cancel(), b._start(a)));
		},
		reposition: function (a, d) {
			var e = b.current,
				c = e ? e.wrap : null,
				k;
			c &&
				((k = b._getPosition(d)),
				a && "scroll" === a.type
					? (delete k.position, c.stop(!0, !0).animate(k, 200))
					: (c.css(k), (e.pos = f.extend({}, e.dim, k))));
		},
		update: function (a) {
			var d = a && a.type,
				e = !d || "orientationchange" === d;
			e && (clearTimeout(w), (w = null));
			b.isOpen &&
				!w &&
				(w = setTimeout(
					function () {
						var c = b.current;
						c &&
							!b.isClosing &&
							(b.wrap.removeClass("fancybox-tmp"),
							(e || "load" === d || ("resize" === d && c.autoResize)) &&
								b._setDimension(),
							("scroll" === d && c.canShrink) || b.reposition(a),
							b.trigger("onUpdate"),
							(w = null));
					},
					e && !s ? 0 : 300
				));
		},
		toggle: function (a) {
			b.isOpen &&
				((b.current.fitToView =
					"boolean" === f.type(a) ? a : !b.current.fitToView),
				s &&
					(b.wrap.removeAttr("style").addClass("fancybox-tmp"),
					b.trigger("onUpdate")),
				b.update());
		},
		hideLoading: function () {
			n.unbind(".loading");
			f("#fancybox-loading").remove();
		},
		showLoading: function () {
			var a, d;
			b.hideLoading();
			a = f('<div id="fancybox-loading"><div></div></div>')
				.click(b.cancel)
				.appendTo("body");
			n.bind("keydown.loading", function (a) {
				if (27 === (a.which || a.keyCode)) a.preventDefault(), b.cancel();
			});
			b.defaults.fixed ||
				((d = b.getViewport()),
				a.css({
					position: "absolute",
					top: 0.5 * d.h + d.y,
					left: 0.5 * d.w + d.x,
				}));
		},
		getViewport: function () {
			var a = (b.current && b.current.locked) || !1,
				d = {
					x: q.scrollLeft(),
					y: q.scrollTop(),
				};
			a
				? ((d.w = a[0].clientWidth), (d.h = a[0].clientHeight))
				: ((d.w = s && C.innerWidth ? C.innerWidth : q.width()),
				  (d.h = s && C.innerHeight ? C.innerHeight : q.height()));
			return d;
		},
		unbindEvents: function () {
			b.wrap && t(b.wrap) && b.wrap.unbind(".fb");
			n.unbind(".fb");
			q.unbind(".fb");
		},
		bindEvents: function () {
			var a = b.current,
				d;
			a &&
				(q.bind(
					"orientationchange.fb" +
						(s ? "" : " resize.fb") +
						(a.autoCenter && !a.locked ? " scroll.fb" : ""),
					b.update
				),
				(d = a.keys) &&
					n.bind("keydown.fb", function (e) {
						var c = e.which || e.keyCode,
							k = e.target || e.srcElement;
						if (27 === c && b.coming) return !1;
						!e.ctrlKey &&
							!e.altKey &&
							!e.shiftKey &&
							!e.metaKey &&
							(!k || (!k.type && !f(k).is("[contenteditable]"))) &&
							f.each(d, function (d, k) {
								if (1 < a.group.length && k[c] !== r)
									return b[d](k[c]), e.preventDefault(), !1;
								if (-1 < f.inArray(c, k)) return b[d](), e.preventDefault(), !1;
							});
					}),
				f.fn.mousewheel &&
					a.mouseWheel &&
					b.wrap.bind("mousewheel.fb", function (d, c, k, g) {
						for (
							var h = f(d.target || null), j = !1;
							h.length &&
							!j &&
							!h.is(".fancybox-skin") &&
							!h.is(".fancybox-wrap");

						)
							(j =
								h[0] &&
								!(h[0].style.overflow && "hidden" === h[0].style.overflow) &&
								((h[0].clientWidth && h[0].scrollWidth > h[0].clientWidth) ||
									(h[0].clientHeight &&
										h[0].scrollHeight > h[0].clientHeight))),
								(h = f(h).parent());
						if (0 !== c && !j && 1 < b.group.length && !a.canShrink) {
							if (0 < g || 0 < k) b.prev(0 < g ? "down" : "left");
							else if (0 > g || 0 > k) b.next(0 > g ? "up" : "right");
							d.preventDefault();
						}
					}));
		},
		trigger: function (a, d) {
			var e,
				c = d || b.coming || b.current;
			if (c) {
				f.isFunction(c[a]) &&
					(e = c[a].apply(c, Array.prototype.slice.call(arguments, 1)));
				if (!1 === e) return !1;
				c.helpers &&
					f.each(c.helpers, function (d, e) {
						e &&
							b.helpers[d] &&
							f.isFunction(b.helpers[d][a]) &&
							((e = f.extend(!0, {}, b.helpers[d].defaults, e)),
							b.helpers[d][a](e, c));
					});
				f.event.trigger(a + ".fb");
			}
		},
		isImage: function (a) {
			return (
				p(a) &&
				a.match(
					/(^data:image\/.*,)|(\.(jp(e|g|eg)|gif|png|bmp|webp)((\?|#).*)?$)/i
				)
			);
		},
		isSWF: function (a) {
			return p(a) && a.match(/\.(swf)((\?|#).*)?$/i);
		},
		_start: function (a) {
			var d = {},
				e,
				c;
			a = l(a);
			e = b.group[a] || null;
			if (!e) return !1;
			d = f.extend(!0, {}, b.opts, e);
			e = d.margin;
			c = d.padding;
			"number" === f.type(e) && (d.margin = [e, e, e, e]);
			"number" === f.type(c) && (d.padding = [c, c, c, c]);
			d.modal &&
				f.extend(!0, d, {
					closeBtn: !1,
					closeClick: !1,
					nextClick: !1,
					arrows: !1,
					mouseWheel: !1,
					keys: null,
					helpers: {
						overlay: {
							closeClick: !1,
						},
					},
				});
			d.autoSize && (d.autoWidth = d.autoHeight = !0);
			"auto" === d.width && (d.autoWidth = !0);
			"auto" === d.height && (d.autoHeight = !0);
			d.group = b.group;
			d.index = a;
			b.coming = d;
			if (!1 === b.trigger("beforeLoad")) b.coming = null;
			else {
				c = d.type;
				e = d.href;
				if (!c)
					return (
						(b.coming = null),
						b.current && b.router && "jumpto" !== b.router
							? ((b.current.index = a), b[b.router](b.direction))
							: !1
					);
				b.isActive = !0;
				if ("image" === c || "swf" === c)
					(d.autoHeight = d.autoWidth = !1), (d.scrolling = "visible");
				"image" === c && (d.aspectRatio = !0);
				"iframe" === c && s && (d.scrolling = "scroll");
				d.wrap = f(d.tpl.wrap)
					.addClass(
						"fancybox-" +
							(s ? "mobile" : "desktop") +
							" fancybox-type-" +
							c +
							" fancybox-tmp " +
							d.wrapCSS
					)
					.appendTo(d.parent || "body");
				f.extend(d, {
					skin: f(".fancybox-skin", d.wrap),
					outer: f(".fancybox-outer", d.wrap),
					inner: f(".fancybox-inner", d.wrap),
				});
				f.each(["Top", "Right", "Bottom", "Left"], function (a, b) {
					d.skin.css("padding" + b, x(d.padding[a]));
				});
				b.trigger("onReady");
				if ("inline" === c || "html" === c) {
					if (!d.content || !d.content.length) return b._error("content");
				} else if (!e) return b._error("href");
				"image" === c
					? b._loadImage()
					: "ajax" === c
					? b._loadAjax()
					: "iframe" === c
					? b._loadIframe()
					: b._afterLoad();
			}
		},
		_error: function (a) {
			f.extend(b.coming, {
				type: "html",
				autoWidth: !0,
				autoHeight: !0,
				minWidth: 0,
				minHeight: 0,
				scrolling: "no",
				hasError: a,
				content: b.coming.tpl.error,
			});
			b._afterLoad();
		},
		_loadImage: function () {
			var a = (b.imgPreload = new Image());
			a.onload = function () {
				this.onload = this.onerror = null;
				b.coming.width = this.width;
				b.coming.height = this.height;
				b._afterLoad();
			};
			a.onerror = function () {
				this.onload = this.onerror = null;
				b._error("image");
			};
			a.src = b.coming.href;
			!0 !== a.complete && b.showLoading();
		},
		_loadAjax: function () {
			var a = b.coming;
			b.showLoading();
			b.ajaxLoad = f.ajax(
				f.extend({}, a.ajax, {
					url: a.href,
					error: function (a, e) {
						b.coming && "abort" !== e ? b._error("ajax", a) : b.hideLoading();
					},
					success: function (d, e) {
						"success" === e && ((a.content = d), b._afterLoad());
					},
				})
			);
		},
		_loadIframe: function () {
			var a = b.coming,
				d = f(a.tpl.iframe.replace(/\{rnd\}/g, new Date().getTime()))
					.attr("scrolling", s ? "auto" : a.iframe.scrolling)
					.attr("src", a.href);
			f(a.wrap).bind("onReset", function () {
				try {
					f(this)
						.find("iframe")
						.hide()
						.attr("src", "//about:blank")
						.end()
						.empty();
				} catch (a) {}
			});
			a.iframe.preload &&
				(b.showLoading(),
				d.one("load", function () {
					f(this).data("ready", 1);
					s || f(this).bind("load.fb", b.update);
					f(this)
						.parents(".fancybox-wrap")
						.width("100%")
						.removeClass("fancybox-tmp")
						.show();
					b._afterLoad();
				}));
			a.content = d.appendTo(a.inner);
			a.iframe.preload || b._afterLoad();
		},
		_preloadImages: function () {
			var a = b.group,
				d = b.current,
				e = a.length,
				c = d.preload ? Math.min(d.preload, e - 1) : 0,
				f,
				g;
			for (g = 1; g <= c; g += 1)
				(f = a[(d.index + g) % e]),
					"image" === f.type && f.href && (new Image().src = f.href);
		},
		_afterLoad: function () {
			var a = b.coming,
				d = b.current,
				e,
				c,
				k,
				g,
				h;
			b.hideLoading();
			if (a && !1 !== b.isActive)
				if (!1 === b.trigger("afterLoad", a, d))
					a.wrap.stop(!0).trigger("onReset").remove(), (b.coming = null);
				else {
					d &&
						(b.trigger("beforeChange", d),
						d.wrap
							.stop(!0)
							.removeClass("fancybox-opened")
							.find(".fancybox-item, .fancybox-nav")
							.remove());
					b.unbindEvents();
					e = a.content;
					c = a.type;
					k = a.scrolling;
					f.extend(b, {
						wrap: a.wrap,
						skin: a.skin,
						outer: a.outer,
						inner: a.inner,
						current: a,
						previous: d,
					});
					g = a.href;
					switch (c) {
						case "inline":
						case "ajax":
						case "html":
							a.selector
								? (e = f("<div>").html(e).find(a.selector))
								: t(e) &&
								  (e.data("fancybox-placeholder") ||
										e.data(
											"fancybox-placeholder",
											f('<div class="fancybox-placeholder"></div>')
												.insertAfter(e)
												.hide()
										),
								  (e = e.show().detach()),
								  a.wrap.bind("onReset", function () {
										f(this).find(e).length &&
											e
												.hide()
												.replaceAll(e.data("fancybox-placeholder"))
												.data("fancybox-placeholder", !1);
								  }));
							break;
						case "image":
							e = a.tpl.image.replace("{href}", g);
							break;
						case "swf":
							(e =
								'<object id="fancybox-swf" classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000" width="100%" height="100%"><param name="movie" value="' +
								g +
								'"></param>'),
								(h = ""),
								f.each(a.swf, function (a, b) {
									e += '<param name="' + a + '" value="' + b + '"></param>';
									h += " " + a + '="' + b + '"';
								}),
								(e +=
									'<embed src="' +
									g +
									'" type="application/x-shockwave-flash" width="100%" height="100%"' +
									h +
									"></embed></object>");
					}
					(!t(e) || !e.parent().is(a.inner)) && a.inner.append(e);
					b.trigger("beforeShow");
					a.inner.css(
						"overflow",
						"yes" === k ? "scroll" : "no" === k ? "hidden" : k
					);
					b._setDimension();
					b.reposition();
					b.isOpen = !1;
					b.coming = null;
					b.bindEvents();
					if (b.isOpened) {
						if (d.prevMethod) b.transitions[d.prevMethod]();
					} else
						f(".fancybox-wrap")
							.not(a.wrap)
							.stop(!0)
							.trigger("onReset")
							.remove();
					b.transitions[b.isOpened ? a.nextMethod : a.openMethod]();
					b._preloadImages();
				}
		},
		_setDimension: function () {
			var a = b.getViewport(),
				d = 0,
				e = !1,
				c = !1,
				e = b.wrap,
				k = b.skin,
				g = b.inner,
				h = b.current,
				c = h.width,
				j = h.height,
				m = h.minWidth,
				u = h.minHeight,
				n = h.maxWidth,
				v = h.maxHeight,
				s = h.scrolling,
				q = h.scrollOutside ? h.scrollbarWidth : 0,
				y = h.margin,
				p = l(y[1] + y[3]),
				r = l(y[0] + y[2]),
				z,
				A,
				t,
				D,
				B,
				G,
				C,
				E,
				w;
			e.add(k).add(g).width("auto").height("auto").removeClass("fancybox-tmp");
			y = l(k.outerWidth(!0) - k.width());
			z = l(k.outerHeight(!0) - k.height());
			A = p + y;
			t = r + z;
			D = F(c) ? ((a.w - A) * l(c)) / 100 : c;
			B = F(j) ? ((a.h - t) * l(j)) / 100 : j;
			if ("iframe" === h.type) {
				if (((w = h.content), h.autoHeight && 1 === w.data("ready")))
					try {
						w[0].contentWindow.document.location &&
							(g.width(D).height(9999),
							(G = w.contents().find("body")),
							q && G.css("overflow-x", "hidden"),
							(B = G.height()));
					} catch (H) {}
			} else if (h.autoWidth || h.autoHeight)
				g.addClass("fancybox-tmp"),
					h.autoWidth || g.width(D),
					h.autoHeight || g.height(B),
					h.autoWidth && (D = g.width()),
					h.autoHeight && (B = g.height()),
					g.removeClass("fancybox-tmp");
			c = l(D);
			j = l(B);
			E = D / B;
			m = l(F(m) ? l(m, "w") - A : m);
			n = l(F(n) ? l(n, "w") - A : n);
			u = l(F(u) ? l(u, "h") - t : u);
			v = l(F(v) ? l(v, "h") - t : v);
			G = n;
			C = v;
			h.fitToView && ((n = Math.min(a.w - A, n)), (v = Math.min(a.h - t, v)));
			A = a.w - p;
			r = a.h - r;
			h.aspectRatio
				? (c > n && ((c = n), (j = l(c / E))),
				  j > v && ((j = v), (c = l(j * E))),
				  c < m && ((c = m), (j = l(c / E))),
				  j < u && ((j = u), (c = l(j * E))))
				: ((c = Math.max(m, Math.min(c, n))),
				  h.autoHeight && "iframe" !== h.type && (g.width(c), (j = g.height())),
				  (j = Math.max(u, Math.min(j, v))));
			if (h.fitToView)
				if (
					(g.width(c).height(j),
					e.width(c + y),
					(a = e.width()),
					(p = e.height()),
					h.aspectRatio)
				)
					for (; (a > A || p > r) && c > m && j > u && !(19 < d++); )
						(j = Math.max(u, Math.min(v, j - 10))),
							(c = l(j * E)),
							c < m && ((c = m), (j = l(c / E))),
							c > n && ((c = n), (j = l(c / E))),
							g.width(c).height(j),
							e.width(c + y),
							(a = e.width()),
							(p = e.height());
				else
					(c = Math.max(m, Math.min(c, c - (a - A)))),
						(j = Math.max(u, Math.min(j, j - (p - r))));
			q && "auto" === s && j < B && c + y + q < A && (c += q);
			g.width(c).height(j);
			e.width(c + y);
			a = e.width();
			p = e.height();
			e = (a > A || p > r) && c > m && j > u;
			c = h.aspectRatio
				? c < G && j < C && c < D && j < B
				: (c < G || j < C) && (c < D || j < B);
			f.extend(h, {
				dim: {
					width: x(a),
					height: x(p),
				},
				origWidth: D,
				origHeight: B,
				canShrink: e,
				canExpand: c,
				wPadding: y,
				hPadding: z,
				wrapSpace: p - k.outerHeight(!0),
				skinSpace: k.height() - j,
			});
			!w && h.autoHeight && j > u && j < v && !c && g.height("auto");
		},
		_getPosition: function (a) {
			var d = b.current,
				e = b.getViewport(),
				c = d.margin,
				f = b.wrap.width() + c[1] + c[3],
				g = b.wrap.height() + c[0] + c[2],
				c = {
					position: "absolute",
					top: c[0],
					left: c[3],
				};
			d.autoCenter && d.fixed && !a && g <= e.h && f <= e.w
				? (c.position = "fixed")
				: d.locked || ((c.top += e.y), (c.left += e.x));
			c.top = x(Math.max(c.top, c.top + (e.h - g) * d.topRatio));
			c.left = x(Math.max(c.left, c.left + (e.w - f) * d.leftRatio));
			return c;
		},
		_afterZoomIn: function () {
			var a = b.current;
			a &&
				((b.isOpen = b.isOpened = !0),
				b.wrap.css("overflow", "visible").addClass("fancybox-opened"),
				b.update(),
				(a.closeClick || (a.nextClick && 1 < b.group.length)) &&
					b.inner.css("cursor", "pointer").bind("click.fb", function (d) {
						!f(d.target).is("a") &&
							!f(d.target).parent().is("a") &&
							(d.preventDefault(), b[a.closeClick ? "close" : "next"]());
					}),
				a.closeBtn &&
					f(a.tpl.closeBtn)
						.appendTo(b.skin)
						.bind("click.fb", function (a) {
							a.preventDefault();
							b.close();
						}),
				a.arrows &&
					1 < b.group.length &&
					((a.loop || 0 < a.index) &&
						f(a.tpl.prev).appendTo(b.outer).bind("click.fb", b.prev),
					(a.loop || a.index < b.group.length - 1) &&
						f(a.tpl.next).appendTo(b.outer).bind("click.fb", b.next)),
				b.trigger("afterShow"),
				!a.loop && a.index === a.group.length - 1
					? b.play(!1)
					: b.opts.autoPlay &&
					  !b.player.isActive &&
					  ((b.opts.autoPlay = !1), b.play()));
		},
		_afterZoomOut: function (a) {
			a = a || b.current;
			f(".fancybox-wrap").trigger("onReset").remove();
			f.extend(b, {
				group: {},
				opts: {},
				router: !1,
				current: null,
				isActive: !1,
				isOpened: !1,
				isOpen: !1,
				isClosing: !1,
				wrap: null,
				skin: null,
				outer: null,
				inner: null,
			});
			b.trigger("afterClose", a);
		},
	});
	b.transitions = {
		getOrigPosition: function () {
			var a = b.current,
				d = a.element,
				e = a.orig,
				c = {},
				f = 50,
				g = 50,
				h = a.hPadding,
				j = a.wPadding,
				m = b.getViewport();
			!e &&
				a.isDom &&
				d.is(":visible") &&
				((e = d.find("img:first")), e.length || (e = d));
			t(e)
				? ((c = e.offset()),
				  e.is("img") && ((f = e.outerWidth()), (g = e.outerHeight())))
				: ((c.top = m.y + (m.h - g) * a.topRatio),
				  (c.left = m.x + (m.w - f) * a.leftRatio));
			if ("fixed" === b.wrap.css("position") || a.locked)
				(c.top -= m.y), (c.left -= m.x);
			return (c = {
				top: x(c.top - h * a.topRatio),
				left: x(c.left - j * a.leftRatio),
				width: x(f + j),
				height: x(g + h),
			});
		},
		step: function (a, d) {
			var e,
				c,
				f = d.prop;
			c = b.current;
			var g = c.wrapSpace,
				h = c.skinSpace;
			if ("width" === f || "height" === f)
				(e = d.end === d.start ? 1 : (a - d.start) / (d.end - d.start)),
					b.isClosing && (e = 1 - e),
					(c = "width" === f ? c.wPadding : c.hPadding),
					(c = a - c),
					b.skin[f](l("width" === f ? c : c - g * e)),
					b.inner[f](l("width" === f ? c : c - g * e - h * e));
		},
		zoomIn: function () {
			var a = b.current,
				d = a.pos,
				e = a.openEffect,
				c = "elastic" === e,
				k = f.extend(
					{
						opacity: 1,
					},
					d
				);
			delete k.position;
			c
				? ((d = this.getOrigPosition()), a.openOpacity && (d.opacity = 0.1))
				: "fade" === e && (d.opacity = 0.1);
			b.wrap.css(d).animate(k, {
				duration: "none" === e ? 0 : a.openSpeed,
				easing: a.openEasing,
				step: c ? this.step : null,
				complete: b._afterZoomIn,
			});
		},
		zoomOut: function () {
			var a = b.current,
				d = a.closeEffect,
				e = "elastic" === d,
				c = {
					opacity: 0.1,
				};
			e && ((c = this.getOrigPosition()), a.closeOpacity && (c.opacity = 0.1));
			b.wrap.animate(c, {
				duration: "none" === d ? 0 : a.closeSpeed,
				easing: a.closeEasing,
				step: e ? this.step : null,
				complete: b._afterZoomOut,
			});
		},
		changeIn: function () {
			var a = b.current,
				d = a.nextEffect,
				e = a.pos,
				c = {
					opacity: 1,
				},
				f = b.direction,
				g;
			e.opacity = 0.1;
			"elastic" === d &&
				((g = "down" === f || "up" === f ? "top" : "left"),
				"down" === f || "right" === f
					? ((e[g] = x(l(e[g]) - 200)), (c[g] = "+=200px"))
					: ((e[g] = x(l(e[g]) + 200)), (c[g] = "-=200px")));
			"none" === d
				? b._afterZoomIn()
				: b.wrap.css(e).animate(c, {
						duration: a.nextSpeed,
						easing: a.nextEasing,
						complete: b._afterZoomIn,
				  });
		},
		changeOut: function () {
			var a = b.previous,
				d = a.prevEffect,
				e = {
					opacity: 0.1,
				},
				c = b.direction;
			"elastic" === d &&
				(e["down" === c || "up" === c ? "top" : "left"] =
					("up" === c || "left" === c ? "-" : "+") + "=200px");
			a.wrap.animate(e, {
				duration: "none" === d ? 0 : a.prevSpeed,
				easing: a.prevEasing,
				complete: function () {
					f(this).trigger("onReset").remove();
				},
			});
		},
	};
	b.helpers.overlay = {
		defaults: {
			closeClick: !0,
			speedOut: 200,
			showEarly: !0,
			css: {},
			locked: !s,
			fixed: !0,
		},
		overlay: null,
		fixed: !1,
		create: function (a) {
			a = f.extend({}, this.defaults, a);
			this.overlay && this.close();
			this.overlay = f('<div class="fancybox-overlay"></div>').appendTo("body");
			this.fixed = !1;
			a.fixed &&
				b.defaults.fixed &&
				(this.overlay.addClass("fancybox-overlay-fixed"), (this.fixed = !0));
		},
		open: function (a) {
			var d = this;
			a = f.extend({}, this.defaults, a);
			this.overlay
				? this.overlay.unbind(".overlay").width("auto").height("auto")
				: this.create(a);
			this.fixed ||
				(q.bind("resize.overlay", f.proxy(this.update, this)), this.update());
			a.closeClick &&
				this.overlay.bind("click.overlay", function (a) {
					f(a.target).hasClass("fancybox-overlay") &&
						(b.isActive ? b.close() : d.close());
				});
			this.overlay.css(a.css).show();
		},
		close: function () {
			f(".fancybox-overlay").remove();
			q.unbind("resize.overlay");
			this.overlay = null;
			!1 !== this.margin &&
				(f("body").css("margin-right", this.margin), (this.margin = !1));
			this.el && this.el.removeClass("fancybox-lock");
		},
		update: function () {
			var a = "100%",
				b;
			this.overlay.width(a).height("100%");
			H
				? ((b = Math.max(z.documentElement.offsetWidth, z.body.offsetWidth)),
				  n.width() > b && (a = n.width()))
				: n.width() > q.width() && (a = n.width());
			this.overlay.width(a).height(n.height());
		},
		onReady: function (a, b) {
			f(".fancybox-overlay").stop(!0, !0);
			this.overlay ||
				((this.margin =
					n.height() > q.height() || "scroll" === f("body").css("overflow-y")
						? f("body").css("margin-right")
						: !1),
				(this.el = z.all && !z.querySelector ? f("html") : f("body")),
				this.create(a));
			a.locked &&
				this.fixed &&
				((b.locked = this.overlay.append(b.wrap)), (b.fixed = !1));
			!0 === a.showEarly && this.beforeShow.apply(this, arguments);
		},
		beforeShow: function (a, b) {
			b.locked &&
				(this.el.addClass("fancybox-lock"),
				!1 !== this.margin &&
					f("body").css("margin-right", l(this.margin) + b.scrollbarWidth));
			this.open(a);
		},
		onUpdate: function () {
			this.fixed || this.update();
		},
		afterClose: function (a) {
			this.overlay &&
				!b.isActive &&
				this.overlay.fadeOut(a.speedOut, f.proxy(this.close, this));
		},
	};
	b.helpers.title = {
		defaults: {
			type: "float",
			position: "bottom",
		},
		beforeShow: function (a) {
			var d = b.current,
				e = d.title,
				c = a.type;
			f.isFunction(e) && (e = e.call(d.element, d));
			if (p(e) && "" !== f.trim(e)) {
				d = f(
					'<div class="fancybox-title fancybox-title-' +
						c +
						'-wrap">' +
						e +
						"</div>"
				);
				switch (c) {
					case "inside":
						c = b.skin;
						break;
					case "outside":
						c = b.wrap;
						break;
					case "over":
						c = b.inner;
						break;
					default:
						(c = b.skin),
							d.appendTo("body"),
							H && d.width(d.width()),
							d.wrapInner('<span class="child"></span>'),
							(b.current.margin[2] += Math.abs(l(d.css("margin-bottom"))));
				}
				d["top" === a.position ? "prependTo" : "appendTo"](c);
			}
		},
	};
	f.fn.fancybox = function (a) {
		var d,
			e = f(this),
			c = this.selector || "",
			k = function (g) {
				var h = f(this).blur(),
					j = d,
					k,
					l;
				!g.ctrlKey &&
					!g.altKey &&
					!g.shiftKey &&
					!g.metaKey &&
					!h.is(".fancybox-wrap") &&
					((k = a.groupAttr || "data-fancybox-group"),
					(l = h.attr(k)),
					l || ((k = "rel"), (l = h.get(0)[k])),
					l &&
						"" !== l &&
						"nofollow" !== l &&
						((h = c.length ? f(c) : e),
						(h = h.filter("[" + k + '="' + l + '"]')),
						(j = h.index(this))),
					(a.index = j),
					!1 !== b.open(h, a) && g.preventDefault());
			};
		a = a || {};
		d = a.index || 0;
		!c || !1 === a.live
			? e.unbind("click.fb-start").bind("click.fb-start", k)
			: n
					.undelegate(c, "click.fb-start")
					.delegate(
						c + ":not('.fancybox-item, .fancybox-nav')",
						"click.fb-start",
						k
					);
		this.filter("[data-fancybox-start=1]").trigger("click");
		return this;
	};
	n.ready(function () {
		f.scrollbarWidth === r &&
			(f.scrollbarWidth = function () {
				var a = f(
						'<div style="width:50px;height:50px;overflow:auto"><div/></div>'
					).appendTo("body"),
					b = a.children(),
					b = b.innerWidth() - b.height(99).innerWidth();
				a.remove();
				return b;
			});
		if (f.support.fixedPosition === r) {
			var a = f.support,
				d = f('<div style="position:fixed;top:20px;"></div>').appendTo("body"),
				e = 20 === d[0].offsetTop || 15 === d[0].offsetTop;
			d.remove();
			a.fixedPosition = e;
		}
		f.extend(b.defaults, {
			scrollbarWidth: f.scrollbarWidth(),
			fixed: f.support.fixedPosition,
			parent: f("body"),
		});
	});
})(window, document, jQuery);
/*********************************************************************************************/
/*********************************************************************************************/
/*********************************************************************************************/
// js/all.js
/*********************************************************************************************/
/*********************************************************************************************/
/*********************************************************************************************/
$(document).ready(function () {
	$(document).tooltip({
		position: {
			my: "center bottom-20",
			at: "center top",
		},
	});

	var videoInit = 0;
	$(document).on(
		document.ontouchstart !== null ? "click" : "touchstart",
		".video_inline",
		function () {
			if (videoInit == 0) {
				var player = $(".flowplayers");
				if (player.html() == "") {
					$(".flowplayers").html(
						'<video autoplay >\
				 <source type="video/mp4" src="https://poopesh.com/images/poopesh/front/home/newvid.mp4">\
				 <!--<![endif]-->\
				 <!--[if IE]>\
				 <source type="video/flash" src="https://poopesh.com/images/poopesh/front/home/newvid.mp4">\
				 <![endif]-->\
			  </video>'
					);
				}
				player.flowplayer({
					clip: {
						// these two configuration variables does the trick
						autoPlay: true,
						autoBuffering: false, // <- do not place a comma here
					},
				});
			}
			videoInit = 1;
		}
	);

	//domain chooser
	$("#checkDomain").on(
		document.ontouchstart !== null ? "click" : "touchstart",
		function () {
			$("#domain,#domainenter,#domainorder,#domainresult").val("");
			$("#domainown").val("no");
			$("#domainresult").hide();
			$("#enter_domain").fadeOut(function () {
				$("#check_domain").fadeIn();
			});
		}
	);
	$("#enterDomain").on(
		document.ontouchstart !== null ? "click" : "touchstart",
		function () {
			$("#domain,#domainenter,#domainorder,#domainresult").val("");
			$("#domainresult").hide();
			$("#domainown").val("has");
			$("#check_domain").fadeOut(function () {
				$("#enter_domain").fadeIn();
			});
		}
	);
	if ($(".tooltip").length > 0)
		$(".tooltip").hoverIntent(showToolTip, hideTooltip);

	$(".menu ul").find("ul").show().hide();
	$(".menu > ul > li").hover(
		function () {
			$(this).children("ul").stop().fadeIn(300);
		},
		function () {
			$(this).children("ul").stop().fadeOut("fast");
		}
	);
	/* domain checker */
	$("#domainenter").blur(function (e) {
		$("#domainchoose").click();
	});
	$("#domainchoose").on("click", function () {
		$("#domainresult").fadeOut();
		if (isValidURL($("#domainenter").val())) {
			$("#domainorder").val($("#domainenter").val());
		} else {
			if ($("#domainenter").is(":visible")) {
				$("#domainorder").val("");
				alert("دامین معتبر نیست.\
				 " + "\n" + "\
				 فرمت صحیح: domain.com\
				");
			}
		}
		return false;
	});
	$("#domain").keyup(function (e) {
		if (e.keyCode == 13) {
			e.preventDefault();
			$("#domainchecker").click();
		}
	});
	$("#domainchecker").on(
		document.ontouchstart !== null ? "click" : "touchstart",
		function () {
			var rex = /^[a-zA-Z0-9][a-zA-Z0-9-]*$/;
			//var rex = /(^[a-zA-Z0-9][a-zA-Z0-9-]*$)|(^[a-zA-Z0-9][a-zA-Z0-9-]*\.[a-zA-Z0-9]{0,3}$)/g;
			if ($("#domain").val() !== "") {
				if ($("#domain").val().length < 3) {
					$("#domainresult").html(
						'<span style="color:red">اين دامنه قابل ثبت نيست.</span>'
					);
					$("#domainresult").fadeIn();
					$("#domain").val("");
				} else {
					if ($("#domain").val().indexOf(".") >= 0) {
						alert("لطفا دامنه را بدون پسوند و نقطه انتخاب کنيد");
						$("#domain").val("");
					} else if (
						!rex.test($("#domain").val()) ||
						$("#domain").val().charAt(0) === "-" ||
						$("#domain")
							.val()
							.substr($("#domain").val().length - 1) === "-"
					) {
						alert(
							"کاراکتر هاي وارد شده مجاز نمي باشد, تنها کاراکتر - مجاز است."
						);
						$("#domain").val("");
					} else {
						var tld = "ir";
						$("#domainresult").fadeOut();
						$("#domainchecker").attr("date-lable", $("#domainchecker").html());
						var load = $('<div id="domainloding" class="smallloading"></div>');
						$("#domainchecker").html(load);
						$.post(
							site_url + "includes/php/ajax/domainchecker.php",
							{
								url: $("#domain").val(),
								tld: tld,
							},
							function (data) {
								if (data == "1") {
									$("#domainorder").val($("#domain").val() + "." + tld);
									$("#domainresult").html(
										'\
							<span style="color:green;direction:rtl;display:inline-block">دامنه ' +
											$("#domain").val() +
											"." +
											tld +
											" معتبر است.</span>\
							"
									);
								} else if (data == "2") {
									$("#domainresult").html(
										'<span style="color:red">دامين اشغال است.</span>'
									);
									$("#domain").val("");
								} else if (data == "3") {
									$("#domainorder").val($("#domain").val() + "." + tld);
									$("#domainresult").html(
										'<span style="color:green">در حال حاضر امکان چک کردن دامنه نمی باشد و تایید دامنه بصورت موقت می باشد.</span>'
									);
								}
								$("#domainresult").fadeIn();
								$("#domainchecker").fadeIn();
								$("#domainchecker").html(
									$("#domainchecker").attr("date-lable")
								);
							}
						);
					}
				}
			} else {
				$("#domainresult").html(
					'<span style="color:red">لطفا نام دامين را انتخاب کنيد</span>'
				);
				$("#domainresult").fadeIn();
			}
			return false;
		}
	);
	/* end domain checker */
	if ($(".detailed").length > 0)
		$(".detailed").hoverIntent(featuresHover, featuresHoverOff);
	$("#contactFormButton").on(
		document.ontouchstart !== null ? "click" : "touchstart",
		function () {
			$("#contactFormButton").hide();
			if (check_empty() == false) {
				alert("لطفا اطلاعات خواسته شده را وارد کنيد");
				$("#contactFormButton").show();
			} else {
				ajaxForm(
					"#contactForm",
					"contact",
					"درخواست شما با موفقيت ثبت شد و در صورت نياز به شما پاسخ داده خواهد شد."
				);
			}
			return false;
		}
	);
	$(document).on(
		document.ontouchstart !== null ? "click" : "touchstart",
		"#orderButton",
		function () {
			order();
		}
	);

	$("#CreditpayButton").on(
		document.ontouchstart !== null ? "click" : "touchstart",
		function () {
			order("Creditpay");
			return false;
		}
	);
	$("#CreditpayCardButton").on(
		document.ontouchstart !== null ? "click" : "touchstart",
		function () {
			order("CreditpayCard");
			return false;
		}
	);

	$("#payButton").on(
		document.ontouchstart !== null ? "click" : "touchstart",
		function () {
			order("pay");
			return false;
		}
	);
	$("#cancelPayButton").on(
		document.ontouchstart !== null ? "click" : "touchstart",
		function () {
			order("cancelling");
			return false;
		}
	);
	$("#payCardButton").on(
		document.ontouchstart !== null ? "click" : "touchstart",
		function () {
			order("payCard");
			return false;
		}
	);
	$("#payCuponButton").on(
		document.ontouchstart !== null ? "click" : "touchstart",
		function () {
			order("payCupon");
			return false;
		}
	);
	$(".plans input[type=checkbox]").on(
		document.ontouchstart !== null ? "click" : "touchstart",
		function () {
			if ($(this).attr("id") == "products") {
				if (this.checked) {
					addPrice(ProductPrice);
				} else {
					removePrice(ProductPrice);
				}
			} else if ($(this).attr("id") == "template_editor") {
				if (this.checked) {
					addPrice(templateEditorPrice);
				} else {
					removePrice(templateEditorPrice);
				}
			} else if ($(this).attr("id") == "sms_panel") {
				if (this.checked) {
					addPrice(smsPnaelPrice);
				} else {
					removePrice(smsPnaelPrice);
				}
			} else if ($(this).attr("id") == "pq") {
				if (this.checked) {
					addPrice("10");
				} else {
					removePrice("10");
				}
			}
			$(".plans input[type=checkbox]").each(function () {
				val = $("#planType").val();
				if (val == "1") {
					if ($("#products").attr("checked")) {
						$("#planType").val("2");
						$("#planType").change();
					}
				}
				if (val == "2") {
					if ($("#sms_panel").attr("checked")) {
						$("#planType").val("3");
						$("#planType").change();
					}
				}
			});
		}
	);
	$("#planType").change(function () {
		$this = $(this);
		$this.css({
			background: "#FFF3D2",
		});
		choose_plan();
		setTimeout(function () {
			$this.css({
				background: "#FAFAFA",
			});
		}, 1000);
	});
	//choose_plan();
	$(".orderModule").on(
		document.ontouchstart !== null ? "click" : "touchstart",
		function () {
			add_module(this);
		}
	);

	$(document).on(
		document.ontouchstart !== null ? "click" : "touchstart",
		"#why-poopesh .acordion div",
		function () {
			$("#why-poopesh .acordion span:visible").slideUp();
			$("#why-poopesh .acordion div").removeClass("opened");
			if (!$(this).next("span").is(":visible")) {
				$(this).next("span").css("display", "block").hide().slideDown();
				$(this).addClass("opened");
			}
		}
	);

	$(document).on(
		document.ontouchstart !== null ? "click" : "touchstart",
		"#start .plandetail",
		function () {
			$(this).toggleClass("opened").closest("ul").find(".full").toggle();
		}
	);
});

function calculate_price() {
	var price =
		order_off == 0 ? planPrice : planPrice - (order_off / 100) * planPrice;
	if ($('[name="sms_panel"]').attr("checked") == "checked")
		price += smsPnaelPrice;
	if ($('[name="e_mail"]').attr("checked") == "checked") price += EmailPrice;
	var finalPrice = price + price * maliat;
	$("#pricewm").html(finalPrice);
}

function add_module(obj) {
	$(".chkbox", obj).hasClass("active")
		? $(".chkbox", obj).removeClass("active")
		: $(".chkbox", obj).addClass("active");
	$(".triangle", obj).hasClass("active")
		? $(".triangle", obj).removeClass("active")
		: $(".triangle", obj).addClass("active");
	$(obj).hasClass("active")
		? $(obj).removeClass("active")
		: $(obj).addClass("active");
	var type = $(obj).attr("data-type");
	$('[name="' + type + '"]').attr("checked") == "checked"
		? $('[name="' + type + '"]').removeAttr("checked")
		: $('[name="' + type + '"]').attr("checked", "checked");
	var trType = $("h3", obj).html();
	$("." + type, "#eachOrders").length
		? $("." + type, "#eachOrders").remove()
		: $('<div class="' + type + '">' + trType + "</div>").insertAfter(
				$("#eachOrders .this")
		  );
	calculate_price();
}

function hideTooltip() {
	$(this).next().slideUp();
}

function showToolTip() {
	var pos = $(this).position();
	var objWidth = $(this).next().width() / 2;
	var objHeight = $(this).next().height();

	$(this)
		.next()
		.css({
			position: "absolute",
			top: pos.top - objHeight - 20,
			left: parseInt(pos.left),
			"margin-left": -$(this).outerWidth(true),
		});
	$(this).next().slideDown();
}

function featuresHover() {
	$(this).children().slideDown(500);
	var next = $(this).children().next();
	var img = $(next).find("img");
	$(next).children().next().fadeOut(300);
	$(img).animate(
		{
			width: "50px",
		},
		400
	);
}

function featuresHoverOff() {
	$(this).children().hide();
	$(this).children().next().fadeIn(700);
	var next = $(this).children().next();
	var img = $(next).find("img");
	$(img).animate(
		{
			width: "200px",
		},
		400
	);

	$(this).children().next().next().fadeIn(700);
	$(next).children().next().fadeIn(700);
	$(next).children().next().next().fadeIn(700);
}

function ajaxForm(from, php, msg) {
	var order_cod = "";
	$(from).find("#loading").fadeIn();
	var str = $(from).serialize();
	var ret;
	$("html,body").animate(
		{
			scrollTop: "0px",
		},
		300
	);
	$.ajax({
		url: site_url + "includes/php/ajax/" + php + ".php",
		type: "post",
		//async: (from == '#orderPayment') ? false : true,
		async: false,
		data: str,
		success: function (data) {
			if (from == "#orderForm") {
				var dataResult = JSON.parse(data);
				var data = dataResult.result;
				var order = dataResult.order;
			}
			if (from == "#orderPayment") {
				var dataResult = JSON.parse(data);
				var data = dataResult.result;
				var code = dataResult.code;
				order_cod = code;
			}
			if (data == "success") {
				if (from != "#orderForm") {
					if ($(".content").length) {
						$(".content").html('<div id="result">' + msg + "</div>");
					} else {
						$(".contentwrap").html('<div id="result">' + msg + "</div>");
					}
				}
				$(from).find("#loading").fadeOut();
				$("#result").html(msg).fadeIn();
				if (from == "#orderForm") {
					//$('.headerPage').hide();
					//$('.broya.center').hide();
					$(".factor-order").fadeOut("fast", function () {
						//$('.factor-orderBtns').hide();
						//$('#result').html('<form id="orderPayment" method="post"></form>').hide();
						$("#result").hide();
						$("#orderPayment").html(
							'<input type="number" name="insert_id_order" value="' +
								order +
								'"/>'
						);
						$(".displayaftertayid").show();
						$(".factorcode").html(toPersianDigit(order));
						$(".factor-order .factorcodeHolder").css({
							display: "inline-block",
						});
						$(".factor-order").fadeIn();
					});
				}
			} else {
				$(from).find("#loading").fadeOut();
				$(from)
					.find("#result")
					.html("متاسفانه مشکلي در سيستم رخ داده است، لطفا دوباره امتحان کنید")
					.fadeIn();
				$(".orderButton").removeClass("disabled");
				$(".orderButtonSmall").removeClass("disabled");
				//if(data == 'duplicate') $('.content').html('<div id="result">شما قبلا ایمیل خود را ثبت کرده اید.</div>').fadeIn();//newsletter
			}
		},
		error: function () {
			alert("error!");
			$(".factor-orderBtns").hide();
			$(".orderButton").removeClass("disabled");
			$(".orderButtonSmall").removeClass("disabled");
		},
	});
	return order_cod;
}
var order_validated = 0;

function order(what) {
	if (what == "payCard" || what == "CreditpayCard") {
		classs = "need2";
	} else if (what == "cancelling") {
		classs = "need";
	} else if (what == "payCupon") {
		classs = "need3";
	} else {
		classs = "need";
	}
	if (check_empty(classs) == false) {
		alert("لطفا اطلاعات خواسته شده را وارد کنيد");
	} else {
		if (!$(".orderButtonSmall").hasClass("disabled")) {
			$(".orderButtonSmall").addClass("disabled");
			if (what == "pay") {
				ajaxForm(
					"#payForm",
					"order",
					"اطلاعات واريزي با موفقيت ثبت شد, پس از تاييد به شما اطلاع داده خواهد شد."
				);
			} else if (what == "payCard") {
				ajaxForm(
					"#payFormCard",
					"order",
					"اطلاعات واريزي با موفقيت ثبت شد, پس از تاييد به شما اطلاع داده خواهد شد."
				);
			} else if (what == "Creditpay") {
				ajaxForm(
					"#payForm",
					"buycredit",
					'اطلاعات واريزي با موفقيت ثبت شد, پس از تاييد به شما اطلاع داده خواهد شد. برای بازگشت به پنل مدیریت <a href="http://' +
						slave_site_url +
						'/admin/?do=order&page=log">اینجا</a> کلیک کنید.'
				);
			} else if (what == "CreditpayCard") {
				ajaxForm(
					"#payFormCard",
					"buycredit",
					'اطلاعات واريزي با موفقيت ثبت شد, پس از تاييد به شما اطلاع داده خواهد شد. برای بازگشت به پنل مدیریت <a href="http://' +
						slave_site_url +
						'/admin/?do=order&page=log">اینجا</a> کلیک کنید.'
				);
			} else if (what == "payCupon") {
				//ajaxForm('#payCuponForm','order','کوپن شما ثبت شد, پس از تاييد به شما اطلاع داده خواهد شد.');
				checkCupon(function (dataResult) {
					if (dataResult.result == "success") {
						window.location.href =
							$("#payedUrl").val() + "&cupon=" + $("#cupon").val();
					} else {
						$("#cuponError").fadeIn();
						$(".orderButtonSmall").removeClass("disabled");
					}
				});
			} else if (what == "cancelling") {
				ajaxForm(
					"#cancelpayForm",
					"order",
					"درخواست شما ثبت شد و طی 48 ساعت کاری آینده بررسی و نتیجه آن به شما اطلاع داده خواهد شد."
				);
			} else {
				$(".orderButtonSmall").removeClass("disabled");
				var emailReg = /^([\w-\.]+@([\w-]+\.)+[\w-]{2,4})?$/;
				if ($("#domainorder").val() == "") {
					if ($("#enter_domain").css("display") == "block")
						alert("لطفا دامنه را انتخاب کنيد.");
					else alert("لطفا دامنه را انتخاب و چک کنيد.");
				} else if (!emailReg.test($("#email").val())) {
					alert("ايميل نامعتبر است.");
				} else if ($("#checkGhavanin").prop("checked") == false) {
					alert("شما بايد قوانين را مطالعه کنيد.");
				} else {
					$("#orderButton").hide();
					show_factor();
					order_validated = 1;
				}
			}
		}
	}
}
var payurl;
$(document).on(
	document.ontouchstart !== null ? "click" : "touchstart",
	"#tayidOrder",
	function () {
		if (!$(".orderButtonSmall").hasClass("disabled") && order_validated == 1) {
			$(".orderButtonSmall").addClass("disabled");
			//ajaxForm('#orderForm','order','سفارش شما با موفقیت ثبت شد و اطلاعات صورت حساب، به پست الکترونیک شما ارسال گردید.<div style="color:red;font-size:11px;padding-top: 5px;"> در صورت نیافتن ایمیل لطفا پوشه اسپم پست الکترونیک خود را چک کنید</div>');
			order_cod = ajaxForm("#orderPayment", "order", "");
			window.location.href = payurl + order_cod;
		}
	}
);
$(document).on(
	document.ontouchstart !== null ? "click" : "touchstart",
	"#backToOrder",
	function () {
		$(".factor-order").fadeOut(function () {
			$("#orderWebsite").fadeIn();
		});
	}
);

function show_factor() {
	ajaxForm("#orderForm", "order.php?preRegister=", "");

	$(".user").html($("#fname").val() + " " + $("#lname").val());
	$(".order_val").html($("#domainorder").val());
	$("#orderWebsite").fadeOut(function () {
		$(".factor-order").fadeIn();
	});
	payurl = $("#payurl").val();
}
$(document).on(
	document.ontouchstart !== null ? "click" : "touchstart",
	".printHolder",
	function () {
		print(".printable");
	}
);

function print(elm_id) {
	var data = $(elm_id).html();

	var mywindow = window.open("", "", "height=550,width=770");
	mywindow.document.write(
		"\
    <html><head><title></title><style>\
    body{direction:rtl}\
    .factor{\
        background: #fff;\
        border: 1px solid #111;\
        clear: both;\
        color: #111;\
        padding: 5px;\
        width: 680px;\
        margin: 0 auto;\
        font-family: tahoma;\
    }\
    .factorLeft{text-align:left !important;clear:both;height:84px}\
    .factorcodeHolder{float:left}\
    .logo-gray{position:absolute;right:50px;top:18px;width:75px;height:75px;} \
    .factorTime,.factorBox{width: 100px;display:inline-block;margin:2px !important;text-align: left;font-size: 11px !important;}\
    .factorBox{padding: 0px 10px;border:1px solid #111;font-size: 13px !important;}\
    .factorTime span:last-child{display:inline-block;direction: ltr}\
    .factor-details fieldset{BORDER:1PX SOLID #111;padding:12px}\
    .factor-details fieldset p{display: block;line-height: 20px;}\
    .factor-details fieldset p span.left{float:left;padding-left:13px}\
    .factor-details legend{font-size: 16px;padding: 0px 5px;text-align: right;}\
    .factorPriceHolder p{float:left;}\
    .factor-order{margin: 0 auto;width: 432px;padding: 20px 30px;}\
    .factor-order legend{padding:0 8px;}\
    .factorPrice p{text-align: left;}\
    .factor p {color: #111 !important;margin:10px 0 !important;}\
    .factor-details{padding:0 15px}\
    .finalPrice{font-size: 15px !important;}\
    .factor_border{border: 1px solid #111;margin: 17px;font-size:13px;padding: 4px;text-align: center;}\
    </style>\
    "
	);
	//mywindow.document.write('<link rel="stylesheet" href="'+site_url+'css/all.css" type="text/css" />');
	mywindow.document.write("</head><body>");
	mywindow.document.write(data);
	mywindow.document.write("</body></html>");
	mywindow.document.close();
	mywindow.focus();
	mywindow.print();
	mywindow.close();
	return true;
}

function check_empty(classs) {
	//check empty fields
	classs = typeof classs !== "undefined" ? classs : "need";
	var flag = true;
	$("." + classs).each(function () {
		if ($(this).val() === "") {
			$(this).css("border-color", "red");
			if ($(this).attr("name") == "file") $(this).css("background", "#FFAAAA");
			if ($(this).prop("tagName") != "A") {
				//<select bug
				flag = false;
			}
		}
	});
	return flag;
}

function timer() {
	count = count - 1;
	if (count <= 0) {
		clearInterval(counter);
		return;
	}

	document.getElementById("timer").innerHTML = count + " ثانيه";
}
this.imagePreview = function () {
	/* Mouse XY offset*/
	xOffset = 250;
	yOffset = 100;
	/*Mouse XY Offset */

	$("a.preview").hover(
		function (e) {
			this.t = this.title;
			this.title = "";
			var c = this.t != "" ? "<br/>" + this.t : "";
			$("body").append(
				"<p id='preview'><img src='" +
					$(this).children("img").attr("data") +
					"' alt='Image preview' />" +
					c +
					"</p>"
			);
			$("#preview").fadeIn("fast");
			previewPos(e.pageX, e.pageY);
		},
		function () {
			this.title = this.t;
			$("#preview").remove();
		}
	);
	$("a.preview").mousemove(function (e) {
		previewPos(e.pageX, e.pageY);
	});
};

function previewPos(X, Y) {
	var width = $(window).width();
	var halfWidth = width / 2;
	if (X > halfWidth) {
		left = X - 1000; //1000 = size ax + offset
	} else {
		left = X;
	}
	$("#preview")
		.css("top", Y - xOffset + "px")
		.css("left", left + yOffset + "px");
}
$(document).ready(function () {
	imagePreview();
});
$(document).ready(function () {
	if (typeof $.fancybox !== "undefined") {
		$(".inline-text").fancybox({
			transitionIn: "elastic",
			transitionOut: "elastic",
			speedIn: 600,
			speedOut: 200,
			overlayShow: false,
			width: 800,
			height: 200,
			autoSize: false,
		});
		$(".video").fancybox({
			transitionIn: "elastic",
			transitionOut: "elastic",
			speedIn: 600,
			speedOut: 200,
			overlayShow: false,
			autoSize: true,
		});
	}
});
$(function () {
	$("#headTitle").css({
		display: "block",
	});
	$("#headTitle").css({
		height: $("#headTitle div:first").css("height"),
		overflow: "hidden",
	});

	function slide() {
		$("#headTitle div:first").fadeOut(1500, function () {
			var $this = $(this);
			$this.animate(
				{
					opacity: "1",
				},
				3000,
				function () {
					$this.parent().append(this);
					$this.show();
					slide();
				}
			);
		});
	}
	slide();
});

var pauseTime = 4; //seconds
$.fn.textSlider = function (eeq) {
	var this_class = $(this).attr("class");
	var slide_text_count = $("." + this_class + " > div").length;
	var eeq = eeq == slide_text_count ? 0 : eeq;
	$("." + this_class + " > div")
		.eq(eeq - 1)
		.fadeOut(function () {
			$("." + this_class + " > div")
				.eq(eeq)
				.fadeIn();
		});
	setTimeout(function () {
		$(".sideTitle").textSlider(eeq + 1);
	}, pauseTime * 1000);
};

$(window).load(function () {
	$(".sideTitle").textSlider(0);
	$("#Enamad").attr("src", "/iframe.htm");

	if (load_google_analytics) {
		(function (i, s, o, g, r, a, m) {
			i["GoogleAnalyticsObject"] = r;
			(i[r] =
				i[r] ||
				function () {
					(i[r].q = i[r].q || []).push(arguments);
				}),
				(i[r].l = 1 * new Date());
			(a = s.createElement(o)), (m = s.getElementsByTagName(o)[0]);
			a.async = 1;
			a.src = g;
			m.parentNode.insertBefore(a, m);
		})(
			window,
			document,
			"script",
			"//www.google-analytics.com/analytics.js",
			"ga"
		);

		ga("create", "UA-39649829-1", "poopesh.com");
		ga("send", "pageview");
	}
});

function isValidURL(url) {
	return url.match(
		/^([a-zA-Z0-9])(([a-zA-Z0-9-]{1,61})?[a-zA-Z0-9]{1})?(\.[a-zA-Z0-9](([a-zA-Z0-9-]{1,61})?[a-zA-Z0-9‌​]{1})?)?(\.[a-zA-Z]{2,10})+$/
	)
		? true
		: false;
	//return url.match(/^([a-zA-Z0-9])(([a-zA-Z0-9-]{1,61})?[a-zA-Z0-9]{1})?(\.[a-zA-Z0-9](([a-zA-Z0-9-]{1,61})?[a-zA-Z0-9‌​]{1})?)?(\.[a-zA-Z]{2,4})+$/) ? true : false;
	//return url.match(/^[a-zA-Z0-9][a-zA-Z0-9-]{1,61}[a-zA-Z0-9]\.[a-zA-Z]{2,}$/) ? true : false;
}
$(document).on(
	document.ontouchstart !== null ? "click" : "touchstart",
	"#payOnline",
	function (e) {
		e.preventDefault();
		var radio = $("[name=bank_type]").filter(":checked").val();
		if (radio == "pasargad") {
			pasargadSubmit();
		}
		if (radio == "payline") {
			$("#payLine").click();
		}
		if (radio == "zarinpal") {
			$("#zarinPal").click();
		}
	}
);

function pasargadSubmit() {
	if ($("#pepform").length < 1) {
		/*$(this).fadeOut('fast',function(){
		   $(this).parent().prev().hide();
		   $('<div id="domainloding" class="smallloading"></div>').appendTo($(this).closest('.orderWay')); 
		});*/
		$("body").append(form);
		$("#pepformBtn").click();
	}
}

$(document).on("scroll", function () {
	if ($("iframe").length > 0) {
		var docHeight = $(document).height();
		var footerHeight =
			parseInt($(".foot1").outerHeight()) + parseInt($(".foot2").outerHeight());
		var iframeOffset =
			parseInt($("iframe").offset().top) + parseInt($("iframe").outerHeight());
		var footerOffset = docHeight - footerHeight;
		if ($(window).scrollTop() + $(window).height() >= footerOffset)
			$("iframe").css({
				position: "absolute",
				top: footerOffset - parseInt($("iframe").outerHeight()),
			});
		else
			$("iframe").css({
				position: "fixed",
				top: "auto",
				bottom: "10px",
			});
	}
});

function checkCupon(callback) {
	$("#cuponError").fadeOut();
	$.ajax({
		url: site_url + "includes/php/ajax/cupon.php",
		type: "post",
		data: "cupon=" + $("#cupon").val() + "&plan=" + $("#plan_cupon").val(),
		success: function (data) {
			var dataResult = JSON.parse(data);
			callback(dataResult);
		},
		error: function () {},
	});
}
$(document).on(
	document.ontouchstart !== null ? "click" : "touchstart",
	"#saveCupon",
	function () {
		checkCupon(function (dataResult) {
			if (dataResult.result == "success") {
				if ($("#cuponCodeOff").length) {
					$("#cuponCodeOff b").text(dataResult["data"]["off"]);
				} else {
					$(
						'<div class="thintext center" id="cuponCodeOff">تخفیف کوپن <b>' +
							dataResult["data"]["off"] +
							"</b> %</div>"
					).insertBefore($("#pricewm"));
				}
				if ($("#PrintcuponCodeOff").length) {
					$("#PrintcuponCodeOff .takhfif").text(
						formatNumber(dataResult["data"]["off_rial"])
					);
				} else {
					$(
						'<p id="PrintcuponCodeOff"><span>تخفیف کوپن: </span><span class="takhfif left">' +
							formatNumber(dataResult["data"]["off_rial"]) +
							" <span>ریال</span></span></p>"
					).insertAfter($("#offAfter"));
				}
				$("#pricewm,#factorFinalPrice").text(
					formatNumber(dataResult["data"]["off_price"])
				);
				$("#printTax").text(formatNumber(dataResult["data"]["tax_rial"]));
			} else {
				$("#cuponError").fadeIn();
			}
		});
	}
);

function formatNumber(nStr) {
	nStr += "";
	x = nStr.split(".");
	x1 = x[0];
	x2 = x.length > 1 ? "." + x[1] : "";
	var rgx = /(\d+)(\d{3})/;
	while (rgx.test(x1)) {
		x1 = x1.replace(rgx, "$1" + "," + "$2");
	}
	return x1 + x2;
}

function toPersianDigit(a) {
	a = String(a);
	return a.replace(/\d+/g, function (digit) {
		var enDigitArr = [],
			peDigitArr = [];
		for (var i = 0; i < digit.length; i++) {
			enDigitArr.push(digit.charCodeAt(i));
		}
		for (var j = 0; j < enDigitArr.length; j++) {
			peDigitArr.push(
				String.fromCharCode(enDigitArr[j] + (!!a && a == true ? 1584 : 1728))
			);
		}
		return peDigitArr.join("");
	});
}
